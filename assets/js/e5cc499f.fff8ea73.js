(window.webpackJsonp=window.webpackJsonp||[]).push([[195],{268:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return p}));var r=n(3),a=n(8),i=(n(0),n(281)),o={id:"regular_expression_syntax",title:"Regular Expression Syntax",sidebar_label:"Regular Expression Syntax",slug:"regular_expression_syntax",custom_edit_url:null},s={unversionedId:"python/regex/regular_expression_syntax",id:"python/regex/regular_expression_syntax",isDocsHomePage:!1,title:"Regular Expression Syntax",description:"Python uses re module to work with regular expressions (regex). To get started with regular expressions, you need to import re module.",source:"@site/docs/python/regex/1_regex_syntax.md",slug:"/python/regex/regular_expression_syntax",permalink:"/docs/python/regex/regular_expression_syntax",editUrl:null,version:"current",sidebar_label:"Regular Expression Syntax",sidebar:"someSidebar",previous:{title:"Regular Expressions",permalink:"/docs/python/regex/regular_expressions"},next:{title:"Character Sets",permalink:"/docs/python/regex/character_sets"}},l=[],c={toc:l};function p(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Python uses ",Object(i.b)("inlineCode",{parentName:"p"},"re")," module to work with regular expressions (regex). To get started with regular expressions, you need to import ",Object(i.b)("inlineCode",{parentName:"p"},"re")," module."),Object(i.b)("p",null,"This section will use ",Object(i.b)("inlineCode",{parentName:"p"},"search")," function for all examples. And in the next chapter, the rest of functions of ",Object(i.b)("inlineCode",{parentName:"p"},"re")," module will be covered."),Object(i.b)("p",null,"Syntax of ",Object(i.b)("inlineCode",{parentName:"p"},"search")," function is:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"match = re.search(pattern, string, flags=0)\n")),Object(i.b)("p",null,"Function ",Object(i.b)("inlineCode",{parentName:"p"},"search")," has three parameters:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"pattern - regular expression"),Object(i.b)("li",{parentName:"ul"},"string - string in which search pattern is searched"),Object(i.b)("li",{parentName:"ul"},"flags - change regex behavior (covered in next chapter)")),Object(i.b)("p",null,"If a match is found, function will return special object Match. If there is no match, function will return None."),Object(i.b)("p",null,"Important distinction of ",Object(i.b)("inlineCode",{parentName:"p"},"search")," function is that it only looks for a first match. That is, if there are several substrings in a line that correspond to a regex, ",Object(i.b)("inlineCode",{parentName:"p"},"search")," will return only the first match found."),Object(i.b)("p",null,"The simplest example of a regex is a substring:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"In [1]: import re\n\nIn [2]: int_line = '  MTU 1500 bytes, BW 10000 Kbit, DLY 1000 usec,'\n\nIn [3]: match = re.search('MTU', int_line)\n")),Object(i.b)("p",null,"In this example:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"first import module ",Object(i.b)("inlineCode",{parentName:"li"},"re")),Object(i.b)("li",{parentName:"ul"},"then goes an example of string int_line"),Object(i.b)("li",{parentName:"ul"},"in line 3 a search pattern is passed to ",Object(i.b)("inlineCode",{parentName:"li"},"search")," function plus string int_line in which the match is searched")),Object(i.b)("p",null,"In this case we are simply looking for whether there is \u2018MTU\u2019 substring in string int_line. If it exists, ",Object(i.b)("inlineCode",{parentName:"p"},"match")," variable will contain a special Match object:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"In [4]: print(match)\n<_sre.SRE_Match object; span=(2, 5), match='MTU'>\n")),Object(i.b)("p",null,"Match object has several methods that allow to get different information about received match. For example, ",Object(i.b)("inlineCode",{parentName:"p"},"group")," method shows that string matches an expression described."),Object(i.b)("p",null,"In this case, it\u2019s just a \u2018MTU\u2019 substring:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"In [5]: match.group()\nOut[5]: 'MTU'\n")),Object(i.b)("p",null,"If there was no match, ",Object(i.b)("inlineCode",{parentName:"p"},"match")," variable will have None value:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"In [6]: int_line = '  MTU 1500 bytes, BW 10000 Kbit, DLY 1000 usec,'\n\nIn [7]: match = re.search('MU', int_line)\n\nIn [8]: print(match)\nNone\n")),Object(i.b)("p",null,"The full potential of regular expressions is revealed when using special characters. For example, symbol ",Object(i.b)("inlineCode",{parentName:"p"},"\\d")," means a digit, ",Object(i.b)("inlineCode",{parentName:"p"},"+")," means repetition of previous symbol one or more times. If you combine them ",Object(i.b)("inlineCode",{parentName:"p"},"\\d+"),", you get an expression that means one or more digits."),Object(i.b)("p",null,"Using this expression, you can get the part of string that describes bandwidth:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"In [9]: int_line = '  MTU 1500 bytes, BW 10000 Kbit, DLY 1000 usec,'\n\nIn [10]: match = re.search('BW \\d+', int_line)\n\nIn [11]: match.group()\nOut[11]: 'BW 10000'\n")),Object(i.b)("p",null,"Regular expressions are particularly useful in getting certain substrings from a string. For example, it is necessary to get VLAN, MAC and ports from the output of such log message:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"In [12]: log2 = 'Oct  3 12:49:15.941: %SW_MATM-4-MACFLAP_NOTIF: Host f04d.a206.7fd6 in vlan 1 is flapping between port Gi0/5 and port Gi0/16'\n")),Object(i.b)("p",null,"This can be done with regex:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"In [13]: re.search('Host (\\S+) in vlan (\\d+) is flapping between port (\\S+) and port (\\S+)', log2).groups()\nOut[13]: ('f04d.a206.7fd6', '1', 'Gi0/5', 'Gi0/16')\n")),Object(i.b)("p",null,"Method ",Object(i.b)("inlineCode",{parentName:"p"},"group")," returns only those parts of original string that are in parentheses. Thus, by placing a part of expression in parentheses, you can specify which parts of the line you want to remember."),Object(i.b)("p",null,"Expression ",Object(i.b)("inlineCode",{parentName:"p"},"\\d+")," has been used before - it describes one or more digits. And expression ",Object(i.b)("inlineCode",{parentName:"p"},"\\S+")," describes all characters except whitespace (space, tab, etc.)."),Object(i.b)("p",null,"The following subsections deal with special characters that are used in regular expressions."),Object(i.b)("p",null,"Note"),Object(i.b)("p",null,"If you know what special characters mean in regular expressions, you can skip the following subsection and immediately switch to subsection about module ",Object(i.b)("inlineCode",{parentName:"p"},"re"),"."))}p.isMDXComponent=!0},281:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return h}));var r=n(0),a=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=a.a.createContext({}),p=function(e){var t=a.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},b=function(e){var t=p(e.components);return a.a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},m=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),b=p(n),m=r,h=b["".concat(o,".").concat(m)]||b[m]||u[m]||i;return n?a.a.createElement(h,s(s({ref:t},c),{},{components:n})):a.a.createElement(h,s({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);