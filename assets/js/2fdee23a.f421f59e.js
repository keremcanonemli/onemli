(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{121:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return m}));var a=n(0),o=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=o.a.createContext({}),p=function(e){var t=o.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},b=function(e){var t=p(e.components);return o.a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},u=o.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),b=p(n),u=a,m=b["".concat(s,".").concat(u)]||b[u]||d[u]||r;return n?o.a.createElement(m,c(c({ref:t},l),{},{components:n})):o.a.createElement(m,c({ref:t},l))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,s=new Array(r);s[0]=u;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:a,s[1]=c;for(var l=2;l<r;l++)s[l]=n[l];return o.a.createElement.apply(null,s)}return o.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},84:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return i})),n.d(t,"default",(function(){return p}));var a=n(3),o=n(8),r=(n(0),n(121)),s={id:"special_methods",title:"Special Methods",sidebar_label:"4.3 Special Methods",slug:"special_methods",custom_edit_url:null},c={unversionedId:"python/classes_objects/special_methods",id:"python/classes_objects/special_methods",isDocsHomePage:!1,title:"Special Methods",description:'Various parts of Python\'s behavior can be customized via special or so-called "magic" methods.',source:"@site/docs/python/classes_objects/03_Special_methods.md",slug:"/python/classes_objects/special_methods",permalink:"/docs/python/classes_objects/special_methods",editUrl:null,version:"current",sidebar_label:"4.3 Special Methods",sidebar:"someSidebar",previous:{title:"Inheritance",permalink:"/docs/python/classes_objects/inheritance"},next:{title:"Defining Exceptions",permalink:"/docs/python/classes_objects/defining_exceptions"}},i=[{value:"Introduction",id:"introduction",children:[]},{value:"Special methods for String Conversions",id:"special-methods-for-string-conversions",children:[]},{value:"Special Methods for Mathematics",id:"special-methods-for-mathematics",children:[]},{value:"Special Methods for Item Access",id:"special-methods-for-item-access",children:[]},{value:"Method Invocation",id:"method-invocation",children:[]},{value:"Bound Methods",id:"bound-methods",children:[]},{value:"Attribute Access",id:"attribute-access",children:[]},{value:"Exercises",id:"exercises",children:[{value:"Exercise 4.9: Better output for printing objects",id:"exercise-49-better-output-for-printing-objects",children:[]},{value:"Exercise 4.10: An example of using getattr()",id:"exercise-410-an-example-of-using-getattr",children:[]}]}],l={toc:i};function p(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,'Various parts of Python\'s behavior can be customized via special or so-called "magic" methods.\nThis section introduces that idea.  In addition dynamic attribute access and bound methods\nare discussed.'),Object(r.b)("h3",{id:"introduction"},"Introduction"),Object(r.b)("p",null,"Classes may define special methods. These have special meaning to the\nPython interpreter.  They are always preceded and followed by\n",Object(r.b)("inlineCode",{parentName:"p"},"__"),". For example ",Object(r.b)("inlineCode",{parentName:"p"},"__init__"),"."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"class Stock(object):\n    def __init__(self):\n        ...\n    def __repr__(self):\n        ...\n")),Object(r.b)("p",null,"There are dozens of special methods, but we will only look at a few specific examples."),Object(r.b)("h3",{id:"special-methods-for-string-conversions"},"Special methods for String Conversions"),Object(r.b)("p",null,"Objects have two string representations."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},">>> from datetime import date\n>>> d = date(2012, 12, 21)\n>>> print(d)\n2012-12-21\n>>> d\ndatetime.date(2012, 12, 21)\n>>>\n")),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"str()")," function is used to create a nice printable output:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},">>> str(d)\n'2012-12-21'\n>>>\n")),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"repr()")," function is used to create a more detailed representation\nfor programmers."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},">>> repr(d)\n'datetime.date(2012, 12, 21)'\n>>>\n")),Object(r.b)("p",null,"Those functions, ",Object(r.b)("inlineCode",{parentName:"p"},"str()")," and ",Object(r.b)("inlineCode",{parentName:"p"},"repr()"),", use a pair of special methods\nin the class to produce the string to be displayed."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"class Date(object):\n    def __init__(self, year, month, day):\n        self.year = year\n        self.month = month\n        self.day = day\n\n    # Used with `str()`\n    def __str__(self):\n        return f'{self.year}-{self.month}-{self.day}'\n\n    # Used with `repr()`\n    def __repr__(self):\n        return f'Date({self.year},{self.month},{self.day})'\n")),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"Note: The convention for ",Object(r.b)("inlineCode",{parentName:"em"},"__repr__()")," is to return a string that,\nwhen fed to ",Object(r.b)("inlineCode",{parentName:"em"},"eval()"),", will recreate the underlying object. If this\nis not possible, some kind of easily readable representation is used\ninstead.")),Object(r.b)("h3",{id:"special-methods-for-mathematics"},"Special Methods for Mathematics"),Object(r.b)("p",null,"Mathematical operators involve calls to the following methods."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"a + b       a.__add__(b)\na - b       a.__sub__(b)\na * b       a.__mul__(b)\na / b       a.__truediv__(b)\na // b      a.__floordiv__(b)\na % b       a.__mod__(b)\na << b      a.__lshift__(b)\na >> b      a.__rshift__(b)\na & b       a.__and__(b)\na | b       a.__or__(b)\na ^ b       a.__xor__(b)\na ** b      a.__pow__(b)\n-a          a.__neg__()\n~a          a.__invert__()\nabs(a)      a.__abs__()\n")),Object(r.b)("h3",{id:"special-methods-for-item-access"},"Special Methods for Item Access"),Object(r.b)("p",null,"These are the methods to implement containers."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"len(x)      x.__len__()\nx[a]        x.__getitem__(a)\nx[a] = v    x.__setitem__(a,v)\ndel x[a]    x.__delitem__(a)\n")),Object(r.b)("p",null,"You can use them in your classes."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"class Sequence:\n    def __len__(self):\n        ...\n    def __getitem__(self,a):\n        ...\n    def __setitem__(self,a,v):\n        ...\n    def __delitem__(self,a):\n        ...\n")),Object(r.b)("h3",{id:"method-invocation"},"Method Invocation"),Object(r.b)("p",null,"Invoking a method is a two-step process."),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"Lookup: The ",Object(r.b)("inlineCode",{parentName:"li"},".")," operator"),Object(r.b)("li",{parentName:"ol"},"Method call: The ",Object(r.b)("inlineCode",{parentName:"li"},"()")," operator")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},">>> s = Stock('GOOG',100,490.10)\n>>> c = s.cost  # Lookup\n>>> c\n<bound method Stock.cost of <Stock object at 0x590d0>>\n>>> c()         # Method call\n49010.0\n>>>\n")),Object(r.b)("h3",{id:"bound-methods"},"Bound Methods"),Object(r.b)("p",null,"A method that has not yet been invoked by the function call operator ",Object(r.b)("inlineCode",{parentName:"p"},"()")," is known as a ",Object(r.b)("em",{parentName:"p"},"bound method"),".\nIt operates on the instance where it originated."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},">>> s = Stock('GOOG', 100, 490.10)\n>>> s\n<Stock object at 0x590d0>\n>>> c = s.cost\n>>> c\n<bound method Stock.cost of <Stock object at 0x590d0>>\n>>> c()\n49010.0\n>>>\n")),Object(r.b)("p",null,"Bound methods are often a source of careless non-obvious errors. For example:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},">>> s = Stock('GOOG', 100, 490.10)\n>>> print('Cost : %0.2f' % s.cost)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: float argument required\n>>>\n")),Object(r.b)("p",null,"Or devious behavior that's hard to debug."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"f = open(filename, 'w')\n...\nf.close     # Oops, Didn't do anything at all. `f` still open.\n")),Object(r.b)("p",null,"In both of these cases, the error is cause by forgetting to include the\ntrailing parentheses.  For example, ",Object(r.b)("inlineCode",{parentName:"p"},"s.cost()")," or ",Object(r.b)("inlineCode",{parentName:"p"},"f.close()"),"."),Object(r.b)("h3",{id:"attribute-access"},"Attribute Access"),Object(r.b)("p",null,"There is an alternative way to access, manipulate and manage attributes."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"getattr(obj, 'name')          # Same as obj.name\nsetattr(obj, 'name', value)   # Same as obj.name = value\ndelattr(obj, 'name')          # Same as del obj.name\nhasattr(obj, 'name')          # Tests if attribute exists\n")),Object(r.b)("p",null,"Example:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"if hasattr(obj, 'x'):\n    x = getattr(obj, 'x'):\nelse:\n    x = None\n")),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"Note: ",Object(r.b)("inlineCode",{parentName:"em"},"getattr()")," also has a useful default value "),"arg*."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"x = getattr(obj, 'x', None)\n")),Object(r.b)("h2",{id:"exercises"},"Exercises"),Object(r.b)("h3",{id:"exercise-49-better-output-for-printing-objects"},"Exercise 4.9: Better output for printing objects"),Object(r.b)("p",null,"Modify the ",Object(r.b)("inlineCode",{parentName:"p"},"Stock")," object that you defined in ",Object(r.b)("inlineCode",{parentName:"p"},"stock.py"),"\nso that the ",Object(r.b)("inlineCode",{parentName:"p"},"__repr__()")," method produces more useful output.  For\nexample:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},">>> goog = Stock('GOOG', 100, 490.1)\n>>> goog\nStock('GOOG', 100, 490.1)\n>>>\n")),Object(r.b)("p",null,"See what happens when you read a portfolio of stocks and view the\nresulting list after you have made these changes.  For example:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},">>> import report\n>>> portfolio = report.read_portfolio('Data/portfolio.csv')\n>>> portfolio\n... see what the output is ...\n>>>\n")),Object(r.b)("h3",{id:"exercise-410-an-example-of-using-getattr"},"Exercise 4.10: An example of using getattr()"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"getattr()")," is an alternative mechanism for reading attributes.  It can be used to\nwrite extremely flexible code.  To begin, try this example:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},">>> import stock\n>>> s = stock.Stock('GOOG', 100, 490.1)\n>>> columns = ['name', 'shares']\n>>> for colname in columns:\n        print(colname, '=', getattr(s, colname))\n\nname = GOOG\nshares = 100\n>>>\n")),Object(r.b)("p",null,"Carefully observe that the output data is determined entirely by the attribute\nnames listed in the ",Object(r.b)("inlineCode",{parentName:"p"},"columns")," variable."),Object(r.b)("p",null,"In the file ",Object(r.b)("inlineCode",{parentName:"p"},"tableformat.py"),", take this idea and expand it into a generalized\nfunction ",Object(r.b)("inlineCode",{parentName:"p"},"print_table()")," that prints a table showing\nuser-specified attributes of a list of arbitrary objects.  As with the\nearlier ",Object(r.b)("inlineCode",{parentName:"p"},"print_report()")," function, ",Object(r.b)("inlineCode",{parentName:"p"},"print_table()")," should also accept\na ",Object(r.b)("inlineCode",{parentName:"p"},"TableFormatter")," instance to control the output format.  Here's how\nit should work:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},">>> import report\n>>> portfolio = report.read_portfolio('Data/portfolio.csv')\n>>> from tableformat import create_formatter, print_table\n>>> formatter = create_formatter('txt')\n>>> print_table(portfolio, ['name','shares'], formatter)\n      name     shares\n---------- ----------\n        AA        100\n       IBM         50\n       CAT        150\n      MSFT        200\n        GE         95\n      MSFT         50\n       IBM        100\n\n>>> print_table(portfolio, ['name','shares','price'], formatter)\n      name     shares      price\n---------- ---------- ----------\n        AA        100       32.2\n       IBM         50       91.1\n       CAT        150      83.44\n      MSFT        200      51.23\n        GE         95      40.37\n      MSFT         50       65.1\n       IBM        100      70.44\n>>>\n")))}p.isMDXComponent=!0}}]);