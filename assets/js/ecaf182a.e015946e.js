(window.webpackJsonp=window.webpackJsonp||[]).push([[196],{269:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return p})),n.d(t,"toc",(function(){return o})),n.d(t,"default",(function(){return s}));var r=n(3),a=n(8),c=(n(0),n(280)),l={id:"types_checking",title:"Types Checking",sidebar_label:"4.9 Types Checking",slug:"types_checking",custom_edit_url:null},p={unversionedId:"python/data_structures/types_checking",id:"python/data_structures/types_checking",isDocsHomePage:!1,title:"Types Checking",description:"This type of error can occur when converting data types:",source:"@site/docs/python/data_structures/9_types_checking.md",slug:"/python/data_structures/types_checking",permalink:"/docs/python/data_structures/types_checking",editUrl:null,version:"current",sidebar_label:"4.9 Types Checking",sidebar:"someSidebar",previous:{title:"Types Conversion",permalink:"/docs/python/data_structures/types_conversion"},next:{title:"Method Chaining",permalink:"/docs/python/data_structures/method_chaining"}},o=[{value:"<code>isdigit</code>",id:"isdigit",children:[]},{value:"<code>isalpha</code>",id:"isalpha",children:[]},{value:"<code>isalnum</code>",id:"isalnum",children:[]},{value:"<code>type</code>",id:"type",children:[]}],i={toc:o};function s(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(c.b)("wrapper",Object(r.a)({},i,n,{components:t,mdxType:"MDXLayout"}),Object(c.b)("p",null,"This type of error can occur when converting data types:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"print(int('a'))\n")),Object(c.b)("p",null,"Output"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},'Traceback (most recent call last):\n  File "C:/....py", line 1, in <module>\n    print(int("a"))\nValueError: invalid literal for int() with base 10: \'a\'\n')),Object(c.b)("p",null,"Error is perfectly logical. We\u2019re trying to convert string \u2018a\u2019 into decimal format. For example, this can be useful when you want to go through a list of strings and convert to a number the strings that contain numbers, you can get that error. To avoid error, it would be nice to be able to check what we\u2019re working with."),Object(c.b)("h2",{id:"isdigit"},Object(c.b)("inlineCode",{parentName:"h2"},"isdigit")),Object(c.b)("p",null,"Python has such methods. For example, ",Object(c.b)("inlineCode",{parentName:"p"},"isdigit")," method can be used to check whether a string consists only of digits:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},'print("a".isdigit())\n\nprint("a10".isdigit())\n\nprint("10".isdigit())\n\n')),Object(c.b)("p",null,"Output"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"False\n")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"False\n")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"True\n")),Object(c.b)("h2",{id:"isalpha"},Object(c.b)("inlineCode",{parentName:"h2"},"isalpha")),Object(c.b)("p",null,"Method ",Object(c.b)("inlineCode",{parentName:"p"},"isalpha")," makes it possible to check whether a string consists only of letters:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},'print("a".isalpha())\n\nprint("a100".isalpha())\n\nprint("a--  ".isalpha())\n\nprint( "a ".isalpha())\n')),Object(c.b)("p",null,"Output"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"True\n")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"False\n")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"False\n")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"False\n")),Object(c.b)("h2",{id:"isalnum"},Object(c.b)("inlineCode",{parentName:"h2"},"isalnum")),Object(c.b)("p",null,"Method ",Object(c.b)("inlineCode",{parentName:"p"},"isalnum")," makes it possible to check whether a string consists of letters or numbers:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},'print("a".isalnum())\n\nprint("a10".isalnum())\n')),Object(c.b)("p",null,"Output"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"True\n")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"True\n")),Object(c.b)("h2",{id:"type"},Object(c.b)("inlineCode",{parentName:"h2"},"type")),Object(c.b)("p",null,"Sometimes, depending on the result, a library or function can return different types of objects. For example, if there is one object, string is returned. If several, tuple is returned. We have to construct the program in different ways, depending on whether a string or a tuple has been returned."),Object(c.b)("p",null,"Method ",Object(c.b)("inlineCode",{parentName:"p"},"type")," function can help:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},'print(type("string"))\n\nprint(type("string") == str)\n\n')),Object(c.b)("p",null,"Output"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"<class 'str'>\n")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"True\n")),Object(c.b)("p",null,"Similar to tuple (and other data types):"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"print(type((1, 2, 3)))\n\nprint(type((1, 2, 3)) == tuple)\n\nprint(type((1, 2, 3)) == list)\n\n")),Object(c.b)("p",null,"Output"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"<class 'tuple'>\n")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"True\n")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"False\n")))}s.isMDXComponent=!0},280:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return h}));var r=n(0),a=n.n(r);function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},c=Object.keys(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=a.a.createContext({}),s=function(e){var t=a.a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},u=function(e){var t=s(e.components);return a.a.createElement(i.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,c=e.originalType,l=e.parentName,i=o(e,["components","mdxType","originalType","parentName"]),u=s(n),d=r,h=u["".concat(l,".").concat(d)]||u[d]||b[d]||c;return n?a.a.createElement(h,p(p({ref:t},i),{},{components:n})):a.a.createElement(h,p({ref:t},i))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var c=n.length,l=new Array(c);l[0]=d;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p.mdxType="string"==typeof e?e:r,l[1]=p;for(var i=2;i<c;i++)l[i]=n[i];return a.a.createElement.apply(null,l)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);