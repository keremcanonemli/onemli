(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{281:function(n,e,o){"use strict";o.d(e,"a",(function(){return m})),o.d(e,"b",(function(){return d}));var t=o(0),a=o.n(t);function l(n,e,o){return e in n?Object.defineProperty(n,e,{value:o,enumerable:!0,configurable:!0,writable:!0}):n[e]=o,n}function i(n,e){var o=Object.keys(n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(n);e&&(t=t.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),o.push.apply(o,t)}return o}function r(n){for(var e=1;e<arguments.length;e++){var o=null!=arguments[e]?arguments[e]:{};e%2?i(Object(o),!0).forEach((function(e){l(n,e,o[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(o)):i(Object(o)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(o,e))}))}return n}function s(n,e){if(null==n)return{};var o,t,a=function(n,e){if(null==n)return{};var o,t,a={},l=Object.keys(n);for(t=0;t<l.length;t++)o=l[t],e.indexOf(o)>=0||(a[o]=n[o]);return a}(n,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(n);for(t=0;t<l.length;t++)o=l[t],e.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(n,o)&&(a[o]=n[o])}return a}var c=a.a.createContext({}),p=function(n){var e=a.a.useContext(c),o=e;return n&&(o="function"==typeof n?n(e):r(r({},e),n)),o},m=function(n){var e=p(n.components);return a.a.createElement(c.Provider,{value:e},n.children)},b={inlineCode:"code",wrapper:function(n){var e=n.children;return a.a.createElement(a.a.Fragment,{},e)}},u=a.a.forwardRef((function(n,e){var o=n.components,t=n.mdxType,l=n.originalType,i=n.parentName,c=s(n,["components","mdxType","originalType","parentName"]),m=p(o),u=t,d=m["".concat(i,".").concat(u)]||m[u]||b[u]||l;return o?a.a.createElement(d,r(r({ref:e},c),{},{components:o})):a.a.createElement(d,r({ref:e},c))}));function d(n,e){var o=arguments,t=e&&e.mdxType;if("string"==typeof n||t){var l=o.length,i=new Array(l);i[0]=u;var r={};for(var s in e)hasOwnProperty.call(e,s)&&(r[s]=e[s]);r.originalType=n,r.mdxType="string"==typeof n?n:t,i[1]=r;for(var c=2;c<l;c++)i[c]=o[c];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,o)}u.displayName="MDXCreateElement"},93:function(n,e,o){"use strict";o.r(e),o.d(e,"frontMatter",(function(){return i})),o.d(e,"metadata",(function(){return r})),o.d(e,"toc",(function(){return s})),o.d(e,"default",(function(){return p}));var t=o(3),a=o(8),l=(o(0),o(281)),i={id:"list_dict_set_comprehensions",title:"List Dict Set Comprehensions",sidebar_label:"List Dict Set Comprehensions",slug:"list_dict_set_comprehensions",custom_edit_url:null},r={unversionedId:"python/python_basic_examples/list_dict_set_comprehensions",id:"python/python_basic_examples/list_dict_set_comprehensions",isDocsHomePage:!1,title:"List Dict Set Comprehensions",description:"Python supports special expressions that allow for compact creation of lists, dictionaries, and sets:",source:"@site/docs/python/python_basic_examples/3_List_dict_set_comprehensions.md",slug:"/python/python_basic_examples/list_dict_set_comprehensions",permalink:"/docs/python/python_basic_examples/list_dict_set_comprehensions",editUrl:null,version:"current",sidebar_label:"List Dict Set Comprehensions",sidebar:"someSidebar",previous:{title:"Variable Unpacking",permalink:"/docs/python/python_basic_examples/variable_unpacking"},next:{title:"Further Reading",permalink:"/docs/python/python_basic_examples/further_reading"}},s=[{value:"List comprehensions",id:"list-comprehensions",children:[]},{value:"Dict comprehensions",id:"dict-comprehensions",children:[]},{value:"Set comprehensions",id:"set-comprehensions",children:[]}],c={toc:s};function p(n){var e=n.components,o=Object(a.a)(n,["components"]);return Object(l.b)("wrapper",Object(t.a)({},c,o,{components:e,mdxType:"MDXLayout"}),Object(l.b)("p",null,"Python supports special expressions that allow for compact creation of lists, dictionaries, and sets:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"list comprehensions"),Object(l.b)("li",{parentName:"ul"},"dict comprehensions"),Object(l.b)("li",{parentName:"ul"},"set comprehensions")),Object(l.b)("p",null,"These expressions not only enable more compact objects to be created but also create them faster. Although they require a certain habit of use and understanding at first, they are very often used."),Object(l.b)("h2",{id:"list-comprehensions"},"List comprehensions"),Object(l.b)("p",null,"List comprehension is an expression like:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"In [1]: vlans = [f'vlan {num}' for num in range(10, 16)]\n\nIn [2]: print(vlans)\n['vlan 10', 'vlan 11', 'vlan 12', 'vlan 13', 'vlan 14', 'vlan 15']\n")),Object(l.b)("p",null,"In general, it is an expression that converts an iterable object into a list. That is, a sequence of elements is converted and added to a new list."),Object(l.b)("p",null,"Expression above is similar to this loop:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"In [3]: vlans = []\n\nIn [4]: for num in range(10, 16):\n   ...:     vlans.append(f'vlan {num}')\n   ...:\n\nIn [5]: print(vlans)\n['vlan 10', 'vlan 11', 'vlan 12', 'vlan 13', 'vlan 14', 'vlan 15']\n")),Object(l.b)("p",null,"In list comprehensions you can use ",Object(l.b)("strong",{parentName:"p"},"if"),". Thus, you can only add some objects to the list. For example, a loop selects only those elements that are digits, converts them and adds them to the resulting list only_digits:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"In [6]: items = ['10', '20', 'a', '30', 'b', '40']\n\nIn [7]: only_digits = []\n\nIn [8]: for item in items:\n   ...:     if item.isdigit():\n   ...:         only_digits.append(int(item))\n   ...:\n\nIn [9]: print(only_digits)\n[10, 20, 30, 40]\n")),Object(l.b)("p",null,"A similar version with list comprehensions:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"In [10]: items = ['10', '20', 'a', '30', 'b', '40']\n\nIn [11]: only_digits = [int(item) for item in items if item.isdigit()]\n\nIn [12]: print(only_digits)\n[10, 20, 30, 40]\n")),Object(l.b)("p",null,"Of course, not all loops can be rewritten as a list comprehension but when it is possible to do so without making the expression more complex, it is better to use list comprehension."),Object(l.b)("p",null,"Note"),Object(l.b)("p",null,"In Python, list comprehensions can also replace filter and map functions and are considered a clearer option."),Object(l.b)("p",null,"With list comprehension it is also convenient to get elements from nested dictionaries:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"In [13]: london_co = {\n    ...:     'r1' : {\n    ...:     'hostname': 'london_r1',\n    ...:     'location': '21 New Globe Walk',\n    ...:     'vendor': 'Cisco',\n    ...:     'model': '4451',\n    ...:     'IOS': '15.4',\n    ...:     'IP': '10.255.0.1'\n    ...:     },\n    ...:     'r2' : {\n    ...:     'hostname': 'london_r2',\n    ...:     'location': '21 New Globe Walk',\n    ...:     'vendor': 'Cisco',\n    ...:     'model': '4451',\n    ...:     'IOS': '15.4',\n    ...:     'IP': '10.255.0.2'\n    ...:     },\n    ...:     'sw1' : {\n    ...:     'hostname': 'london_sw1',\n    ...:     'location': '21 New Globe Walk',\n    ...:     'vendor': 'Cisco',\n    ...:     'model': '3850',\n    ...:     'IOS': '3.6.XE',\n    ...:     'IP': '10.255.0.101'\n    ...:     }\n    ...: }\n\nIn [14]: [london_co[device]['IOS'] for device in london_co]\nOut[14]: ['15.4', '15.4', '3.6.XE']\n\nIn [15]: [london_co[device]['IP'] for device in london_co]\nOut[15]: ['10.255.0.1', '10.255.0.2', '10.255.0.101']\n")),Object(l.b)("p",null,"In fact, syntax of list comprehension looks like:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"[expression for item1 in iterable1 if condition1\n            for item2 in iterable2 if condition2\n            ...\n            for itemN in iterableN if conditionN ]\n")),Object(l.b)("p",null,"This means you can use several ",Object(l.b)("strong",{parentName:"p"},"for")," in expression."),Object(l.b)("p",null,"For example, ",Object(l.b)("em",{parentName:"p"},"vlans")," list contains several nested lists with VLANs:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"In [16]: vlans = [[10,21,35], [101, 115, 150], [111, 40, 50]]\n")),Object(l.b)("p",null,"It\u2019s necessary to form only one list with VLAN numbers. The first option is to use ",Object(l.b)("strong",{parentName:"p"},"for")," loop:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"In [17]: result = []\n\nIn [18]: for vlan_list in vlans:\n    ...:     for vlan in vlan_list:\n    ...:         result.append(vlan)\n    ...:\n\nIn [19]: print(result)\n[10, 21, 35, 101, 115, 150, 111, 40, 50]\n")),Object(l.b)("p",null,"List comprehension:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"In [20]: vlans = [[10,21,35], [101, 115, 150], [111, 40, 50]]\n\nIn [21]: result = [vlan for vlan_list in vlans for vlan in vlan_list]\n\nIn [22]: print(result)\n[10, 21, 35, 101, 115, 150, 111, 40, 50]\n")),Object(l.b)("p",null,"Two sequences can be processed simultaneously using zip():"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"In [23]: vlans = [100, 110, 150, 200]\n\nIn [24]: names = ['mngmt', 'voice', 'video', 'dmz']\n\nIn [25]: result = [f'vlan {vl}\\n name {name}' for vl, name in zip(vlans, names)]\n\nIn [26]: print('\\n'.join(result))\nvlan 100\n name mngmt\nvlan 110\n name voice\nvlan 150\n name video\nvlan 200\n name dmz\n")),Object(l.b)("h2",{id:"dict-comprehensions"},"Dict comprehensions"),Object(l.b)("p",null,"Dict comprehensions are similar to list comprehensions but they are used to create dictionaries. For example, the expression:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"In [27]: d = {}\n\nIn [28]: for num in range(1, 11):\n    ...:     d[num] = num**2\n    ...:\n\nIn [29]: print(d)\n{1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81, 10: 100}\n")),Object(l.b)("p",null,"Can be replaced with a dict comprehension:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"In [30]: d = {num: num**2 for num in range(1, 11)}\n\nIn [31]: print(d)\n{1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81, 10: 100}\n")),Object(l.b)("p",null,"Another example in which you need to change an existing dictionary and convert all keys to lowercase. First, a solution without a dict comprehension:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"In [32]: r1 = {'IOS': '15.4',\n    ...:       'IP': '10.255.0.1',\n    ...:       'hostname': 'london_r1',\n    ...:       'location': '21 New Globe Walk',\n    ...:       'model': '4451',\n    ...:       'vendor': 'Cisco'}\n    ...:\n\nIn [33]: lower_r1 = {}\n\nIn [34]: for key, value in r1.items():\n    ...:     lower_r1[key.lower()] = value\n    ...:\n\nIn [35]: lower_r1\nOut[35]:\n{'hostname': 'london_r1',\n 'ios': '15.4',\n 'ip': '10.255.0.1',\n 'location': '21 New Globe Walk',\n 'model': '4451',\n 'vendor': 'Cisco'}\n")),Object(l.b)("p",null,"Dict comprehension version:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"In [36]: r1 = {'IOS': '15.4',\n    ...:   'IP': '10.255.0.1',\n    ...:   'hostname': 'london_r1',\n    ...:   'location': '21 New Globe Walk',\n    ...:   'model': '4451',\n    ...:   'vendor': 'Cisco'}\n    ...:\n\nIn [37]: lower_r1 = {key.lower(): value for key, value in r1.items()}\n\nIn [38]: lower_r1\nOut[38]:\n{'hostname': 'london_r1',\n 'ios': '15.4',\n 'ip': '10.255.0.1',\n 'location': '21 New Globe Walk',\n 'model': '4451',\n 'vendor': 'Cisco'}\n")),Object(l.b)("p",null,"Like list comprehensions, dict comprehensions can be nested. Try to convert keys in nested dictionaries in the same way:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"In [39]: london_co = {\n    ...:     'r1' : {\n    ...:     'hostname': 'london_r1',\n    ...:     'location': '21 New Globe Walk',\n    ...:     'vendor': 'Cisco',\n    ...:     'model': '4451',\n    ...:     'IOS': '15.4',\n    ...:     'IP': '10.255.0.1'\n    ...:     },\n    ...:     'r2' : {\n    ...:     'hostname': 'london_r2',\n    ...:     'location': '21 New Globe Walk',\n    ...:     'vendor': 'Cisco',\n    ...:     'model': '4451',\n    ...:     'IOS': '15.4',\n    ...:     'IP': '10.255.0.2'\n    ...:     },\n    ...:     'sw1' : {\n    ...:     'hostname': 'london_sw1',\n    ...:     'location': '21 New Globe Walk',\n    ...:     'vendor': 'Cisco',\n    ...:     'model': '3850',\n    ...:     'IOS': '3.6.XE',\n    ...:     'IP': '10.255.0.101'\n    ...:     }\n    ...: }\n\nIn [40]: lower_london_co = {}\n\nIn [41]: for device, params in london_co.items():\n    ...:     lower_london_co[device] = {}\n    ...:     for key, value in params.items():\n    ...:         lower_london_co[device][key.lower()] = value\n    ...:\n\nIn [42]: lower_london_co\nOut[42]:\n{'r1': {'hostname': 'london_r1',\n  'ios': '15.4',\n  'ip': '10.255.0.1',\n  'location': '21 New Globe Walk',\n  'model': '4451',\n  'vendor': 'Cisco'},\n 'r2': {'hostname': 'london_r2',\n  'ios': '15.4',\n  'ip': '10.255.0.2',\n  'location': '21 New Globe Walk',\n  'model': '4451',\n  'vendor': 'Cisco'},\n 'sw1': {'hostname': 'london_sw1',\n  'ios': '3.6.XE',\n  'ip': '10.255.0.101',\n  'location': '21 New Globe Walk',\n  'model': '3850',\n  'vendor': 'Cisco'}}\n")),Object(l.b)("p",null,"Similar conversion with dict comprehensions:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"In [43]: result = {device: {key.lower(): value for key, value in params.items()}\n         for device, params in london_co.items()}\n\nIn [44]: result\nOut[44]:\n{'r1': {'hostname': 'london_r1',\n  'ios': '15.4',\n  'ip': '10.255.0.1',\n  'location': '21 New Globe Walk',\n  'model': '4451',\n  'vendor': 'Cisco'},\n 'r2': {'hostname': 'london_r2',\n  'ios': '15.4',\n  'ip': '10.255.0.2',\n  'location': '21 New Globe Walk',\n  'model': '4451',\n  'vendor': 'Cisco'},\n 'sw1': {'hostname': 'london_sw1',\n  'ios': '3.6.XE',\n  'ip': '10.255.0.101',\n  'location': '21 New Globe Walk',\n  'model': '3850',\n  'vendor': 'Cisco'}}\n")),Object(l.b)("h2",{id:"set-comprehensions"},"Set comprehensions"),Object(l.b)("p",null,"Set comprehensions are generally similar to list comprehensions. For example, get a set with unique VLAN numbers:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"In [45]: vlans = [10, '30', 30, 10, '56']\n\nIn [46]: unique_vlans = {int(vlan) for vlan in vlans}\n\nIn [47]: unique_vlans\nOut[47]: {10, 30, 56}\n")),Object(l.b)("p",null,"Similar solution without using of set comprehensions:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"In [48]: vlans = [10, '30', 30, 10, '56']\n\nIn [49]: unique_vlans = set()\n\nIn [50]: for vlan in vlans:\n    ...:     unique_vlans.add(int(vlan))\n    ...:\n\nIn [51]: unique_vlans\nOut[51]: {10, 30, 56}\n")),Object(l.b)("p",null,Object(l.b)("a",{parentName:"p",href:"https://pyneng.readthedocs.io/en/latest/book/08_python_basic_examples/further_reading.html"},"Next "),Object(l.b)("a",{parentName:"p",href:"https://pyneng.readthedocs.io/en/latest/book/08_python_basic_examples/variable_unpacking.html"}," Previous")))}p.isMDXComponent=!0}}]);