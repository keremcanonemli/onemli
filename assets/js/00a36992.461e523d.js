(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{120:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return m}));var a=n(0),s=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=s.a.createContext({}),p=function(e){var t=s.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},b=function(e){var t=p(e.components);return s.a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return s.a.createElement(s.a.Fragment,{},t)}},u=s.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),b=p(n),u=a,m=b["".concat(c,".").concat(u)]||b[u]||d[u]||o;return n?s.a.createElement(m,r(r({ref:t},l),{},{components:n})):s.a.createElement(m,r({ref:t},l))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,c=new Array(o);c[0]=u;var r={};for(var i in t)hasOwnProperty.call(t,i)&&(r[i]=t[i]);r.originalType=e,r.mdxType="string"==typeof e?e:a,c[1]=r;for(var l=2;l<o;l++)c[l]=n[l];return s.a.createElement.apply(null,c)}return s.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},70:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return r})),n.d(t,"toc",(function(){return i})),n.d(t,"default",(function(){return p}));var a=n(3),s=n(8),o=(n(0),n(120)),c={id:"class",title:"Class",sidebar_label:"4.1 Class",slug:"class",custom_edit_url:null},r={unversionedId:"python/classes_objects/class",id:"python/classes_objects/class",isDocsHomePage:!1,title:"Class",description:"Overview",source:"@site/docs/python/classes_objects/01_Class.md",slug:"/python/classes_objects/class",permalink:"/docs/python/classes_objects/class",editUrl:null,version:"current",sidebar_label:"4.1 Class",sidebar:"someSidebar",previous:{title:"Design Discussion",permalink:"/docs/python/program_organization/design_discussion"},next:{title:"Inheritance",permalink:"/docs/python/classes_objects/inheritance"}},i=[{value:"Overview",id:"overview",children:[]},{value:"Object Oriented (OO) programming",id:"object-oriented-oo-programming",children:[]},{value:"The <code>class</code> statement",id:"the-class-statement",children:[]},{value:"Instances",id:"instances",children:[]},{value:"Instance Data",id:"instance-data",children:[]},{value:"Instance Methods",id:"instance-methods",children:[]},{value:"Class Scoping",id:"class-scoping",children:[]},{value:"Exercises",id:"exercises",children:[{value:"Exercise 4.1: Objects as Data Structures",id:"exercise-41-objects-as-data-structures",children:[]},{value:"Exercise 4.2: Adding some Methods",id:"exercise-42-adding-some-methods",children:[]},{value:"Exercise 4.3: Creating a list of instances",id:"exercise-43-creating-a-list-of-instances",children:[]},{value:"Exercise 4.4: Using your class",id:"exercise-44-using-your-class",children:[]}]}],l={toc:i};function p(e){var t=e.components,n=Object(s.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h3",{id:"overview"},"Overview"),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"So far, our programs have only used built-in Python datatypes.  In\nthis section, we introduce the concept of classes and objects.  You'll\nlearn about the ",Object(o.b)("inlineCode",{parentName:"p"},"class")," statement that allows you to make new objects.\nWe'll also introduce the concept of inheritance, a tool that is commonly\nuse to build extensible programs.  Finally, we'll look at a few other\nfeatures of classes including special methods, dynamic attribute lookup,\nand defining new exceptions.")),Object(o.b)("p",null,"This section introduces the class statement and the idea of creating new objects."),Object(o.b)("h3",{id:"object-oriented-oo-programming"},"Object Oriented (OO) programming"),Object(o.b)("p",null,"A Programming technique where code is organized as a collection of\n",Object(o.b)("em",{parentName:"p"},"objects"),"."),Object(o.b)("p",null,"An ",Object(o.b)("em",{parentName:"p"},"object")," consists of:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Data. Attributes"),Object(o.b)("li",{parentName:"ul"},"Behavior. Methods which are functions applied to the object.")),Object(o.b)("p",null,"You have already been using some OO during this course."),Object(o.b)("p",null,"For example, manipulating a list."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},">>> nums = [1, 2, 3]\n>>> nums.append(4)      # Method\n>>> nums.insert(1,10)   # Method\n>>> nums\n[1, 10, 2, 3, 4]        # Data\n>>>\n")),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"nums")," is an ",Object(o.b)("em",{parentName:"p"},"instance")," of a list."),Object(o.b)("p",null,"Methods (",Object(o.b)("inlineCode",{parentName:"p"},"append()")," and ",Object(o.b)("inlineCode",{parentName:"p"},"insert()"),") are attached to the instance (",Object(o.b)("inlineCode",{parentName:"p"},"nums"),")."),Object(o.b)("h3",{id:"the-class-statement"},"The ",Object(o.b)("inlineCode",{parentName:"h3"},"class")," statement"),Object(o.b)("p",null,"Use the ",Object(o.b)("inlineCode",{parentName:"p"},"class")," statement to define a new object."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"class Player:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n        self.health = 100\n\n    def move(self, dx, dy):\n        self.x += dx\n        self.y += dy\n\n    def damage(self, pts):\n        self.health -= pts\n")),Object(o.b)("p",null,"In a nutshell, a class is a set of functions that carry out various operations on so-called ",Object(o.b)("em",{parentName:"p"},"instances"),"."),Object(o.b)("h3",{id:"instances"},"Instances"),Object(o.b)("p",null,"Instances are the actual ",Object(o.b)("em",{parentName:"p"},"objects")," that you manipulate in your program."),Object(o.b)("p",null,"They are created by calling the class as a function."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},">>> a = Player(2, 3)\n>>> b = Player(10, 20)\n>>>\n")),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"a")," and ",Object(o.b)("inlineCode",{parentName:"p"},"b")," are instances of ",Object(o.b)("inlineCode",{parentName:"p"},"Player"),"."),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"Emphasize: The class statement is just the definition (it does\nnothing by itself). Similar to a function definition.")),Object(o.b)("h3",{id:"instance-data"},"Instance Data"),Object(o.b)("p",null,"Each instance has its own local data."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},">>> a.x\n2\n>>> b.x\n10\n")),Object(o.b)("p",null,"This data is initialized by the ",Object(o.b)("inlineCode",{parentName:"p"},"__init__()"),"."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"class Player:\n    def __init__(self, x, y):\n        # Any value stored on `self` is instance data\n        self.x = x\n        self.y = y\n        self.health = 100\n")),Object(o.b)("p",null,"There are no restrictions on the total number or type of attributes stored."),Object(o.b)("h3",{id:"instance-methods"},"Instance Methods"),Object(o.b)("p",null,"Instance methods are functions applied to instances of an object."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"class Player:\n    ...\n    # `move` is a method\n    def move(self, dx, dy):\n        self.x += dx\n        self.y += dy\n")),Object(o.b)("p",null,"The object itself is always passed as first argument."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},">>> a.move(1, 2)\n\n# matches `a` to `self`\n# matches `1` to `dx`\n# matches `2` to `dy`\ndef move(self, dx, dy):\n")),Object(o.b)("p",null,"By convention, the instance is called ",Object(o.b)("inlineCode",{parentName:"p"},"self"),". However, the actual name\nused is unimportant. The object is always passed as the first\nargument. It is merely Python programming style to call this argument\n",Object(o.b)("inlineCode",{parentName:"p"},"self"),"."),Object(o.b)("h3",{id:"class-scoping"},"Class Scoping"),Object(o.b)("p",null,"Classes do not define a scope of names."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"class Player:\n    ...\n    def move(self, dx, dy):\n        self.x += dx\n        self.y += dy\n\n    def left(self, amt):\n        move(-amt, 0)       # NO. Calls a global `move` function\n        self.move(-amt, 0)  # YES. Calls method `move` from above.\n")),Object(o.b)("p",null,"If you want to operate on an instance, you always refer to it explicitly (e.g., ",Object(o.b)("inlineCode",{parentName:"p"},"self"),")."),Object(o.b)("h2",{id:"exercises"},"Exercises"),Object(o.b)("p",null,"Starting with this set of exercises, we start to make a series of\nchanges to existing code from previous sections.  It is critical that\nyou have a working version of Exercise 3.18 to start.  If you don't\nhave that, please work from the solution code found in the\n",Object(o.b)("inlineCode",{parentName:"p"},"Solutions/3_18")," directory.  It's fine to copy it."),Object(o.b)("h3",{id:"exercise-41-objects-as-data-structures"},"Exercise 4.1: Objects as Data Structures"),Object(o.b)("p",null,"In section 2 and 3, we worked with data represented as tuples and\ndictionaries.  For example, a holding of stock could be represented as\na tuple like this:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"s = ('GOOG',100,490.10)\n")),Object(o.b)("p",null,"or as a dictionary like this:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"s = { 'name'   : 'GOOG',\n      'shares' : 100,\n      'price'  : 490.10\n}\n")),Object(o.b)("p",null,"You can even write functions for manipulating such data.  For example:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"def cost(s):\n    return s['shares'] * s['price']\n")),Object(o.b)("p",null,"However, as your program gets large, you might want to create a better\nsense of organization.  Thus, another approach for representing data\nwould be to define a class.  Create a file called ",Object(o.b)("inlineCode",{parentName:"p"},"stock.py")," and\ndefine a class ",Object(o.b)("inlineCode",{parentName:"p"},"Stock")," that represents a single holding of stock.\nHave the instances of ",Object(o.b)("inlineCode",{parentName:"p"},"Stock")," have ",Object(o.b)("inlineCode",{parentName:"p"},"name"),", ",Object(o.b)("inlineCode",{parentName:"p"},"shares"),", and ",Object(o.b)("inlineCode",{parentName:"p"},"price"),"\nattributes.  For example:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},">>> import stock\n>>> a = stock.Stock('GOOG',100,490.10)\n>>> a.name\n'GOOG'\n>>> a.shares\n100\n>>> a.price\n490.1\n>>>\n")),Object(o.b)("p",null,"Create a few more ",Object(o.b)("inlineCode",{parentName:"p"},"Stock")," objects and manipulate them.  For example:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},">>> b = stock.Stock('AAPL', 50, 122.34)\n>>> c = stock.Stock('IBM', 75, 91.75)\n>>> b.shares * b.price\n6117.0\n>>> c.shares * c.price\n6881.25\n>>> stocks = [a, b, c]\n>>> stocks\n[<stock.Stock object at 0x37d0b0>, <stock.Stock object at 0x37d110>, <stock.Stock object at 0x37d050>]\n>>> for s in stocks:\n     print(f'{s.name:>10s} {s.shares:>10d} {s.price:>10.2f}')\n\n... look at the output ...\n>>>\n")),Object(o.b)("p",null,"One thing to emphasize here is that the class ",Object(o.b)("inlineCode",{parentName:"p"},"Stock")," acts like a\nfactory for creating instances of objects.  Basically, you call\nit as a function and it creates a new object for you.  Also, it must\nbe emphasized that each object is distinct---they each have their\nown data that is separate from other objects that have been created."),Object(o.b)("p",null,"An object defined by a class is somewhat similar to a dictionary--just\nwith somewhat different syntax.  For example, instead of writing\n",Object(o.b)("inlineCode",{parentName:"p"},"s['name']")," or ",Object(o.b)("inlineCode",{parentName:"p"},"s['price']"),", you now write ",Object(o.b)("inlineCode",{parentName:"p"},"s.name")," and ",Object(o.b)("inlineCode",{parentName:"p"},"s.price"),"."),Object(o.b)("h3",{id:"exercise-42-adding-some-methods"},"Exercise 4.2: Adding some Methods"),Object(o.b)("p",null,"With classes, you can attach functions to your objects.  These are\nknown as methods and are functions that operate on the data\nstored inside an object.  Add a ",Object(o.b)("inlineCode",{parentName:"p"},"cost()")," and ",Object(o.b)("inlineCode",{parentName:"p"},"sell()")," method to your\n",Object(o.b)("inlineCode",{parentName:"p"},"Stock")," object.  They should work like this:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},">>> import stock\n>>> s = stock.Stock('GOOG', 100, 490.10)\n>>> s.cost()\n49010.0\n>>> s.shares\n100\n>>> s.sell(25)\n>>> s.shares\n75\n>>> s.cost()\n36757.5\n>>>\n")),Object(o.b)("h3",{id:"exercise-43-creating-a-list-of-instances"},"Exercise 4.3: Creating a list of instances"),Object(o.b)("p",null,"Try these steps to make a list of Stock instances from a list of\ndictionaries. Then compute the total cost:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},">>> import fileparse\n>>> with open('Data/portfolio.csv') as lines:\n...     portdicts = fileparse.parse_csv(lines, select=['name','shares','price'], types=[str,int,float])\n...\n>>> portfolio = [ stock.Stock(d['name'], d['shares'], d['price']) for d in portdicts]\n>>> portfolio\n[<stock.Stock object at 0x10c9e2128>, <stock.Stock object at 0x10c9e2048>, <stock.Stock object at 0x10c9e2080>,\n <stock.Stock object at 0x10c9e25f8>, <stock.Stock object at 0x10c9e2630>, <stock.Stock object at 0x10ca6f748>,\n <stock.Stock object at 0x10ca6f7b8>]\n>>> sum([s.cost() for s in portfolio])\n44671.15\n>>>\n")),Object(o.b)("h3",{id:"exercise-44-using-your-class"},"Exercise 4.4: Using your class"),Object(o.b)("p",null,"Modify the ",Object(o.b)("inlineCode",{parentName:"p"},"read_portfolio()")," function in the ",Object(o.b)("inlineCode",{parentName:"p"},"report.py")," program so\nthat it reads a portfolio into a list of ",Object(o.b)("inlineCode",{parentName:"p"},"Stock")," instances as just\nshown in Exercise 4.3.  Once you have done that, fix all of the code\nin ",Object(o.b)("inlineCode",{parentName:"p"},"report.py")," and ",Object(o.b)("inlineCode",{parentName:"p"},"pcost.py")," so that it works with ",Object(o.b)("inlineCode",{parentName:"p"},"Stock")," instances\ninstead of dictionaries."),Object(o.b)("p",null,"Hint: You should not have to make major changes to the code.  You will mainly\nbe changing dictionary access such as ",Object(o.b)("inlineCode",{parentName:"p"},"s['shares']")," into ",Object(o.b)("inlineCode",{parentName:"p"},"s.shares"),"."),Object(o.b)("p",null,"You should be able to run your functions the same as before:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},">>> import pcost\n>>> pcost.portfolio_cost('Data/portfolio.csv')\n44671.15\n>>> import report\n>>> report.portfolio_report('Data/portfolio.csv', 'Data/prices.csv')\n      Name     Shares      Price     Change\n---------- ---------- ---------- ----------\n        AA        100       9.22     -22.98\n       IBM         50     106.28      15.18\n       CAT        150      35.46     -47.98\n      MSFT        200      20.89     -30.34\n        GE         95      13.48     -26.89\n      MSFT         50      20.89     -44.21\n       IBM        100     106.28      35.84\n>>>\n")))}p.isMDXComponent=!0}}]);