(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{101:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return a})),t.d(n,"metadata",(function(){return r})),t.d(n,"toc",(function(){return l})),t.d(n,"default",(function(){return s}));var o=t(3),i=t(7),c=(t(0),t(110)),a={id:"netmiko1",title:"Introducing Network Automation with Netmiko",sidebar_label:"Introducing Netmiko",slug:"/introducing-netmiko"},r={unversionedId:"netmiko1",id:"netmiko1",isDocsHomePage:!1,title:"Introducing Network Automation with Netmiko",description:"What is Netmiko ?",source:"@site/docs/Introducing_Network_Automation_with_Netmiko.md",slug:"/introducing-netmiko",permalink:"/docs/introducing-netmiko",editUrl:"https://github.com/keremcanonemli/onemli/docs/Introducing_Network_Automation_with_Netmiko.md",version:"current",sidebar_label:"Introducing Netmiko",sidebar:"someSidebar",previous:{title:"This is Document Number 3",permalink:"/docs/doc3"},next:{title:"Configure the Devices with Netmiko",permalink:"/docs/configure-the-devices-with-netmiko"}},l=[{value:"What is Netmiko ?",id:"what-is-netmiko-",children:[]},{value:"Installation",id:"installation",children:[]},{value:"Verify (optional)",id:"verify-optional",children:[]},{value:"Importing",id:"importing",children:[{value:"Method 1",id:"method-1",children:[]},{value:"Method 2",id:"method-2",children:[]}]},{value:"Connection Informations",id:"connection-informations",children:[{value:"Connect with Arguments",id:"connect-with-arguments",children:[]},{value:"Connect with Dictionary",id:"connect-with-dictionary",children:[]}]},{value:"Establish the Connection",id:"establish-the-connection",children:[{value:"Close the Connection",id:"close-the-connection",children:[]},{value:"Automatic Disconnection",id:"automatic-disconnection",children:[]}]}],d={toc:l};function s(e){var n=e.components,t=Object(i.a)(e,["components"]);return Object(c.b)("wrapper",Object(o.a)({},d,t,{components:n,mdxType:"MDXLayout"}),Object(c.b)("h2",{id:"what-is-netmiko-"},"What is Netmiko ?"),Object(c.b)("p",null,Object(c.b)("a",{parentName:"p",href:"https://ktbyers.github.io/netmiko/docs/netmiko/index.html"},Object(c.b)("strong",{parentName:"a"},"Netmiko")," "),"is the simplest, multi-functional, open-source, and multi-vendor SSH Python library. Which makes connecting to network devices via SSH a breeze. If you\u2019ve never used it before, don\u2019t worry. All you need is a computer with Python installed and an IDE where you can develop your code."),Object(c.b)("h2",{id:"installation"},"Installation"),Object(c.b)("p",null,"The following commands allow installing the latest version of the ",Object(c.b)("inlineCode",{parentName:"p"},"netmiko")," library with ",Object(c.b)("inlineCode",{parentName:"p"},"pip"),". Netmiko needs more than one library to work properly and functionally. Some of these are ",Object(c.b)("inlineCode",{parentName:"p"},"pyserial"),", ",Object(c.b)("inlineCode",{parentName:"p"},"paramiko"),", ",Object(c.b)("inlineCode",{parentName:"p"},"scp"),", ",Object(c.b)("inlineCode",{parentName:"p"},"ntc-templates"),". But don\u2019t worry when you install the Netmiko others install automatically."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-bash"},"pip install netmiko\n")),Object(c.b)("h2",{id:"verify-optional"},"Verify (optional)"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-bash"},"pip freeze | findstr netmiko\n")),Object(c.b)("h2",{id:"importing"},"Importing"),Object(c.b)("p",null,"You can use any of the following import methods."),Object(c.b)("h3",{id:"method-1"},"Method 1"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"from netmiko import ConnectHandler\n")),Object(c.b)("h3",{id:"method-2"},"Method 2"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"import netmiko\n")),Object(c.b)("p",null,"If you use second method, when you need to call ",Object(c.b)("inlineCode",{parentName:"p"},"ConnectHandler")," method you must use syntax like this : ",Object(c.b)("inlineCode",{parentName:"p"},"netmiko.ConnectHandler()")," "),Object(c.b)("h2",{id:"connection-informations"},"Connection Informations"),Object(c.b)("p",null,"You can use many different variations to connect devices. These examples are the simplest variations."),Object(c.b)("h3",{id:"connect-with-arguments"},"Connect with Arguments"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"from netmiko import ConnectHandler\n\nconnection = ConnectHandler(device_type='cisco_ios', host='10.0.20.21', username='admin', password='C1SC0..')\n")),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"If you want to connect to a device other than ",Object(c.b)("inlineCode",{parentName:"p"},"cisco_ios"),", you need to change the value of ",Object(c.b)("inlineCode",{parentName:"p"},"device_type"),". The device_type values of the Vendor and its products are in /site-packages/netmiko/ssh_dispatcher.py file.")),Object(c.b)("h3",{id:"connect-with-dictionary"},"Connect with Dictionary"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"from netmiko import ConnectHandler\n\ndevice = { \n        'device_type': 'cisco_ios', \n        'host': '10.0.20.21', \n        'username': 'admin', \n        'password': 'C1SC0..', \n        } \n\nconnection = ConnectHandler(**device)\n")),Object(c.b)("h2",{id:"establish-the-connection"},"Establish the Connection"),Object(c.b)("p",null,"You passed the device information to ",Object(c.b)("inlineCode",{parentName:"p"},"ConnectHandler")," and now, you need to establish the connection .In this example i used ",Object(c.b)("inlineCode",{parentName:"p"},"send_command()")," method. This method allows you to send the command you specified to the device."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},'connection.send_command("show running-config")\n')),Object(c.b)("p",null,"If you want to show device\u2019s response you need to write in the print function or transfer the data to new defined variable."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},'print(connection.send_command("show running-config"))\n')),Object(c.b)("p",null,"or"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},'output = connection.send_command("show running-config")\nprint(output)\n')),Object(c.b)("h3",{id:"close-the-connection"},"Close the Connection"),Object(c.b)("p",null,"If you connect to the device with the above connection type, you must close the connection manually:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"connection.close()\n")),Object(c.b)("h3",{id:"automatic-disconnection"},"Automatic Disconnection"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},'with ConnectHandler(**device) as connection:\n    output=connection.send_command("show running-config")\n\n    print(output)\n')))}s.isMDXComponent=!0}}]);