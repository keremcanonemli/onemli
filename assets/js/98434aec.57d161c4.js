(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{105:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return l})),t.d(n,"metadata",(function(){return o})),t.d(n,"toc",(function(){return s})),t.d(n,"default",(function(){return p}));var a=t(3),r=t(8),i=(t(0),t(121)),l={id:"a_first_program",title:"A First Program",sidebar_label:"1.2 A First Program",slug:"a_first_program",custom_edit_url:null},o={unversionedId:"python/introduction/a_first_program",id:"python/introduction/a_first_program",isDocsHomePage:!1,title:"A First Program",description:"\u200b",source:"@site/docs/python/introduction/02_Hello_world.md",slug:"/python/introduction/a_first_program",permalink:"/docs/python/introduction/a_first_program",editUrl:null,version:"current",sidebar_label:"1.2 A First Program",sidebar:"someSidebar",previous:{title:"Python",permalink:"/docs/python/introduction/python"},next:{title:"Numbers",permalink:"/docs/python/introduction/numbers"}},s=[{value:"Running Python",id:"running-python",children:[]},{value:"Interactive Mode",id:"interactive-mode",children:[]},{value:"Creating programs",id:"creating-programs",children:[]},{value:"Running Programs",id:"running-programs",children:[]},{value:"A Sample Program",id:"a-sample-program",children:[]},{value:"Statements",id:"statements",children:[]},{value:"Comments",id:"comments",children:[]},{value:"Variables",id:"variables",children:[]},{value:"Types",id:"types",children:[]},{value:"Case Sensitivity",id:"case-sensitivity",children:[]},{value:"Looping",id:"looping",children:[]},{value:"Indentation",id:"indentation",children:[]},{value:"Indentation best practices",id:"indentation-best-practices",children:[]},{value:"Conditionals",id:"conditionals",children:[]},{value:"Printing",id:"printing",children:[]},{value:"User input",id:"user-input",children:[]},{value:"pass statement",id:"pass-statement",children:[]},{value:"Exercises",id:"exercises",children:[{value:"Exercise 1.5: The Bouncing Ball",id:"exercise-15-the-bouncing-ball",children:[]},{value:"Exercise 1.6: Debugging",id:"exercise-16-debugging",children:[]}]}],b={toc:s};function p(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},b,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("p",null,"\u200b    "),Object(i.b)("p",null,"This section discusses the creation of your first program, running the interpreter, and some basic debugging."),Object(i.b)("h3",{id:"running-python"},"Running Python"),Object(i.b)("p",null,"Python programs always run inside an interpreter."),Object(i.b)("p",null,'The interpreter is a "console-based" application that normally runs\nfrom a command shell.'),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},'C:\\Users\\ONEMLI>python\nPython 3.8.8 (tags/v3.8.8:024d805, Feb 19 2021, 13:18:16) [MSC v.1928 64 bit (AMD64)] on win32\nType "help", "copyright", "credits" or "license" for more information.\n>>>\n')),Object(i.b)("p",null,"Expert programmers usually have no problem using the interpreter in this way, but it's not so user-friendly for beginners.  You may be using\nan environment that provides a different interface to Python.  That's fine, but learning how to run Python terminal is still a useful skill to know."),Object(i.b)("h3",{id:"interactive-mode"},"Interactive Mode"),Object(i.b)("p",null,"When you start Python, you get an ",Object(i.b)("em",{parentName:"p"},"interactive")," mode where you can experiment."),Object(i.b)("p",null,"If you start typing statements, they will run immediately. There is no edit/compile/run/debug cycle."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},">>> print('hello world')\nhello world\n>>> 37*42\n1554\n>>> for i in range(5):\n...     print(i)\n...\n0\n1\n2\n3\n4\n>>>\n")),Object(i.b)("p",null,"This so-called ",Object(i.b)("em",{parentName:"p"},"read-eval-print-loop")," (or REPL) is very useful for debugging and exploration."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"STOP"),": If you can't figure out how to interact with Python, stop what you're doing\nand figure out how to do it.  If you're using an IDE, it might be hidden behind a\nmenu option or other window.  Many parts of this course assume that you can\ninteract with the interpreter."),Object(i.b)("p",null,"Let's take a closer look at the elements of the REPL:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},">>>")," is the interpreter prompt for starting a new statement."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"...")," is the interpreter prompt for continuing a statement. Enter a blank line to finish typing and run what you've entered.")),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"...")," prompt may or may not be shown depending on your environment. For this course,\nit is shown as blanks to make it easier to cut/paste code samples."),Object(i.b)("p",null,"The underscore ",Object(i.b)("inlineCode",{parentName:"p"},"_")," holds the last result."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},">>> 37 * 42\n1554\n>>> _ * 2\n3108\n>>> _ + 50\n3158\n>>>\n")),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"This is only true in the interactive mode.")," You never use ",Object(i.b)("inlineCode",{parentName:"p"},"_")," in a program."),Object(i.b)("h3",{id:"creating-programs"},"Creating programs"),Object(i.b)("p",null,"Programs are put in ",Object(i.b)("inlineCode",{parentName:"p"},".py")," files."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"# hello.py\nprint('hello world')\n")),Object(i.b)("p",null,"You can create these files with your favorite text editor."),Object(i.b)("h3",{id:"running-programs"},"Running Programs"),Object(i.b)("p",null,"To execute a program, run it in the terminal with the ",Object(i.b)("inlineCode",{parentName:"p"},"python")," command.\nFor example, in command-line Unix:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"bash % python hello.py\nhello world\nbash %\n")),Object(i.b)("p",null,"Or from the Windows shell:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"C:\\SomeFolder>hello.py\nhello world\n\nC:\\SomeFolder>c:\\python36\\python hello.py\nhello world\n")),Object(i.b)("p",null,"Note: On Windows, you may need to specify a full path to the Python interpreter such as ",Object(i.b)("inlineCode",{parentName:"p"},"c:\\python36\\python"),".\nHowever, if Python is installed in its usual way, you might be able to just type the name of the program\nsuch as ",Object(i.b)("inlineCode",{parentName:"p"},"hello.py"),"."),Object(i.b)("h3",{id:"a-sample-program"},"A Sample Program"),Object(i.b)("p",null,"Let's solve the following problem:"),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"One morning, you go out and place a dollar bill on the sidewalk by the Sears tower in Chicago.\nEach day thereafter, you go out double the number of bills.\nHow long does it take for the stack of bills to exceed the height of the tower?")),Object(i.b)("p",null,"Here's a solution:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"# sears.py\nbill_thickness = 0.11 * 0.001 # Meters (0.11 mm)\nsears_height = 442 # Height (meters)\nnum_bills = 1\nday = 1\n\nwhile num_bills * bill_thickness < sears_height:\n    print(day, num_bills, num_bills * bill_thickness)\n    day = day + 1\n    num_bills = num_bills * 2\n\nprint('Number of days', day)\nprint('Number of bills', num_bills)\nprint('Final height', num_bills * bill_thickness)\n")),Object(i.b)("p",null,"When you run it, you get the following output:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"bash % python3 sears.py\n1 1 0.00011\n2 2 0.00022\n3 4 0.00044\n4 8 0.00088\n5 16 0.00176\n6 32 0.00352\n...\n21 1048576 115.34336\n22 2097152 230.68672\nNumber of days 23 \nNumber of bills 4194304 \nFinal height 461.37344\n")),Object(i.b)("p",null,"Using this program as a guide, you can learn a number of important core concepts about Python."),Object(i.b)("h3",{id:"statements"},"Statements"),Object(i.b)("p",null,"A python program is a sequence of statements:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"a = 3 + 4\nb = a * 2\nprint(b)\n")),Object(i.b)("p",null,"Each statement is terminated by a newline. Statements are executed one after the other until control reaches the end of the file."),Object(i.b)("h3",{id:"comments"},"Comments"),Object(i.b)("p",null,"Comments are text that will not be executed."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"a = 3 + 4\n# This is a comment\nb = a * 2\nprint(b)\n")),Object(i.b)("p",null,"Comments are denoted by ",Object(i.b)("inlineCode",{parentName:"p"},"#")," and extend to the end of the line."),Object(i.b)("h3",{id:"variables"},"Variables"),Object(i.b)("p",null,"A variable is a name for a value. You can use letters (lower and\nupper-case) from a to z. As well as the character underscore ",Object(i.b)("inlineCode",{parentName:"p"},"_"),".\nNumbers can also be part of the name of a variable, except as the\nfirst character."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"height = 442 # valid\n_height = 442 # valid\nheight2 = 442 # valid\n2height = 442 # invalid\n")),Object(i.b)("h3",{id:"types"},"Types"),Object(i.b)("p",null,"Variables do not need to be declared with the type of the value.  The type\nis associated with the value on the right hand side, not name of the variable."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"height = 442           # An integer\nheight = 442.0         # Floating point\nheight = 'Really tall' # A string\n")),Object(i.b)("p",null,'Python is dynamically typed. The perceived "type" of a variable might change\nas a program executes depending on the current value assigned to it.'),Object(i.b)("h3",{id:"case-sensitivity"},"Case Sensitivity"),Object(i.b)("p",null,"Python is case sensitive. Upper and lower-case letters are considered different letters.\nThese are all different variables:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"name = 'Jake'\nName = 'Elwood'\nNAME = 'Guido'\n")),Object(i.b)("p",null,"Language statements are always lower-case."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"while x < 0:   # OK\nWHILE x < 0:   # ERROR\n")),Object(i.b)("h3",{id:"looping"},"Looping"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"while")," statement executes a loop."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"while num_bills * bill_thickness < sears_height:\n    print(day, num_bills, num_bills * bill_thickness)\n    day = day + 1\n    num_bills = num_bills * 2\n\nprint('Number of days', day)\n")),Object(i.b)("p",null,"The statements indented below the ",Object(i.b)("inlineCode",{parentName:"p"},"while")," will execute as long as the expression after the ",Object(i.b)("inlineCode",{parentName:"p"},"while")," is ",Object(i.b)("inlineCode",{parentName:"p"},"true"),"."),Object(i.b)("h3",{id:"indentation"},"Indentation"),Object(i.b)("p",null,"Indentation is used to denote groups of statements that go together.\nConsider the previous example:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"while num_bills * bill_thickness < sears_height:\n    print(day, num_bills, num_bills * bill_thickness)\n    day = day + 1\n    num_bills = num_bills * 2\n\nprint('Number of days', day)\n")),Object(i.b)("p",null,"Indentation groups the following statements together as the operations that repeat:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"    print(day, num_bills, num_bills * bill_thickness)\n    day = day + 1\n    num_bills = num_bills * 2\n")),Object(i.b)("p",null,"Because the ",Object(i.b)("inlineCode",{parentName:"p"},"print()")," statement at the end is not indented, it\ndoes not belong to the loop. The empty line is just for\nreadability. It does not affect the execution."),Object(i.b)("h3",{id:"indentation-best-practices"},"Indentation best practices"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Use spaces instead of tabs."),Object(i.b)("li",{parentName:"ul"},"Use 4 spaces per level."),Object(i.b)("li",{parentName:"ul"},"Use a Python-aware editor.")),Object(i.b)("p",null,"Python's only requirement is that indentation within the same block\nbe consistent.   For example, this is an error:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"while num_bills * bill_thickness < sears_height:\n    print(day, num_bills, num_bills * bill_thickness)\n        day = day + 1 # ERROR\n    num_bills = num_bills * 2\n")),Object(i.b)("h3",{id:"conditionals"},"Conditionals"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"if")," statement is used to execute a conditional:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"if a > b:\n    print('Computer says no')\nelse:\n    print('Computer says yes')\n")),Object(i.b)("p",null,"You can check for multiple conditions by adding extra checks using ",Object(i.b)("inlineCode",{parentName:"p"},"elif"),"."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"if a > b:\n    print('Computer says no')\nelif a == b:\n    print('Computer says yes')\nelse:\n    print('Computer says maybe')\n")),Object(i.b)("h3",{id:"printing"},"Printing"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"print")," function produces a single line of text with the values passed."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"print('Hello world!') # Prints the text 'Hello world!'\n")),Object(i.b)("p",null,"You can use variables. The text printed will be the value of the variable, not the name."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"x = 100\nprint(x) # Prints the text '100'\n")),Object(i.b)("p",null,"If you pass more than one value to ",Object(i.b)("inlineCode",{parentName:"p"},"print")," they are separated by spaces."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"name = 'Jake'\nprint('My name is', name) # Print the text 'My name is Jake'\n")),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"print()")," always puts a newline at the end."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"print('Hello')\nprint('My name is', 'Jake')\n")),Object(i.b)("p",null,"This prints:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-code"},"Hello\nMy name is Jake\n")),Object(i.b)("p",null,"The extra newline can be suppressed:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"print('Hello', end=' ')\nprint('My name is', 'Jake')\n")),Object(i.b)("p",null,"This code will now print:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-code"},"Hello My name is Jake\n")),Object(i.b)("h3",{id:"user-input"},"User input"),Object(i.b)("p",null,"To read a line of typed user input, use the ",Object(i.b)("inlineCode",{parentName:"p"},"input()")," function:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"name = input('Enter your name:')\nprint('Your name is', name)\n")),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"input")," prints a prompt to the user and returns their response.\nThis is useful for small programs, learning exercises or simple debugging.\nIt is not widely used for real programs."),Object(i.b)("h3",{id:"pass-statement"},"pass statement"),Object(i.b)("p",null,"Sometimes you need to specify an empty code block. The keyword ",Object(i.b)("inlineCode",{parentName:"p"},"pass")," is used for it."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"if a > b:\n    pass\nelse:\n    print('Computer says false')\n")),Object(i.b)("p",null,'This is also called a "no-op" statement. It does nothing. It serves as a placeholder for statements, possibly to be added later.'),Object(i.b)("h2",{id:"exercises"},"Exercises"),Object(i.b)("p",null,"This is the first set of exercises where you need to create Python\nfiles and run them.  From this point forward, it is assumed that you\nare editing files in the ",Object(i.b)("inlineCode",{parentName:"p"},"practical-python/Work/")," directory.  To help\nyou locate the proper place, a number of empty starter files have\nbeen created with the appropriate filenames.  Look for the file\n",Object(i.b)("inlineCode",{parentName:"p"},"Work/bounce.py")," that's used in the first exercise."),Object(i.b)("h3",{id:"exercise-15-the-bouncing-ball"},"Exercise 1.5: The Bouncing Ball"),Object(i.b)("p",null,"A rubber ball is dropped from a height of 100 meters and each time it\nhits the ground, it bounces back up to 3/5 the height it fell.  Write\na program ",Object(i.b)("inlineCode",{parentName:"p"},"bounce.py")," that prints a table showing the height of the\nfirst 10 bounces."),Object(i.b)("p",null,"Your program should make a table that looks something like this:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-code"},"1 60.0\n2 36.0\n3 21.599999999999998\n4 12.959999999999999\n5 7.775999999999999\n6 4.6655999999999995\n7 2.7993599999999996\n8 1.6796159999999998\n9 1.0077695999999998\n10 0.6046617599999998\n")),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"Note: You can clean up the output a bit if you use the round() function. Try using it to round the output to 4 digits.")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-code"},"1 60.0\n2 36.0\n3 21.6\n4 12.96\n5 7.776\n6 4.6656\n7 2.7994\n8 1.6796\n9 1.0078\n10 0.6047\n")),Object(i.b)("h3",{id:"exercise-16-debugging"},"Exercise 1.6: Debugging"),Object(i.b)("p",null,"The following code fragment contains code from the Sears tower problem.  It also has a bug in it."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"# sears.py\n\nbill_thickness = 0.11 * 0.001    # Meters (0.11 mm)\nsears_height   = 442             # Height (meters)\nnum_bills      = 1\nday            = 1\n\nwhile num_bills * bill_thickness < sears_height:\n    print(day, num_bills, num_bills * bill_thickness)\n    day = days + 1\n    num_bills = num_bills * 2\n\nprint('Number of days', day)\nprint('Number of bills', num_bills)\nprint('Final height', num_bills * bill_thickness)\n")),Object(i.b)("p",null,"Copy and paste the code that appears above in a new program called ",Object(i.b)("inlineCode",{parentName:"p"},"sears.py"),".\nWhen you run the code you will get an error message that causes the\nprogram to crash like this:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-code"},"Traceback (most recent call last):\n  File \"sears.py\", line 10, in <module>\n    day = days + 1\nNameError: name 'days' is not defined\n")),Object(i.b)("p",null,"Reading error messages is an important part of Python code. If your program\ncrashes, the very last line of the traceback message is the actual reason why the\nthe program crashed. Above that, you should see a fragment of source code and then\nan identifying filename and line number."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Which line is the error?"),Object(i.b)("li",{parentName:"ul"},"What is the error?"),Object(i.b)("li",{parentName:"ul"},"Fix the error"),Object(i.b)("li",{parentName:"ul"},"Run the program successfully")))}p.isMDXComponent=!0},121:function(e,n,t){"use strict";t.d(n,"a",(function(){return c})),t.d(n,"b",(function(){return m}));var a=t(0),r=t.n(a);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var b=r.a.createContext({}),p=function(e){var n=r.a.useContext(b),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=p(e.components);return r.a.createElement(b.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},h=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,b=s(e,["components","mdxType","originalType","parentName"]),c=p(t),h=a,m=c["".concat(l,".").concat(h)]||c[h]||u[h]||i;return t?r.a.createElement(m,o(o({ref:n},b),{},{components:t})):r.a.createElement(m,o({ref:n},b))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,l=new Array(i);l[0]=h;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var b=2;b<i;b++)l[b]=t[b];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,t)}h.displayName="MDXCreateElement"}}]);