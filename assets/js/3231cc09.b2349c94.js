(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{127:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return p})),n.d(t,"toc",(function(){return o})),n.d(t,"default",(function(){return b}));var a=n(3),r=n(8),l=(n(0),n(280)),c={id:"set",title:"Set",sidebar_label:"4.6 Set",slug:"set",custom_edit_url:null},p={unversionedId:"python/data_structures/set",id:"python/data_structures/set",isDocsHomePage:!1,title:"Set",description:"Set is a mutable unordered data type. Set always contains only unique elements. Set in Python is a sequence of elements that are separated by a comma and placed in curly braces.",source:"@site/docs/python/data_structures/6_set.md",slug:"/python/data_structures/set",permalink:"/docs/python/data_structures/set",editUrl:null,version:"current",sidebar_label:"4.6 Set",sidebar:"someSidebar",previous:{title:"Tuple",permalink:"/docs/python/data_structures/tuple"},next:{title:"Boolean Values",permalink:"/docs/python/data_structures/boolean_values"}},o=[{value:"<code>add</code>",id:"add",children:[]},{value:"<code>discard</code>",id:"discard",children:[]},{value:"<code>clear</code>",id:"clear",children:[]}],s={toc:o};function b(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(l.b)("wrapper",Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(l.b)("p",null,"Set is a mutable unordered data type. Set always contains only unique elements. Set in Python is a sequence of elements that are separated by a comma and placed in curly braces."),Object(l.b)("p",null,"Set can easily remove repetitive elements:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"vlans = [10, 20, 30, 40, 100, 10]\n\nprint(set(vlans))\n\nset1 = set(vlans)\n\nprint(set1)\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"{100, 40, 10, 20, 30}\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"{100, 40, 10, 20, 30}\n")),Object(l.b)("h1",{id:"set-methods"},"Set methods"),Object(l.b)("h2",{id:"add"},Object(l.b)("inlineCode",{parentName:"h2"},"add")),Object(l.b)("p",null,"Method ",Object(l.b)("inlineCode",{parentName:"p"},"add")," adds an item to set:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"set1 = {10,20,30,40}\n\nset1.add(50)\n\nprint(set1)\n\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"{40, 10, 50, 20, 30}\n")),Object(l.b)("h2",{id:"discard"},Object(l.b)("inlineCode",{parentName:"h2"},"discard")),Object(l.b)("p",null,"Method ",Object(l.b)("inlineCode",{parentName:"p"},"discard")," allows deleting elements without showing an error if there is no element in set:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"print(set1)\n\nset1.discard(55)\n\nprint(set1)\n\nset1.discard(50)\n\nprint(set1)\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"{40, 10, 50, 20, 30}\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"{40, 10, 50, 20, 30}\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"{40, 10, 20, 30}\n\n")),Object(l.b)("h2",{id:"clear"},Object(l.b)("inlineCode",{parentName:"h2"},"clear")),Object(l.b)("p",null,"Method ",Object(l.b)("inlineCode",{parentName:"p"},"clear")," empties set:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"set1 = {10,20,30,40}\n\nset1.clear()\n\nprint(set1)\n\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"set()\n")),Object(l.b)("h1",{id:"operations-with-sets"},"Operations with sets"),Object(l.b)("p",null,"Sets are useful in performing different operations such as finding union of sets, intersection and so on."),Object(l.b)("p",null,"Union of sets can be obtained by ",Object(l.b)("inlineCode",{parentName:"p"},"union")," or operator ",Object(l.b)("inlineCode",{parentName:"p"},"|"),":"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"vlans1 = {10,20,30,50,100}\nvlans2 = {100,101,102,102,200}\n\nprint(vlans1.union(vlans2))\n\nprint(vlans1 | vlans2)\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"{100, 101, 102, 200, 10, 50, 20, 30}\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"{100, 101, 102, 200, 10, 50, 20, 30}\n")),Object(l.b)("p",null,"Intersection of sets can be obtained by ",Object(l.b)("inlineCode",{parentName:"p"},"intersection")," or operator ",Object(l.b)("inlineCode",{parentName:"p"},"&"),":"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"In [5]: vlans1 = {10,20,30,50,100}\nIn [6]: vlans2 = {100,101,102,102,200}\n\nIn [7]: vlans1.intersection(vlans2)\nOut[7]: {100}\n\nIn [8]: vlans1 & vlans2\nOut[8]: {100}\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"{100}\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"{100}\n")),Object(l.b)("h1",{id:"options-for-set-creation"},"Options for set creation"),Object(l.b)("p",null,"You cannot create an empty set using a literal set (in this case it will not be a set but a dictionary):"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"set1 = {}\n\nprint(type(set1))\n\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"<class 'dict'>\n")),Object(l.b)("p",null,"But an empty set can be created in this way:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"set2 = set()\n\nprint(type(set2))\n\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"<class 'set'>\n")),Object(l.b)("p",null,"Set from string:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"print(set('long long long long string'))\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"{'o', 't', 'l', 's', ' ', 'n', 'r', 'g', 'i'}\n")),Object(l.b)("p",null,"Set from list:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"print(set([10, 20, 30, 10, 10, 30]))\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"{10, 20, 30}\n")))}b.isMDXComponent=!0},280:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return O}));var a=n(0),r=n.n(a);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=r.a.createContext({}),b=function(e){var t=r.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},u=function(e){var t=b(e.components);return r.a.createElement(s.Provider,{value:t},e.children)},i={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,c=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),u=b(n),d=a,O=u["".concat(c,".").concat(d)]||u[d]||i[d]||l;return n?r.a.createElement(O,p(p({ref:t},s),{},{components:n})):r.a.createElement(O,p({ref:t},s))}));function O(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,c=new Array(l);c[0]=d;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p.mdxType="string"==typeof e?e:a,c[1]=p;for(var s=2;s<l;s++)c[s]=n[s];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);