(window.webpackJsonp=window.webpackJsonp||[]).push([[142],{214:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return r})),t.d(n,"metadata",(function(){return c})),t.d(n,"toc",(function(){return i})),t.d(n,"default",(function(){return b}));var o=t(3),a=t(8),l=(t(0),t(280)),r={id:"dictionary",title:"Dictionary",sidebar_label:"4.4 Dictionary",slug:"dictionary",custom_edit_url:null},c={unversionedId:"python/data_structures/dictionary",id:"python/data_structures/dictionary",isDocsHomePage:!1,title:"Dictionary",description:"Dictionaries are mutable ordered data type:",source:"@site/docs/python/data_structures/4_dictionary.md",slug:"/python/data_structures/dictionary",permalink:"/docs/python/data_structures/dictionary",editUrl:null,version:"current",sidebar_label:"4.4 Dictionary",sidebar:"someSidebar",previous:{title:"Lists",permalink:"/docs/python/data_structures/lists"},next:{title:"Tuple",permalink:"/docs/python/data_structures/tuple"}},i=[{value:"<code>clear</code>",id:"clear",children:[]},{value:"<code>copy</code>",id:"copy",children:[]},{value:"<code>get</code>",id:"get",children:[]},{value:"<code>setdefault</code>",id:"setdefault",children:[]},{value:"<code>keys, values, items</code>",id:"keys-values-items",children:[]},{value:"<code>del</code>",id:"del",children:[]},{value:"<code>update</code>",id:"update",children:[]},{value:"Literal",id:"literal",children:[]},{value:"dict",id:"dict",children:[]},{value:"dict.fromkeys",id:"dictfromkeys",children:[]}],p={toc:i};function b(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(l.b)("wrapper",Object(o.a)({},p,t,{components:n,mdxType:"MDXLayout"}),Object(l.b)("p",null,"Dictionaries are mutable ordered data type:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"data in dictionary are pairs ",Object(l.b)("inlineCode",{parentName:"li"},"key: value")),Object(l.b)("li",{parentName:"ul"},"values are accessible by key, not by number as in lists"),Object(l.b)("li",{parentName:"ul"},"entries in dictionary stored in order they were added"),Object(l.b)("li",{parentName:"ul"},"since dictionaries are mutable, dictionary items can be changed, added, removed"),Object(l.b)("li",{parentName:"ul"},"key must be an immutable object: number, string, tuple"),Object(l.b)("li",{parentName:"ul"},"value can be data of any type")),Object(l.b)("p",null,"Note"),Object(l.b)("p",null,"In other programming languages a similar dictionary can be called an associative array, hash, or hash table."),Object(l.b)("p",null,"Example of dictionary:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"london = {'name': 'London1', 'location': 'London Str', 'vendor': 'Cisco'}\n")),Object(l.b)("p",null,"You can write it down like this:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"london = {\n    'id': 1,\n    'name': 'London',\n    'it_vlan': 320,\n    'user_vlan': 1010,\n    'mngmt_vlan': 99,\n    'to_name': None,\n    'to_id': None,\n    'port': 'G1/0/11'\n}\n")),Object(l.b)("p",null,"In order to get a value from dictionary you have to refer to key in the same way as in lists, only key will be used instead of number:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"In [1]: london = {'name': 'London1', 'location': 'London Str'}\n\nprint(london['name'])\n\nprint(london['location'])\n\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"London1\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"London Str\n")),Object(l.b)("p",null,"Similarly, a new key-value pair could be added:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"london['vendor'] = 'Cisco'\n\nprint(london)\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"{'name': 'London1', 'location': 'London Str', 'vendor': 'Cisco'}\n")),Object(l.b)("p",null,"Or rewritten:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"london['vendor'] = 'cisco_ios'\nprint(london)\n\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"{'name': 'London1', 'location': 'London Str', 'vendor': 'cisco_ios'}\n")),Object(l.b)("p",null,"In dictionary you can use a dictionary as a value:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"london_co = {\n    'r1': {\n        'hostname': 'london_r1',\n        'location': '21 New Globe Walk',\n        'vendor': 'Cisco',\n        'model': '4451',\n        'ios': '15.4',\n        'ip': '10.255.0.1'\n    },\n    'r2': {\n        'hostname': 'london_r2',\n        'location': '21 New Globe Walk',\n        'vendor': 'Cisco',\n        'model': '4451',\n        'ios': '15.4',\n        'ip': '10.255.0.2'\n    },\n    'sw1': {\n        'hostname': 'london_sw1',\n        'location': '21 New Globe Walk',\n        'vendor': 'Cisco',\n        'model': '3850',\n        'ios': '3.6.XE',\n        'ip': '10.255.0.101'\n    }\n}\n")),Object(l.b)("p",null,"You can get values from nested dictionary by:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"print(london_co['r1']['ios'])\n\nprint(london_co['r1']['model'])\n\nprint(london_co['sw1']['ip'])\n\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"15.4\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"4451\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"10.255.0.101\n")),Object(l.b)("p",null,"Function ",Object(l.b)("inlineCode",{parentName:"p"},"sorted")," sorts dictionary keys in ascending order and returns a new list with sorted keys:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"london = {'name': 'London1', 'location': 'London Str', 'vendor': 'Cisco'}\n\nprint(sorted(london))\n['location', 'name', 'vendor']\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"['location', 'name', 'vendor']\n")),Object(l.b)("h1",{id:"dictionary-methods"},"Dictionary methods"),Object(l.b)("h2",{id:"clear"},Object(l.b)("inlineCode",{parentName:"h2"},"clear")),Object(l.b)("p",null,"Method ",Object(l.b)("inlineCode",{parentName:"p"},"clear")," allows to clear dictionary:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"london = {'name': 'London1', 'location': 'London Str'}\n\nlondon.clear()\n\nprint(london)\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"{}\n")),Object(l.b)("h2",{id:"copy"},Object(l.b)("inlineCode",{parentName:"h2"},"copy")),Object(l.b)("p",null,"Method ",Object(l.b)("inlineCode",{parentName:"p"},"copy")," allows to create a full copy of dictionary."),Object(l.b)("p",null,"If one dictionary is equal to other:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"london = {'name': 'London1', 'location': 'London Str', 'vendor': 'Cisco'}\n\nlondon2 = london\n\nprint(id(london))\n\nprint(id(london2))\n\nlondon['vendor'] = 'Juniper'\n\nprint(london2['vendor'])\n\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"2254297780416\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"2254297780416\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"Juniper\n")),Object(l.b)("p",null,"In this case ",Object(l.b)("inlineCode",{parentName:"p"},"london2")," is another name that refers to dictionary ",Object(l.b)("inlineCode",{parentName:"p"},"london"),". And when you change ",Object(l.b)("inlineCode",{parentName:"p"},"london")," dictionary, ",Object(l.b)("inlineCode",{parentName:"p"},"london2")," dictionary changes as well because it\u2019s a link to the same object."),Object(l.b)("p",null,"Therefore, if you want to make a copy of dictionary, use ",Object(l.b)("inlineCode",{parentName:"p"},"copy")," method:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"london = {'name': 'London1', 'location': 'London Str', 'vendor': 'Cisco'}\n\nlondon2 = london.copy()\n\nprint(id(london))\n\n\nprint(id(london2))\n\n\nlondon['vendor'] = 'Juniper'\n\nprint(london2['vendor'])\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"2521389945024\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"2521389945088\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"Cisco\n")),Object(l.b)("h2",{id:"get"},Object(l.b)("inlineCode",{parentName:"h2"},"get")),Object(l.b)("p",null,"If you query a key that is not present in dictionary, an error occurs:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"london = {'name': 'London1', 'location': 'London Str', 'vendor': 'Cisco'}\n\nprint(london['ios'])\n---------------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"C:\\....py\", line 14, in <module>\n    print(london[\"ios\"])\nKeyError: 'ios'\n")),Object(l.b)("p",null,"Method ",Object(l.b)("inlineCode",{parentName:"p"},"get")," queries for key and if there is no key, returns ",Object(l.b)("inlineCode",{parentName:"p"},"None")," instead."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"london = {'name': 'London1', 'location': 'London Str', 'vendor': 'Cisco'}\n\nprint(london.get('ios'))\n\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"None\n")),Object(l.b)("p",null,"Method get() also allows you to specify another value instead of ",Object(l.b)("inlineCode",{parentName:"p"},"None"),":"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"print(london.get('ios', 'Ooops'))\n\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"Ooops\n")),Object(l.b)("h2",{id:"setdefault"},Object(l.b)("inlineCode",{parentName:"h2"},"setdefault")),Object(l.b)("p",null,"Method ",Object(l.b)("inlineCode",{parentName:"p"},"setdefault")," searches for key and if there is no key, instead of error it creates a key with ",Object(l.b)("inlineCode",{parentName:"p"},"None")," value."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"london = {'name': 'London1', 'location': 'London Str', 'vendor': 'Cisco'}\n\nios = london.setdefault('ios')\n\nprint(ios)\n\nprint(london)\n\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"None\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"{'name': 'London1', 'location': 'London Str', 'vendor': 'Cisco', 'ios': None}\n")),Object(l.b)("p",null,"If key is present, ",Object(l.b)("inlineCode",{parentName:"p"},"setdefault")," returns value that corresponds to it:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"print(london.setdefault('name'))\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"London1\n")),Object(l.b)("p",null,"The second argument allows to specify which value should correspond to key:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"model = london.setdefault('model', 'Cisco3580')\n\nprint(model)\n\nprint(london)\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"Cisco3580\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"{'name': 'London1',\n 'location': 'London Str',\n 'vendor': 'Cisco',\n 'ios': None,\n 'model': 'Cisco3580'}\n")),Object(l.b)("h2",{id:"keys-values-items"},Object(l.b)("inlineCode",{parentName:"h2"},"keys, values, items")),Object(l.b)("p",null,"Methods ",Object(l.b)("inlineCode",{parentName:"p"},"keys"),", ",Object(l.b)("inlineCode",{parentName:"p"},"values"),", ",Object(l.b)("inlineCode",{parentName:"p"},"items"),":"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"london = {'name': 'London1', 'location': 'London Str', 'vendor': 'Cisco'}\n\nprint(london.keys())\n\nprint(london.values())\n\nprint(london.items())\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"dict_keys(['name', 'location', 'vendor'])\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"dict_values(['London1', 'London Str', 'Cisco'])\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"dict_items([('name', 'London1'), ('location', 'London Str'), ('vendor', 'Cisco')])\n")),Object(l.b)("p",null,"All three methods return special view objects that contains keys, values, and key-value pairs of dictionary, respectively."),Object(l.b)("p",null,"A very important feature of view is that they change together with dictionary. And in fact, they just give you a way to look at objects, but they don\u2019t make a copy of them."),Object(l.b)("p",null,"Example of uning ",Object(l.b)("inlineCode",{parentName:"p"},"keys"),":"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"london = {'name': 'London1', 'location': 'London Str', 'vendor': 'Cisco'}\n\nkeys = london.keys()\n\nprint(keys)\n\nprint(type(keys))\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"dict_keys(['name', 'location', 'vendor'])\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"<class 'dict_keys'>\n")),Object(l.b)("p",null,"Now keys variable corresponds to view ",Object(l.b)("inlineCode",{parentName:"p"},"dict_keys"),", in which three keys: name, location and vendor."),Object(l.b)("p",null,"But if we add another key-value pair to dictionary, keys object will also change:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},'london["ip"]="10.0.10.10"\n\nprint(keys)\n')),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"dict_keys(['name', 'location', 'vendor', 'ip'])\n")),Object(l.b)("p",null,"If you want to get a simple list of keys that will not be changed with dictionary changes, it is enough to convert view to list:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"list_keys = list(london.keys())\n\nprint(type(list_keys))\n\nprint(list_keys)\n\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"<class 'list'>\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"['name', 'location', 'vendor', 'ip']\n")),Object(l.b)("h2",{id:"del"},Object(l.b)("inlineCode",{parentName:"h2"},"del")),Object(l.b)("p",null,"Remove key and value:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"london = {'name': 'London1', 'location': 'London Str', 'vendor': 'Cisco'}\n\ndel london['name']\n\nprint(london)\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"{'location': 'London Str', 'vendor': 'Cisco'}\n")),Object(l.b)("h2",{id:"update"},Object(l.b)("inlineCode",{parentName:"h2"},"update")),Object(l.b)("p",null,"Method ",Object(l.b)("inlineCode",{parentName:"p"},"update")," allows you to add contents of one dictionary to another dictionary:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"r1 = {'name': 'London1', 'location': 'London Str'}\n\nr1.update({'vendor': 'Cisco', 'ios':'15.2'})\n\nprint(r1)\n\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"{'name': 'London1', 'location': 'London Str', 'vendor': 'Cisco', 'ios': '15.2'}\n")),Object(l.b)("p",null,"Values can be updated in the same way:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"r1.update({'name': 'london-r1', 'ios':'15.4'})\n\nprint(r1)\n\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"{'name': 'london-r1', 'location': 'London Str', 'vendor': 'Cisco', 'ios': '15.4'}\n")),Object(l.b)("h1",{id:"dictionary-creation-options"},"Dictionary creation options"),Object(l.b)("h2",{id:"literal"},"Literal"),Object(l.b)("p",null,"A dictionary can be created with help of a literal:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"r1 = {'model': '4451', 'ios': '15.4'}\n")),Object(l.b)("h2",{id:"dict"},"dict"),Object(l.b)("p",null,"Construction ",Object(l.b)("inlineCode",{parentName:"p"},"dict")," allows you to create a dictionary in several ways."),Object(l.b)("p",null,"If you use strings as keys you can use this option to create a dictionary:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"r1 = dict(model='4451', ios='15.4')\n\nprint(r1)\n\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"{'model': '4451', 'ios': '15.4'}\n")),Object(l.b)("p",null,"The second option of creating a dictionary with dict():"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"r1 = dict([('model','4451'), ('ios','15.4')])\n\nprint(r1)\n\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"{'model': '4451', 'ios': '15.4'}\n")),Object(l.b)("h2",{id:"dictfromkeys"},"dict.fromkeys"),Object(l.b)("p",null,"In a situation where you need to create a dictionary with known keys but so far empty values (or identical values), ",Object(l.b)("inlineCode",{parentName:"p"},"fromkeys")," method is very convenient:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"d_keys = ['hostname', 'location', 'vendor', 'model', 'ios', 'ip']\n\nr1 = dict.fromkeys(d_keys)\n\nprint(r1)\n\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"{'hostname': None,\n 'location': None,\n 'vendor': None,\n 'model': None,\n 'ios': None,\n 'ip': None}\n")),Object(l.b)("p",null,"By default ",Object(l.b)("inlineCode",{parentName:"p"},"fromkeys")," sets ",Object(l.b)("inlineCode",{parentName:"p"},"None")," value. But you can also pass your own value:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"router_models = ['ISR2811', 'ISR2911', 'ISR2921', 'ASR9002']\n\nmodels_count = dict.fromkeys(router_models, 0)\n\nprint(models_count)\n\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"{'ISR2811': 0, 'ISR2911': 0, 'ISR2921': 0, 'ASR9002': 0}\n")),Object(l.b)("p",null,"This option of creating a dictionary is not suitable for all cases. For example, if you use a mutable data type in value, a reference to the same object will be created:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"router_models = ['ISR2811', 'ISR2911', 'ISR2921', 'ASR9002']\n\nrouters = dict.fromkeys(router_models, [])\n\nprint(routers)\n\nrouters['ASR9002'].append('london_r1')\n\nprint(routers)\n\n\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"{'ISR2811': [], 'ISR2911': [], 'ISR2921': [], 'ASR9002': []}\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"{'ISR2811': ['london_r1'],\n 'ISR2911': ['london_r1'],\n 'ISR2921': ['london_r1'],\n 'ASR9002': ['london_r1']}\n")),Object(l.b)("p",null,"In this case, each key refers to the same list. Therefore, when a value is added to one of lists, others are updated."),Object(l.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(l.b)("div",{parentName:"div",className:"admonition-heading"},Object(l.b)("h5",{parentName:"div"},Object(l.b)("span",{parentName:"h5",className:"admonition-icon"},Object(l.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(l.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"Note")),Object(l.b)("div",{parentName:"div",className:"admonition-content"},Object(l.b)("p",{parentName:"div"},"A dictionary comprehension is better for this task. See section ",Object(l.b)("a",{parentName:"p",href:"https://onem.li/docs/python/python_basic_examples/list_dict_set_comprehensions"},"List, dict, set comprehensions")))))}b.isMDXComponent=!0},280:function(e,n,t){"use strict";t.d(n,"a",(function(){return d})),t.d(n,"b",(function(){return m}));var o=t(0),a=t.n(o);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},l=Object.keys(e);for(o=0;o<l.length;o++)t=l[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)t=l[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=a.a.createContext({}),b=function(e){var n=a.a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},d=function(e){var n=b(e.components);return a.a.createElement(p.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},u=a.a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,l=e.originalType,r=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=b(t),u=o,m=d["".concat(r,".").concat(u)]||d[u]||s[u]||l;return t?a.a.createElement(m,c(c({ref:n},p),{},{components:t})):a.a.createElement(m,c({ref:n},p))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var l=t.length,r=new Array(l);r[0]=u;var c={};for(var i in n)hasOwnProperty.call(n,i)&&(c[i]=n[i]);c.originalType=e,c.mdxType="string"==typeof e?e:o,r[1]=c;for(var p=2;p<l;p++)r[p]=t[p];return a.a.createElement.apply(null,r)}return a.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"}}]);