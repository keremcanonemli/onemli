(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{78:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return p})),t.d(n,"toc",(function(){return u})),t.d(n,"default",(function(){return c}));var a=t(3),r=t(8),i=(t(0),t(96)),o={id:"netmiko_strip_command",title:"\u2699\ufe0f strip_command()",sidebar_label:"\u2699\ufe0f strip_command()",slug:"/netmiko_strip_command_method",custom_edit_url:null},p={unversionedId:"netmiko_strip_command",id:"netmiko_strip_command",isDocsHomePage:!1,title:"\u2699\ufe0f strip_command()",description:"`python",source:"@site/docs/10_netmiko_strip_command.md",slug:"/netmiko_strip_command_method",permalink:"/docs/netmiko_strip_command_method",editUrl:null,version:"current",sidebar_label:"\u2699\ufe0f strip_command()",sidebar:"someSidebar",previous:{title:"\u2699\ufe0f find_prompt()",permalink:"/docs/netmiko_find_prompt_method"},next:{title:"\u2699\ufe0f strip_prompt()",permalink:"/docs/netmiko_strip_prompt_method"}},u=[{value:"Example",id:"example",children:[]},{value:"Parameters",id:"parameters",children:[{value:"command_string",id:"command_string",children:[]},{value:"output",id:"output",children:[]}]}],s={toc:u};function c(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},'from netmiko import ConnectHandler\ndevice = {\n    "device_type":"cisco_ios",\n    "host":"192.168.10.12",\n    "username":"keremcan",\n    "password":"onemli",\n    "verbose":"True",\n    "secret":"onemli"}\n')),Object(i.b)("p",null,"\u200b    "),Object(i.b)("h2",{id:"example"},"Example"),Object(i.b)("p",null,"This method strips command_string from output string. In this example I will use the output from ",Object(i.b)("inlineCode",{parentName:"p"},"send_command"),". ",Object(i.b)("inlineCode",{parentName:"p"},"send_command")," method has the ",Object(i.b)("inlineCode",{parentName:"p"},"strip_command")," parameter and I need to change the default value of this parameter."),Object(i.b)("p",null,"Verify the ",Object(i.b)("inlineCode",{parentName:"p"},"command_string")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},'with ConnectHandler(**device) as connection:\n    data=connection.send_command("show ip interface brief",strip_command=False)\n    print(data) # Print with command string\n')),Object(i.b)("p",null,"Output"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"show ip int bri # this is the command_string\n\nInterface              IP-Address      OK? Method Status                Protocol\nGigabitEthernet0/0     unassigned      YES unset  up                    up      \nGigabitEthernet0/1     unassigned      YES unset  up                    up      \nGigabitEthernet0/2     unassigned      YES unset  up                    up      \nGigabitEthernet0/3     unassigned      YES unset  up                    up      \nGigabitEthernet1/0     unassigned      YES unset  down                  down    \nGigabitEthernet1/1     unassigned      YES unset  up                    up      \nGigabitEthernet1/2     unassigned      YES unset  up                    up      \nGigabitEthernet1/3     unassigned      YES unset  up                    up      \nLoopback99             9.9.9.9         YES manual up                    up      \nVlan1                  192.168.10.12   YES NVRAM  up                    up \n")),Object(i.b)("p",null,"Use the ",Object(i.b)("inlineCode",{parentName:"p"},"strip_command()")," method"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},'with ConnectHandler(**device) as connection:\n    data=connection.send_command("show ip interface brief",strip_command=False)\n    stripped=connection.strip_command("show ip interface brief",data)\n    print(stripped)\n')),Object(i.b)("p",null,"Output"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"Interface              IP-Address      OK? Method Status                Protocol\nGigabitEthernet0/0     unassigned      YES unset  up                    up      \nGigabitEthernet0/1     unassigned      YES unset  up                    up      \nGigabitEthernet0/2     unassigned      YES unset  up                    up      \nGigabitEthernet0/3     unassigned      YES unset  up                    up      \nGigabitEthernet1/0     unassigned      YES unset  down                  down    \nGigabitEthernet1/1     unassigned      YES unset  up                    up      \nGigabitEthernet1/2     unassigned      YES unset  up                    up      \nGigabitEthernet1/3     unassigned      YES unset  up                    up      \nLoopback99             9.9.9.9         YES manual up                    up      \nVlan1                  192.168.10.12   YES NVRAM  up                    up  \n")),Object(i.b)("p",null,"\u200b    "),Object(i.b)("h2",{id:"parameters"},"Parameters"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"def strip_command(self, command_string, output)\n")),Object(i.b)("p",null,"\u200b    "),Object(i.b)("p",null,"\u200b    "),Object(i.b)("h3",{id:"command_string"},"command_string"),Object(i.b)("p",null,"This parameter that does not contain a default value. So, when you enter the command to send the parameters, it is assigned to the ",Object(i.b)("inlineCode",{parentName:"p"},"command_string"),".The command you send is used when you don't want to see it on the output screen."),Object(i.b)("p",null,"\u200b    "),Object(i.b)("p",null,"\u200b    "),Object(i.b)("h3",{id:"output"},"output"),Object(i.b)("p",null,"This parameter that does not contain a default value. Parameter for which you specify the variable that contains the value of the ",Object(i.b)("inlineCode",{parentName:"p"},"command_string"),"."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},'with ConnectHandler(**device) as connection:\n    data=connection.send_command("show ip interface brief",strip_command=False)\n    stripped=connection.strip_command(command_string="show ip interface brief",output=data)\n    print(stripped)\n')),Object(i.b)("p",null,"or"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},'with ConnectHandler(**device) as connection:\n    data=connection.send_command("show ip interface brief",strip_command=False)\n    stripped=connection.strip_command("show ip interface brief",data)\n    print(stripped)\n')),Object(i.b)("p",null,"Output"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"Interface              IP-Address      OK? Method Status                Protocol\nGigabitEthernet0/0     unassigned      YES unset  up                    up      \nGigabitEthernet0/1     unassigned      YES unset  up                    up      \nGigabitEthernet0/2     unassigned      YES unset  up                    up      \nGigabitEthernet0/3     unassigned      YES unset  up                    up      \nGigabitEthernet1/0     unassigned      YES unset  down                  down    \nGigabitEthernet1/1     unassigned      YES unset  up                    up      \nGigabitEthernet1/2     unassigned      YES unset  up                    up      \nGigabitEthernet1/3     unassigned      YES unset  up                    up      \nLoopback99             9.9.9.9         YES manual up                    up      \nVlan1                  192.168.10.12   YES NVRAM  up                    up      \n")))}c.isMDXComponent=!0},96:function(e,n,t){"use strict";t.d(n,"a",(function(){return d})),t.d(n,"b",(function(){return b}));var a=t(0),r=t.n(a);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function p(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=r.a.createContext({}),c=function(e){var n=r.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):p(p({},n),e)),t},d=function(e){var n=c(e.components);return r.a.createElement(s.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},l=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,s=u(e,["components","mdxType","originalType","parentName"]),d=c(t),l=a,b=d["".concat(o,".").concat(l)]||d[l]||m[l]||i;return t?r.a.createElement(b,p(p({ref:n},s),{},{components:t})):r.a.createElement(b,p({ref:n},s))}));function b(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=l;var p={};for(var u in n)hasOwnProperty.call(n,u)&&(p[u]=n[u]);p.originalType=e,p.mdxType="string"==typeof e?e:a,o[1]=p;for(var s=2;s<i;s++)o[s]=t[s];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,t)}l.displayName="MDXCreateElement"}}]);