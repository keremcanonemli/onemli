(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{280:function(e,n,t){"use strict";t.d(n,"a",(function(){return b})),t.d(n,"b",(function(){return d}));var o=t(0),l=t.n(o);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,o,l=function(e,n){if(null==e)return{};var t,o,l={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var c=l.a.createContext({}),p=function(e){var n=l.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},b=function(e){var n=p(e.components);return l.a.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return l.a.createElement(l.a.Fragment,{},n)}},m=l.a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,r=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),b=p(t),m=o,d=b["".concat(r,".").concat(m)]||b[m]||u[m]||a;return t?l.a.createElement(d,s(s({ref:n},c),{},{components:t})):l.a.createElement(d,s({ref:n},c))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,r=new Array(a);r[0]=m;var s={};for(var i in n)hasOwnProperty.call(n,i)&&(s[i]=n[i]);s.originalType=e,s.mdxType="string"==typeof e?e:o,r[1]=s;for(var c=2;c<a;c++)r[c]=t[c];return l.a.createElement.apply(null,r)}return l.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},93:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return r})),t.d(n,"metadata",(function(){return s})),t.d(n,"toc",(function(){return i})),t.d(n,"default",(function(){return p}));var o=t(3),l=t(8),a=(t(0),t(280)),r={id:"list_dict_set_comprehensions",title:"List Dict Set Comprehensions",sidebar_label:"8.3 List Dict Set Comprehensions",slug:"list_dict_set_comprehensions",custom_edit_url:null},s={unversionedId:"python/python_basic_examples/list_dict_set_comprehensions",id:"python/python_basic_examples/list_dict_set_comprehensions",isDocsHomePage:!1,title:"List Dict Set Comprehensions",description:"Python supports special expressions that allow for compact creation of lists, dictionaries, and sets:",source:"@site/docs/python/python_basic_examples/3_List_dict_set_comprehensions.md",slug:"/python/python_basic_examples/list_dict_set_comprehensions",permalink:"/docs/python/python_basic_examples/list_dict_set_comprehensions",editUrl:null,version:"current",sidebar_label:"8.3 List Dict Set Comprehensions",sidebar:"someSidebar",previous:{title:"Variable Unpacking",permalink:"/docs/python/python_basic_examples/variable_unpacking"},next:{title:"Further Reading",permalink:"/docs/python/python_basic_examples/further_reading"}},i=[{value:"List comprehensions",id:"list-comprehensions",children:[]},{value:"Dict comprehensions",id:"dict-comprehensions",children:[]},{value:"Set comprehensions",id:"set-comprehensions",children:[]}],c={toc:i};function p(e){var n=e.components,t=Object(l.a)(e,["components"]);return Object(a.b)("wrapper",Object(o.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Python supports special expressions that allow for compact creation of lists, dictionaries, and sets:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"list comprehensions"),Object(a.b)("li",{parentName:"ul"},"dict comprehensions"),Object(a.b)("li",{parentName:"ul"},"set comprehensions")),Object(a.b)("p",null,"These expressions not only enable more compact objects to be created but also create them faster. Although they require a certain habit of use and understanding at first, they are very often used."),Object(a.b)("h2",{id:"list-comprehensions"},"List comprehensions"),Object(a.b)("p",null,"List comprehension is an expression like:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"vlans = [f'vlan {num}' for num in range(10, 16)]\n\nprint(vlans)\n\n")),Object(a.b)("p",null,"Output"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"['vlan 10', 'vlan 11', 'vlan 12', 'vlan 13', 'vlan 14', 'vlan 15']\n")),Object(a.b)("p",null,"In general, it is an expression that converts an iterable object into a list. That is, a sequence of elements is converted and added to a new list."),Object(a.b)("p",null,"Expression above is similar to this loop:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"vlans = []\n\nfor num in range(10, 16):\n    vlans.append(f'vlan {num}')\n\n\nprint(vlans)\n\n")),Object(a.b)("p",null,"Output"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"['vlan 10', 'vlan 11', 'vlan 12', 'vlan 13', 'vlan 14', 'vlan 15']\n\n")),Object(a.b)("p",null,"In list comprehensions you can use ",Object(a.b)("strong",{parentName:"p"},"if"),". Thus, you can only add some objects to the list. For example, a loop selects only those elements that are digits, converts them and adds them to the resulting list only_digits:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"items = ['10', '20', 'a', '30', 'b', '40']\n\nonly_digits = []\n\nfor item in items:\n    if item.isdigit():\n        only_digits.append(int(item))\n\n\nprint(only_digits)\n\n")),Object(a.b)("p",null,"Output"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"[10, 20, 30, 40]\n")),Object(a.b)("p",null,"A similar version with list comprehensions:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"items = ['10', '20', 'a', '30', 'b', '40']\n\nonly_digits = [int(item) for item in items if item.isdigit()]\n\nprint(only_digits)\n\n")),Object(a.b)("p",null,"Output"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"[10, 20, 30, 40]\n")),Object(a.b)("p",null,"Of course, not all loops can be rewritten as a list comprehension but when it is possible to do so without making the expression more complex, it is better to use list comprehension."),Object(a.b)("p",null,"Note"),Object(a.b)("p",null,"In Python, list comprehensions can also replace filter and map functions and are considered a clearer option."),Object(a.b)("p",null,"With list comprehension it is also convenient to get elements from nested dictionaries:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"london_co = {\n    'r1' : {\n    'hostname': 'london_r1',\n    'location': '21 New Globe Walk',\n    'vendor': 'Cisco',\n    'model': '4451',\n    'IOS': '15.4',\n    'IP': '10.255.0.1'\n    },\n    'r2' : {\n    'hostname': 'london_r2',\n    'location': '21 New Globe Walk',\n    'vendor': 'Cisco',\n    'model': '4451',\n    'IOS': '15.4',\n    'IP': '10.255.0.2'\n    },\n    'sw1' : {\n    'hostname': 'london_sw1',\n    'location': '21 New Globe Walk',\n    'vendor': 'Cisco',\n    'model': '3850',\n    'IOS': '3.6.XE',\n    'IP': '10.255.0.101'\n    }\n}\n\nprint([london_co[device]['IOS'] for device in london_co])\nprint([london_co[device]['IP'] for device in london_co])\n\n")),Object(a.b)("p",null,"Output"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"['15.4', '15.4', '3.6.XE']\n")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"['10.255.0.1', '10.255.0.2', '10.255.0.101']\n")),Object(a.b)("p",null,"In fact, syntax of list comprehension looks like:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"[expression for item1 in iterable1 if condition1\n            for item2 in iterable2 if condition2\n            ...\n            for itemN in iterableN if conditionN ]\n")),Object(a.b)("p",null,"This means you can use several ",Object(a.b)("strong",{parentName:"p"},"for")," in expression."),Object(a.b)("p",null,"For example, ",Object(a.b)("em",{parentName:"p"},"vlans")," list contains several nested lists with VLANs:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"vlans = [[10,21,35], [101, 115, 150], [111, 40, 50]]\n")),Object(a.b)("p",null,"It\u2019s necessary to form only one list with VLAN numbers. The first option is to use ",Object(a.b)("strong",{parentName:"p"},"for")," loop:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"vlans = [[10,21,35], [101, 115, 150], [111, 40, 50]]\nresult = []\n\nfor vlan_list in vlans:\n    for vlan in vlan_list:\n        result.append(vlan)\n\n\nprint(result)\n\n")),Object(a.b)("p",null,"Output"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"[10, 21, 35, 101, 115, 150, 111, 40, 50]\n")),Object(a.b)("p",null,"List comprehension:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"vlans = [[10,21,35], [101, 115, 150], [111, 40, 50]]\n\nresult = [vlan for vlan_list in vlans for vlan in vlan_list]\n\nprint(result)\n\n")),Object(a.b)("p",null,"Output"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"[10, 21, 35, 101, 115, 150, 111, 40, 50]\n")),Object(a.b)("p",null,"Two sequences can be processed simultaneously using zip():"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"vlans = [100, 110, 150, 200]\n\nnames = ['mngmt', 'voice', 'video', 'dmz']\n\nresult = [f'vlan {vl}\\n name {name}' for vl, name in zip(vlans, names)]\n\nprint('\\n'.join(result))\n\n")),Object(a.b)("p",null,"Output"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"vlan 100\n name mngmt\nvlan 110\n name voice\nvlan 150\n name video\nvlan 200\n name dmz\n")),Object(a.b)("h2",{id:"dict-comprehensions"},"Dict comprehensions"),Object(a.b)("p",null,"Dict comprehensions are similar to list comprehensions but they are used to create dictionaries. For example, the expression:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"d = {}\n\nfor num in range(1, 11):\n    d[num] = num**2\n\nprint(d)\n\n")),Object(a.b)("p",null,"Output"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"{1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81, 10: 100}\n")),Object(a.b)("p",null,"Can be replaced with a dict comprehension:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"d = {num: num**2 for num in range(1, 11)}\n\nprint(d)\n\n")),Object(a.b)("p",null,"Output"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"{1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81, 10: 100}\n")),Object(a.b)("p",null,"Another example in which you need to change an existing dictionary and convert all keys to lowercase. First, a solution without a dict comprehension:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"r1 = {'IOS': '15.4',\n      'IP': '10.255.0.1',\n      'hostname': 'london_r1',\n      'location': '21 New Globe Walk',\n      'model': '4451',\n      'vendor': 'Cisco'}\n\n\nlower_r1 = {}\n\nfor key, value in r1.items():\n    lower_r1[key.lower()] = value\n\n\nprint(lower_r1)\n")),Object(a.b)("p",null,"Output"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"{'ios': '15.4', 'ip': '10.255.0.1', 'hostname': 'london_r1', 'location': '21 New Globe Walk', 'model': '4451', 'vendor': 'Cisco'}\n")),Object(a.b)("p",null,"Dict comprehension version:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"r1 = {'IOS': '15.4',\n  'IP': '10.255.0.1',\n  'hostname': 'london_r1',\n  'location': '21 New Globe Walk',\n  'model': '4451',\n  'vendor': 'Cisco'}\n\n\nlower_r1 = {key.lower(): value for key, value in r1.items()}\n\nprint(lower_r1)\n\n")),Object(a.b)("p",null,"Output"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"{'ios': '15.4', 'ip': '10.255.0.1', 'hostname': 'london_r1', 'location': '21 New Globe Walk', 'model': '4451', 'vendor': 'Cisco'}\n")),Object(a.b)("p",null,"Like list comprehensions, dict comprehensions can be nested. Try to convert keys in nested dictionaries in the same way:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"london_co = {\n    'r1' : {\n    'hostname': 'london_r1',\n    'location': '21 New Globe Walk',\n    'vendor': 'Cisco',\n    'model': '4451',\n    'IOS': '15.4',\n    'IP': '10.255.0.1'\n    },\n    'r2' : {\n    'hostname': 'london_r2',\n    'location': '21 New Globe Walk',\n    'vendor': 'Cisco',\n    'model': '4451',\n    'IOS': '15.4',\n    'IP': '10.255.0.2'\n    },\n    'sw1' : {\n    'hostname': 'london_sw1',\n    'location': '21 New Globe Walk',\n    'vendor': 'Cisco',\n    'model': '3850',\n    'IOS': '3.6.XE',\n    'IP': '10.255.0.101'\n    }\n}\n\nlower_london_co = {}\n\nfor device, params in london_co.items():\n    lower_london_co[device] = {}\n    for key, value in params.items():\n        lower_london_co[device][key.lower()] = value\n\n\nprint(lower_london_co)\n\n")),Object(a.b)("p",null,"Output"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"{'r1': {'hostname': 'london_r1', 'location': '21 New Globe Walk', 'vendor': 'Cisco', 'model': '4451', 'ios': '15.4', 'ip': '10.255.0.1'}, 'r2': {'hostname': 'london_r2', 'location': '21 New Globe Walk', 'vendor': 'Cisco', 'model': '4451', 'ios': '15.4', 'ip': '10.255.0.2'}, 'sw1': {'hostname': 'london_sw1', 'location': '21 New Globe Walk', 'vendor': 'Cisco', 'model': '3850', 'ios': '3.6.XE', 'ip': '10.255.0.101'}}\n\n")),Object(a.b)("p",null,"Similar conversion with dict comprehensions:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"In [43]: result = {device: {key.lower(): value for key, value in params.items()}\n         for device, params in london_co.items()}\n\nIn [44]: result\nOut[44]:\n{'r1': {'hostname': 'london_r1',\n  'ios': '15.4',\n  'ip': '10.255.0.1',\n  'location': '21 New Globe Walk',\n  'model': '4451',\n  'vendor': 'Cisco'},\n 'r2': {'hostname': 'london_r2',\n  'ios': '15.4',\n  'ip': '10.255.0.2',\n  'location': '21 New Globe Walk',\n  'model': '4451',\n  'vendor': 'Cisco'},\n 'sw1': {'hostname': 'london_sw1',\n  'ios': '3.6.XE',\n  'ip': '10.255.0.101',\n  'location': '21 New Globe Walk',\n  'model': '3850',\n  'vendor': 'Cisco'}}\n")),Object(a.b)("p",null,"Output"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"{'r1': {'hostname': 'london_r1', 'location': '21 New Globe Walk', 'vendor': 'Cisco', 'model': '4451', 'ios': '15.4', 'ip': '10.255.0.1'}, 'r2': {'hostname': 'london_r2', 'location': '21 New Globe Walk', 'vendor': 'Cisco', 'model': '4451', 'ios': '15.4', 'ip': '10.255.0.2'}, 'sw1': {'hostname': 'london_sw1', 'location': '21 New Globe Walk', 'vendor': 'Cisco', 'model': '3850', 'ios': '3.6.XE', 'ip': '10.255.0.101'}}\n\n")),Object(a.b)("h2",{id:"set-comprehensions"},"Set comprehensions"),Object(a.b)("p",null,"Set comprehensions are generally similar to list comprehensions. For example, get a set with unique VLAN numbers:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"vlans = [10, '30', 30, 10, '56']\n\nunique_vlans = {int(vlan) for vlan in vlans}\n\nprint(unique_vlans)\n\n")),Object(a.b)("p",null,"Output"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"{56, 10, 30}\n")),Object(a.b)("p",null,"Similar solution without using of set comprehensions:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"vlans = [10, '30', 30, 10, '56']\n\nunique_vlans = set()\n\nfor vlan in vlans:\n    unique_vlans.add(int(vlan))\n\n\nprint(unique_vlans)\n\n")),Object(a.b)("p",null,"Output"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"{56, 10, 30}\n")))}p.isMDXComponent=!0}}]);