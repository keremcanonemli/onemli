(window.webpackJsonp=window.webpackJsonp||[]).push([[195],{268:function(t,e,n){"use strict";n.r(e),n.d(e,"frontMatter",(function(){return o})),n.d(e,"metadata",(function(){return s})),n.d(e,"toc",(function(){return c})),n.d(e,"default",(function(){return l}));var i=n(3),a=n(8),r=(n(0),n(281)),o={id:"working_with_git",title:"Working With Git",sidebar_label:"Working With Git",slug:"working_with_git",custom_edit_url:null},s={unversionedId:"python/02_git_github/working_with_git",id:"python/02_git_github/working_with_git",isDocsHomePage:!1,title:"Working With Git",description:"There are a few basic commands you need to know to work with Git.",source:"@site/docs/python/02_git_github/3_working_with_git.md",slug:"/python/02_git_github/working_with_git",permalink:"/docs/python/02_git_github/working_with_git",editUrl:null,version:"current",sidebar_label:"Working With Git",sidebar:"someSidebar",previous:{title:"Displaying Repository Status In Invitation",permalink:"/docs/python/02_git_github/displaying_repository_status_in_invitation"},next:{title:"Additional Features",permalink:"/docs/python/02_git_github/additional_features"}},c=[{value:"git status",id:"git-status",children:[]},{value:"File .gitignore",id:"file-gitignore",children:[]},{value:"git add",id:"git-add",children:[]},{value:"git commit",id:"git-commit",children:[]}],g={toc:c};function l(t){var e=t.components,n=Object(a.a)(t,["components"]);return Object(r.b)("wrapper",Object(i.a)({},g,n,{components:e,mdxType:"MDXLayout"}),Object(r.b)("p",null,"There are a few basic commands you need to know to work with Git."),Object(r.b)("h2",{id:"git-status"},"git status"),Object(r.b)("p",null,"When working with Git it is important to understand current status of repository. For this purpose Git has a ",Object(r.b)("inlineCode",{parentName:"p"},"git status")," command"),Object(r.b)("p",null,Object(r.b)("img",{parentName:"p",src:"https://raw.githubusercontent.com/natenka/PyNEng/master/images/git/git_status_0.png",alt:"https://raw.githubusercontent.com/natenka/PyNEng/master/images/git/git_status_0.png"})),Object(r.b)("p",null,"Git reports that we are in master branch (this branch is auto-created and used by default) and that it has nothing to commit. Git also offers to create or copy files and then use ",Object(r.b)("inlineCode",{parentName:"p"},"git add")," command to start Git tracking them."),Object(r.b)("p",null,"Create README file and add \u201ctest\u201d line to it"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},'$ vi README\n$ echo "test" >> README\n')),Object(r.b)("p",null,"After that, invitation looks like this"),Object(r.b)("p",null,Object(r.b)("img",{parentName:"p",src:"https://raw.githubusercontent.com/natenka/PyNEng/master/images/git/bash_prompt.png",alt:"https://raw.githubusercontent.com/natenka/PyNEng/master/images/git/bash_prompt.png"})),Object(r.b)("p",null,"Invitation shows that there are two untracked files:"),Object(r.b)("p",null,Object(r.b)("img",{parentName:"p",src:"https://raw.githubusercontent.com/natenka/PyNEng/master/images/git/git_status_1.png",alt:"https://raw.githubusercontent.com/natenka/PyNEng/master/images/git/git_status_1.png"})),Object(r.b)("p",null,"Two files came out because I have undo-files configured for Vim. These are special files that allow you to undo changes not only in current file session but also in the previous sessions. Note that Git reports there are files that it does not track and tells you using which command you can start tracking."),Object(r.b)("h2",{id:"file-gitignore"},"File .gitignore"),Object(r.b)("p",null,"Undo-file .README.un~ is a special file that does not need to be added to repository. Git has option to specify which files or directories to ignore. To do this, you need to create appropriate templates in ",Object(r.b)("inlineCode",{parentName:"p"},".gitignore")," file in repository directory."),Object(r.b)("p",null,"To make Git ignore Vim undo-files you can add such a line to .gitignore file"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"*.un~\n")),Object(r.b)("p",null,"This means that Git must ignore all files that end with \u201c.un~\u201d."),Object(r.b)("p",null,"After that, git status shows"),Object(r.b)("p",null,Object(r.b)("img",{parentName:"p",src:"https://raw.githubusercontent.com/natenka/PyNEng/master/images/git/git_status_2.png",alt:"https://raw.githubusercontent.com/natenka/PyNEng/master/images/git/git_status_2.png"})),Object(r.b)("p",null,"Note that there is no .README.un~ file in the output. Once a file was added to repository .gitignore, files that are listed in it are being ignored."),Object(r.b)("h2",{id:"git-add"},"git add"),Object(r.b)("p",null,"Command ",Object(r.b)("inlineCode",{parentName:"p"},"git add")," is used to start Git tracking files."),Object(r.b)("p",null,"You can specify that you want to track a particular file"),Object(r.b)("p",null,Object(r.b)("img",{parentName:"p",src:"https://raw.githubusercontent.com/natenka/PyNEng/master/images/git/git_add_readme.png",alt:"https://raw.githubusercontent.com/natenka/PyNEng/master/images/git/git_add_readme.png"})),Object(r.b)("p",null,"Or all files"),Object(r.b)("p",null,Object(r.b)("img",{parentName:"p",src:"https://raw.githubusercontent.com/natenka/PyNEng/master/images/git/git_add_all.png",alt:"https://raw.githubusercontent.com/natenka/PyNEng/master/images/git/git_add_all.png"})),Object(r.b)("p",null,"Git status output"),Object(r.b)("p",null,Object(r.b)("img",{parentName:"p",src:"https://raw.githubusercontent.com/natenka/PyNEng/master/images/git/git_status_3.png",alt:"https://raw.githubusercontent.com/natenka/PyNEng/master/images/git/git_status_3.png"})),Object(r.b)("p",null,"Now files are in a section called \u201cChanges to be committed\u201d."),Object(r.b)("h2",{id:"git-commit"},"git commit"),Object(r.b)("p",null,"After all necessary files have been added in staging, you can commit changes. Staging is a collection of files that will be added to the next commit. Command ",Object(r.b)("inlineCode",{parentName:"p"},"git commit")," has only one mandatory parameter - flag \u201c-m\u201d. It allows you to specify a message for this commit."),Object(r.b)("p",null,Object(r.b)("img",{parentName:"p",src:"https://raw.githubusercontent.com/natenka/PyNEng/master/images/git/git_commit_1.png",alt:"https://raw.githubusercontent.com/natenka/PyNEng/master/images/git/git_commit_1.png"})),Object(r.b)("p",null,"After that, git status displays"),Object(r.b)("p",null,Object(r.b)("img",{parentName:"p",src:"https://raw.githubusercontent.com/natenka/PyNEng/master/images/git/git_status_4.png",alt:"https://raw.githubusercontent.com/natenka/PyNEng/master/images/git/git_status_4.png"})),Object(r.b)("p",null,"Phrase \u201cnothing to commit, working directory clean\u201d indicates that there are no changes to add to Git or to commit."))}l.isMDXComponent=!0},281:function(t,e,n){"use strict";n.d(e,"a",(function(){return u})),n.d(e,"b",(function(){return m}));var i=n(0),a=n.n(i);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,i)}return n}function s(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function c(t,e){if(null==t)return{};var n,i,a=function(t,e){if(null==t)return{};var n,i,a={},r=Object.keys(t);for(i=0;i<r.length;i++)n=r[i],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(i=0;i<r.length;i++)n=r[i],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var g=a.a.createContext({}),l=function(t){var e=a.a.useContext(g),n=e;return t&&(n="function"==typeof t?t(e):s(s({},e),t)),n},u=function(t){var e=l(t.components);return a.a.createElement(g.Provider,{value:e},t.children)},p={inlineCode:"code",wrapper:function(t){var e=t.children;return a.a.createElement(a.a.Fragment,{},e)}},b=a.a.forwardRef((function(t,e){var n=t.components,i=t.mdxType,r=t.originalType,o=t.parentName,g=c(t,["components","mdxType","originalType","parentName"]),u=l(n),b=i,m=u["".concat(o,".").concat(b)]||u[b]||p[b]||r;return n?a.a.createElement(m,s(s({ref:e},g),{},{components:n})):a.a.createElement(m,s({ref:e},g))}));function m(t,e){var n=arguments,i=e&&e.mdxType;if("string"==typeof t||i){var r=n.length,o=new Array(r);o[0]=b;var s={};for(var c in e)hasOwnProperty.call(e,c)&&(s[c]=e[c]);s.originalType=t,s.mdxType="string"==typeof t?t:i,o[1]=s;for(var g=2;g<r;g++)o[g]=n[g];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);