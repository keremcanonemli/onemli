(window.webpackJsonp=window.webpackJsonp||[]).push([[79],{151:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return u}));var a=n(3),r=n(8),o=(n(0),n(280)),i={id:"tasks",title:"Tasks",sidebar_label:"9.6 Tasks",slug:"tasks",custom_edit_url:null},s={unversionedId:"python/functions/tasks",id:"python/functions/tasks",isDocsHomePage:!1,title:"Tasks",description:"All tasks and additional files can be downloaded from repository.",source:"@site/i18n/tr/docusaurus-plugin-content-docs/current/python/functions/6_tasks.md",slug:"/python/functions/tasks",permalink:"/tr/docs/python/functions/tasks",editUrl:null,version:"current",sidebar_label:"9.6 Tasks",sidebar:"someSidebar",previous:{title:"Further Reading",permalink:"/tr/docs/python/functions/further_reading"},next:{title:"Print",permalink:"/tr/docs/python/useful_functions/print"}},c=[{value:"Task 9.1",id:"task-91",children:[]},{value:"Task 9.1a",id:"task-91a",children:[]},{value:"Task 9.2",id:"task-92",children:[]},{value:"Task 9.2a",id:"task-92a",children:[]},{value:"Task 9.3",id:"task-93",children:[]},{value:"Task 9.3a",id:"task-93a",children:[]},{value:"Task 9.4",id:"task-94",children:[]}],l={toc:c};function u(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"All tasks and additional files can be downloaded from ",Object(o.b)("a",{parentName:"p",href:"https://github.com/natenka/pyneng-examples-exercises-en/"},"repository"),"."),Object(o.b)("p",null,"Warning"),Object(o.b)("p",null,"Starting from section \u201c4. Data types in Python\u201d there are automated tests for testing tasks. They help to check whether everything matches the task, and also give feedback on what does not correspond to the task. As a rule, after the first period of adaptation to tests, it becomes easier to do tasks with tests. Testing is done using the pyneng utility. ",Object(o.b)("a",{parentName:"p",href:"https://pyneng.readthedocs.io/en/latest/book/additional_info/pyneng.html#additional-info-pyneng"},"Learn more about how to work with the pyneng utility"),"."),Object(o.b)("h2",{id:"task-91"},"Task 9.1"),Object(o.b)("p",null,"Create generate_access_config function that generates configuration for access ports."),Object(o.b)("p",null,"The function expects arguments:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"a dictionary with interface as a key and VLAN as a value (access_config or access_config_2 dict)"),Object(o.b)("li",{parentName:"ul"},"access ports configuration template as a list of commands (access_mode_template list)")),Object(o.b)("p",null,"The function should return a list of all ports in access mode with configuration based on the access_mode_template template."),Object(o.b)("p",null,"In this task, the beginning of the function is written and you just need to continue writing the function body itself."),Object(o.b)("p",null,"An example of a final list (each string is written on a new line for readability):"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'[\n"interface FastEthernet0/12",\n"switchport mode access",\n"switchport access vlan 10",\n"switchport nonegotiate",\n"spanning-tree portfast",\n"spanning-tree bpduguard enable",\n"interface FastEthernet0/17",\n"switchport mode access",\n"switchport access vlan 150",\n"switchport nonegotiate",\n"spanning-tree portfast",\n"spanning-tree bpduguard enable",\n...]\n')),Object(o.b)("p",null,"Check the operation of the function using the access_config dictionary and the list of commands access_mode_template. If the previous check was successful, check the function again using the dictionary access_config_2 and make sure that the final list contains the correct interface numbers and vlans."),Object(o.b)("p",null,"Restriction: All tasks must be done using the topics covered in this and previous chapters."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'access_mode_template = [\n    "switchport mode access",\n    "switchport access vlan",\n    "switchport nonegotiate",\n    "spanning-tree portfast",\n    "spanning-tree bpduguard enable",\n]\n\naccess_config = {"FastEthernet0/12": 10, "FastEthernet0/14": 11, "FastEthernet0/16": 17}\n\naccess_config_2 = {\n    "FastEthernet0/3": 100,\n    "FastEthernet0/7": 101,\n    "FastEthernet0/9": 107,\n}\n\n\ndef generate_access_config(intf_vlan_mapping, access_template):\n    """\n    intf_vlan_mapping is a dictionary with interface-VLAN mapping:\n         {\'FastEthernet0/12\': 10,\n          \'FastEthernet0/14\': 11,\n          \'FastEthernet0/16\': 17}\n    access_template - list of commands for the port in access mode\n\n    Returns a list of commands.\n    """\n')),Object(o.b)("h2",{id:"task-91a"},"Task 9.1a"),Object(o.b)("p",null,"Make a copy of the code from the task 9.1."),Object(o.b)("p",null,"Add this functionality: add an additional parameter that controls whether port-security configured"),Object(o.b)("blockquote",null,Object(o.b)("ul",{parentName:"blockquote"},Object(o.b)("li",{parentName:"ul"},"parameter name \u2018psecurity\u2019"),Object(o.b)("li",{parentName:"ul"},"default is None"),Object(o.b)("li",{parentName:"ul"},"to configure port-security, a list of commands must be passed as a value port-security (port_security_template list)"))),Object(o.b)("p",null,"The function should return a list of all ports in access mode with configuration based on the access_mode_template template and the port_security_template template, if passed. There should not be a new line character at the end of lines in the list."),Object(o.b)("p",null,"Check the operation of the function using the example of the access_config dictionary, with the generation of the configuration port-security and without."),Object(o.b)("p",null,"An example of a function call:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"print(generate_access_config(access_config, access_mode_template))\nprint(generate_access_config(access_config, access_mode_template, port_security_template))\n")),Object(o.b)("p",null,"Restriction: All tasks must be done using the topics covered in this and previous chapters."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'access_mode_template = [\n    "switchport mode access",\n    "switchport access vlan",\n    "switchport nonegotiate",\n    "spanning-tree portfast",\n    "spanning-tree bpduguard enable",\n]\n\nport_security_template = [\n    "switchport port-security maximum 2",\n    "switchport port-security violation restrict",\n    "switchport port-security"\n]\n\naccess_config = {"FastEthernet0/12": 10, "FastEthernet0/14": 11, "FastEthernet0/16": 17}\n')),Object(o.b)("h2",{id:"task-92"},"Task 9.2"),Object(o.b)("p",null,"Create generate_trunk_config function that generates configuration for access ports."),Object(o.b)("p",null,"The function expects arguments:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"intf_vlan_mapping: expects a dictionary with interface-VLAN mapping (trunk_config or trunk_config_2)"),Object(o.b)("li",{parentName:"ul"},"trunk_template: expects trunk port configuration template as command list (trunk_mode_template list)")),Object(o.b)("p",null,"The function should return a list of commands with configuration based on the specified ports and trunk_mode_template."),Object(o.b)("p",null,"Check the operation of the function using the example of the trunk_config dictionary and a list of commands trunk_mode_template. If the previous check was successful, check the function again on the trunk_config_2 dictionary and make sure that the final list contains the correct numbers interfaces and vlans."),Object(o.b)("p",null,"An example of a final list (each string is written on a new line for readability):"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'[\n"interface FastEthernet0/1",\n"switchport mode trunk",\n"switchport trunk native vlan 999",\n"switchport trunk allowed vlan 10,20,30",\n"interface FastEthernet0/2",\n"switchport mode trunk",\n"switchport trunk native vlan 999",\n"switchport trunk allowed vlan 11,30",\n...]\n')),Object(o.b)("p",null,"Restriction: All tasks must be done using the topics covered in this and previous chapters."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'trunk_mode_template = [\n    "switchport mode trunk",\n    "switchport trunk native vlan 999",\n    "switchport trunk allowed vlan",\n]\n\ntrunk_config = {\n    "FastEthernet0/1": [10, 20, 30],\n    "FastEthernet0/2": [11, 30],\n    "FastEthernet0/4": [17],\n}\n\ntrunk_config_2 = {\n    "FastEthernet0/11": [120, 131],\n    "FastEthernet0/15": [111, 130],\n    "FastEthernet0/14": [117],\n}\n')),Object(o.b)("h2",{id:"task-92a"},"Task 9.2a"),Object(o.b)("p",null,"Make a copy of the code from the task 9.2."),Object(o.b)("p",null,"Change the function so that it returns a dictionary instead of a list of commands: - keys: interface names, like \u2018FastEthernet0/1\u2019 - values: the list of commands that you need execute on this interface"),Object(o.b)("p",null,"Check the operation of the function using the example of the trunk_config dictionary and the trunk_mode_template template."),Object(o.b)("p",null,"An example of a final dict (each string is written on a new line for readability):"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'{\n    "FastEthernet0/1": [\n        "switchport mode trunk",\n        "switchport trunk native vlan 999",\n        "switchport trunk allowed vlan 10,20,30",\n    ],\n    "FastEthernet0/2": [\n        "switchport mode trunk",\n        "switchport trunk native vlan 999",\n        "switchport trunk allowed vlan 11,30",\n    ],\n    "FastEthernet0/4": [\n        "switchport mode trunk",\n        "switchport trunk native vlan 999",\n        "switchport trunk allowed vlan 17",\n    ],\n}\n')),Object(o.b)("p",null,"Restriction: All tasks must be done using the topics covered in this and previous chapters."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'trunk_mode_template = [\n    "switchport mode trunk", "switchport trunk native vlan 999",\n    "switchport trunk allowed vlan"\n]\n\ntrunk_config = {\n    "FastEthernet0/1": [10, 20, 30],\n    "FastEthernet0/2": [11, 30],\n    "FastEthernet0/4": [17]\n}\n')),Object(o.b)("h2",{id:"task-93"},"Task 9.3"),Object(o.b)("p",null,"Create a get_int_vlan_map function that handles the switch configuration file and returns a tuple of two dictionaries:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"A dictionary of ports in access mode, where the keys are port numbers, and the access VLAN values (numbers):")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'{"FastEthernet0/12": 10,\n "FastEthernet0/14": 11,\n "FastEthernet0/16": 17}\n')),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"A dictionary of ports in trunk mode, where the keys are port numbers, and the values are the list of allowed VLANs (list of numbers):")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'{"FastEthernet0/1": [10, 20],\n "FastEthernet0/2": [11, 30],\n "FastEthernet0/4": [17]}\n')),Object(o.b)("p",null,"The function must have one parameter, config_filename, which expects as an argument the name of the configuration file."),Object(o.b)("p",null,"Check the operation of the function using the config_sw1.txt file."),Object(o.b)("p",null,"Restriction: All tasks must be done using the topics covered in this and previous chapters."),Object(o.b)("h2",{id:"task-93a"},"Task 9.3a"),Object(o.b)("p",null,"Make a copy of the code from the task 9.3."),Object(o.b)("p",null,"Add this functionality: add support for configuration when the port is in VLAN 1 and the access port setting looks like this:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"interface FastEthernet0/20\n    switchport mode access\n    duplex auto\n")),Object(o.b)("p",null,"In this case, information should be added to the dictionary that the port in VLAN 1 Dictionary example:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{'FastEthernet0/12': 10,\n 'FastEthernet0/14': 11,\n 'FastEthernet0/20': 1 }\n")),Object(o.b)("p",null,"The function must have one parameter, config_filename, which expects as an argument the name of the configuration file."),Object(o.b)("p",null,"Check the operation of the function using the config_sw2.txt file."),Object(o.b)("p",null,"Restriction: All tasks must be done using the topics covered in this and previous chapters."),Object(o.b)("h2",{id:"task-94"},"Task 9.4"),Object(o.b)("p",null,"Create a convert_config_to_dict function that handles the switch configuration file and returns a dictionary:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"All top-level commands (global configuration mode) will be keys."),Object(o.b)("li",{parentName:"ul"},"If the top-level team has subcommands, they must be in the value from the corresponding key, in the form of a list (spaces at the beginning of the line must be removed)."),Object(o.b)("li",{parentName:"ul"},"If the top-level command has no subcommands, then the value will be an empty list")),Object(o.b)("p",null,"The function must have one parameter, config_filename, which expects as an argument the name of the configuration file."),Object(o.b)("p",null,"Check the operation of the function using the config_sw1.txt file."),Object(o.b)("p",null,"When processing the configuration file, you should ignore the lines that begin with \u2018!\u2019, as well as lines containing words from the ignore list."),Object(o.b)("p",null,"To check if a line should be ignored, use the ignore_command function."),Object(o.b)("p",null,"The part of the dictionary that the function should return (the full output can be seen in test_task_9_4.py test):"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'{\n    "version 15.0": [],\n    "service timestamps debug datetime msec": [],\n    "service timestamps log datetime msec": [],\n    "no service password-encryption": [],\n    "hostname sw1": [],\n    "interface FastEthernet0/0": [\n        "switchport mode access",\n        "switchport access vlan 10",\n    ],\n    "interface FastEthernet0/1": [\n        "switchport trunk encapsulation dot1q",\n        "switchport trunk allowed vlan 100,200",\n        "switchport mode trunk",\n    ],\n    "interface FastEthernet0/2": [\n        "switchport mode access",\n        "switchport access vlan 20",\n    ],\n}\n')),Object(o.b)("p",null,"Restriction: All tasks must be done using the topics covered in this and previous chapters."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'ignore = ["duplex", "alias", "Current configuration"]\n\n\ndef ignore_command(command, ignore):\n    """\n    The function checks if the command contains a word from the ignore list.\n\n    command is a string. Command to check\n    ignore is a list. Word list\n\n    Returns\n    * True if the command contains a word from the ignore list\n    * False - if not\n    """\n    ignore_status = False\n    for word in ignore:\n        if word in command:\n            ignore_status = True\n    return ignore_status\n')))}u.isMDXComponent=!0},280:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return b}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),u=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=u(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=u(n),d=a,b=p["".concat(i,".").concat(d)]||p[d]||h[d]||o;return n?r.a.createElement(b,s(s({ref:t},l),{},{components:n})):r.a.createElement(b,s({ref:t},l))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);