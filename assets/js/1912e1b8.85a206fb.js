(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{281:function(e,n,t){"use strict";t.d(n,"a",(function(){return u})),t.d(n,"b",(function(){return f}));var r=t(0),a=t.n(r);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=a.a.createContext({}),c=function(e){var n=a.a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=c(e.components);return a.a.createElement(p.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},m=a.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(t),m=r,f=u["".concat(l,".").concat(m)]||u[m]||b[m]||o;return t?a.a.createElement(f,s(s({ref:n},p),{},{components:t})):a.a.createElement(f,s({ref:n},p))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,l=new Array(o);l[0]=m;var s={};for(var i in n)hasOwnProperty.call(n,i)&&(s[i]=n[i]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var p=2;p<o;p++)l[p]=t[p];return a.a.createElement.apply(null,l)}return a.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},98:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return l})),t.d(n,"metadata",(function(){return s})),t.d(n,"toc",(function(){return i})),t.d(n,"default",(function(){return c}));var r=t(3),a=t(8),o=(t(0),t(281)),l={id:"map",title:"Map",sidebar_label:"Map",slug:"map",custom_edit_url:null},s={unversionedId:"python/useful_functions/map",id:"python/useful_functions/map",isDocsHomePage:!1,title:"Map",description:"Function map applies function to each element of sequence and returns iterator with result.",source:"@site/docs/python/useful_functions/9_map.md",slug:"/python/useful_functions/map",permalink:"/docs/python/useful_functions/map",editUrl:null,version:"current",sidebar_label:"Map",sidebar:"someSidebar",previous:{title:"Anonymous Function (Lambda Expression)",permalink:"/docs/python/useful_functions/anonymous_function_(lambda_expression)"},next:{title:"Filter",permalink:"/docs/python/useful_functions/filter"}},i=[{value:"List comprehension instead of map",id:"list-comprehension-instead-of-map",children:[]}],p={toc:i};function c(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},p,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Function ",Object(o.b)("inlineCode",{parentName:"p"},"map")," applies function to each element of sequence and returns iterator with result."),Object(o.b)("p",null,"For example, ",Object(o.b)("inlineCode",{parentName:"p"},"map")," can be used to perform element transformations. Convert all strings to uppercase:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"In [1]: list_of_words = ['one', 'two', 'list', '', 'dict']\n\nIn [2]: map(str.upper, list_of_words)\nOut[2]: <map at 0xb45eb7ec>\n\nIn [3]: list(map(str.upper, list_of_words))\nOut[3]: ['ONE', 'TWO', 'LIST', '', 'DICT']\n")),Object(o.b)("p",null,"Converting to numbers:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"In [3]: list_of_str = ['1', '2', '5', '10']\n\nIn [4]: list(map(int, list_of_str))\nOut[4]: [1, 2, 5, 10]\n")),Object(o.b)("p",null,"With ",Object(o.b)("inlineCode",{parentName:"p"},"map")," it is convenient to use lambda expressions:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"In [5]: vlans = [100, 110, 150, 200, 201, 202]\n\nIn [6]: list(map(lambda x: 'vlan {}'.format(x), vlans))\nOut[6]: ['vlan 100', 'vlan 110', 'vlan 150', 'vlan 200', 'vlan 201', 'vlan 202']\n")),Object(o.b)("p",null,"If ",Object(o.b)("inlineCode",{parentName:"p"},"map")," function expects two arguments, two lists are passed:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"In [7]: nums = [1, 2, 3, 4, 5]\n\nIn [8]: nums2 = [100, 200, 300, 400, 500]\n\nIn [9]: list(map(lambda x, y: x*y, nums, nums2))\nOut[9]: [100, 400, 900, 1600, 2500]\n")),Object(o.b)("h2",{id:"list-comprehension-instead-of-map"},"List comprehension instead of map"),Object(o.b)("p",null,"As a rule, you can use list comprehension instead of ",Object(o.b)("inlineCode",{parentName:"p"},"map"),". The list comprehension option is often clearer, and in some cases even faster."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("a",{parentName:"p",href:"https://stackoverflow.com/a/1247490"},"Alex Martelli response with comparison of map and list comprehension"))),Object(o.b)("p",null,"But ",Object(o.b)("inlineCode",{parentName:"p"},"map")," can be more effective when you have to generate a large number of elements because ",Object(o.b)("inlineCode",{parentName:"p"},"map")," is an iterator and list comprehension generates a list."),Object(o.b)("p",null,"Examples similar to those above in list comprehension version."),Object(o.b)("p",null,"Convert all strings to uppercase:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"In [48]: list_of_words = ['one', 'two', 'list', '', 'dict']\n\nIn [49]: [str.upper(word) for word in list_of_words]\nOut[49]: ['ONE', 'TWO', 'LIST', '', 'DICT']\n")),Object(o.b)("p",null,"Converting to numbers:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"In [50]: list_of_str = ['1', '2', '5', '10']\n\nIn [51]: [int(i) for i in list_of_str]\nOut[51]: [1, 2, 5, 10]\n")),Object(o.b)("p",null,"String formatting:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"In [52]:  vlans = [100, 110, 150, 200, 201, 202]\n\nIn [53]: ['vlan {}'.format(x) for x in vlans]\nOut[53]: ['vlan 100', 'vlan 110', 'vlan 150', 'vlan 200', 'vlan 201', 'vlan 202']\n")),Object(o.b)("p",null,"Use ",Object(o.b)("inlineCode",{parentName:"p"},"zip")," to get pairs of elements:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"In [54]: nums = [1, 2, 3, 4, 5]\n\nIn [55]: nums2 = [100, 200, 300, 400, 500]\n\nIn [56]: [x * y for x, y in zip(nums, nums2)]\nOut[56]: [100, 400, 900, 1600, 2500]\n")),Object(o.b)("p",null,Object(o.b)("a",{parentName:"p",href:"https://pyneng.readthedocs.io/en/latest/book/10_useful_functions/filter.html"},"Next "),Object(o.b)("a",{parentName:"p",href:"https://pyneng.readthedocs.io/en/latest/book/10_useful_functions/lambda.html"}," Previous")))}c.isMDXComponent=!0}}]);