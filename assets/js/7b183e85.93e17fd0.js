(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{100:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return r})),t.d(n,"metadata",(function(){return l})),t.d(n,"toc",(function(){return s})),t.d(n,"default",(function(){return p}));var a=t(3),i=t(8),o=(t(0),t(120)),r={id:"file_management",title:"File Management",sidebar_label:"1.6 File Management",slug:"file_management",custom_edit_url:null},l={unversionedId:"python/introduction/file_management",id:"python/introduction/file_management",isDocsHomePage:!1,title:"File Management",description:"\u200b",source:"@site/docs/python/introduction/06_Files.md",slug:"/python/introduction/file_management",permalink:"/docs/python/introduction/file_management",editUrl:null,version:"current",sidebar_label:"1.6 File Management",sidebar:"someSidebar",previous:{title:"Lists",permalink:"/docs/python/introduction/lists"},next:{title:"Functions",permalink:"/docs/python/introduction/functions"}},s=[{value:"File Input and Output",id:"file-input-and-output",children:[]},{value:"Common Idioms for Reading File Data",id:"common-idioms-for-reading-file-data",children:[]},{value:"Common Idioms for Writing to a File",id:"common-idioms-for-writing-to-a-file",children:[]},{value:"Exercises",id:"exercises",children:[{value:"Exercise 1.26: File Preliminaries",id:"exercise-126-file-preliminaries",children:[]},{value:"Exercise 1.27: Reading a data file",id:"exercise-127-reading-a-data-file",children:[]},{value:"Exercise 1.28: Other kinds of &quot;files&quot;",id:"exercise-128-other-kinds-of-files",children:[]},{value:"Commentary:  Shouldn&#39;t we being using Pandas for this?",id:"commentary--shouldnt-we-being-using-pandas-for-this",children:[]}]}],c={toc:s};function p(e){var n=e.components,t=Object(i.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("p",null,"\u200b    "),Object(o.b)("p",null,"Most programs need to read input from somewhere. This section discusses file access."),Object(o.b)("h3",{id:"file-input-and-output"},"File Input and Output"),Object(o.b)("p",null,"Open a file."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"f = open('foo.txt', 'rt')     # Open for reading (text)\ng = open('bar.txt', 'wt')     # Open for writing (text)\n")),Object(o.b)("p",null,"Read all of the data."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"data = f.read()\n\n# Read only up to 'maxbytes' bytes\ndata = f.read([maxbytes])\n")),Object(o.b)("p",null,"Write some text."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"g.write('some text')\n")),Object(o.b)("p",null,"Close when you are done."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"f.close()\ng.close()\n")),Object(o.b)("p",null,"Files should be properly closed and it's an easy step to forget.\nThus, the preferred approach is to use the ",Object(o.b)("inlineCode",{parentName:"p"},"with")," statement like this."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"with open(filename, 'rt') as file:\n    # Use the file `file`\n    ...\n    # No need to close explicitly\n...statements\n")),Object(o.b)("p",null,"This automatically closes the file when control leaves the indented code block."),Object(o.b)("h3",{id:"common-idioms-for-reading-file-data"},"Common Idioms for Reading File Data"),Object(o.b)("p",null,"Read an entire file all at once as a string."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"with open('foo.txt', 'rt') as file:\n    data = file.read()\n    # `data` is a string with all the text in `foo.txt`\n")),Object(o.b)("p",null,"Read a file line-by-line by iterating."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"with open(filename, 'rt') as file:\n    for line in file:\n        # Process the line\n")),Object(o.b)("h3",{id:"common-idioms-for-writing-to-a-file"},"Common Idioms for Writing to a File"),Object(o.b)("p",null,"Write string data."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"with open('outfile', 'wt') as out:\n    out.write('Hello World\\n')\n    ...\n")),Object(o.b)("p",null,"Redirect the print function."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"with open('outfile', 'wt') as out:\n    print('Hello World', file=out)\n    ...\n")),Object(o.b)("h2",{id:"exercises"},"Exercises"),Object(o.b)("p",null,"These exercises depend on a file ",Object(o.b)("inlineCode",{parentName:"p"},"Data/portfolio.csv"),".  The file\ncontains a list of lines with information on a portfolio of stocks.\nIt is assumed that you are working in the ",Object(o.b)("inlineCode",{parentName:"p"},"practical-python/Work/"),"\ndirectory.  If you're not sure, you can find out where Python thinks\nit's running by doing this:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},">>> import os\n>>> os.getcwd()\n'/Users/beazley/Desktop/practical-python/Work' # Output vary\n>>>\n")),Object(o.b)("h3",{id:"exercise-126-file-preliminaries"},"Exercise 1.26: File Preliminaries"),Object(o.b)("p",null,"First, try reading the entire file all at once as a big string:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},'>>> with open(\'Data/portfolio.csv\', \'rt\') as f:\n        data = f.read()\n\n>>> data\n\'name,shares,price\\n"AA",100,32.20\\n"IBM",50,91.10\\n"CAT",150,83.44\\n"MSFT",200,51.23\\n"GE",95,40.37\\n"MSFT",50,65.10\\n"IBM",100,70.44\\n\'\n>>> print(data)\nname,shares,price\n"AA",100,32.20\n"IBM",50,91.10\n"CAT",150,83.44\n"MSFT",200,51.23\n"GE",95,40.37\n"MSFT",50,65.10\n"IBM",100,70.44\n>>>\n')),Object(o.b)("p",null,"In the above example, it should be noted that Python has two modes of\noutput.  In the first mode where you type ",Object(o.b)("inlineCode",{parentName:"p"},"data")," at the prompt, Python\nshows you the raw string representation including quotes and escape\ncodes.  When you type ",Object(o.b)("inlineCode",{parentName:"p"},"print(data)"),", you get the actual formatted\noutput of the string."),Object(o.b)("p",null,"Although reading a file all at once is simple, it is often not the\nmost appropriate way to do it\u2014especially if the file happens to be\nhuge or if contains lines of text that you want to handle one at a\ntime."),Object(o.b)("p",null,"To read a file line-by-line, use a for-loop like this:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},">>> with open('Data/portfolio.csv', 'rt') as f:\n        for line in f:\n            print(line, end='')\n\nname,shares,price\n\"AA\",100,32.20\n\"IBM\",50,91.10\n...\n>>>\n")),Object(o.b)("p",null,"When you use this code as shown, lines are read until the end of the\nfile is reached at which point the loop stops."),Object(o.b)("p",null,"On certain occasions, you might want to manually read or skip a\n",Object(o.b)("em",{parentName:"p"},"single")," line of text (e.g., perhaps you want to skip the first line\nof column headers)."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},">>> f = open('Data/portfolio.csv', 'rt')\n>>> headers = next(f)\n>>> headers\n'name,shares,price\\n'\n>>> for line in f:\n    print(line, end='')\n\n\"AA\",100,32.20\n\"IBM\",50,91.10\n...\n>>> f.close()\n>>>\n")),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"next()")," returns the next line of text in the file. If you were to call it repeatedly, you would get successive lines.\nHowever, just so you know, the ",Object(o.b)("inlineCode",{parentName:"p"},"for")," loop already uses ",Object(o.b)("inlineCode",{parentName:"p"},"next()")," to obtain its data.\nThus, you normally wouldn\u2019t call it directly unless you\u2019re trying to explicitly skip or read a single line as shown."),Object(o.b)("p",null,"Once you\u2019re reading lines of a file, you can start to perform more processing such as splitting.\nFor example, try this:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},">>> f = open('Data/portfolio.csv', 'rt')\n>>> headers = next(f).split(',')\n>>> headers\n['name', 'shares', 'price\\n']\n>>> for line in f:\n    row = line.split(',')\n    print(row)\n\n['\"AA\"', '100', '32.20\\n']\n['\"IBM\"', '50', '91.10\\n']\n...\n>>> f.close()\n")),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"Note: In these examples, ",Object(o.b)("inlineCode",{parentName:"em"},"f.close()")," is being called explicitly because the ",Object(o.b)("inlineCode",{parentName:"em"},"with")," statement isn\u2019t being used.")),Object(o.b)("h3",{id:"exercise-127-reading-a-data-file"},"Exercise 1.27: Reading a data file"),Object(o.b)("p",null,"Now that you know how to read a file, let\u2019s write a program to perform a simple calculation."),Object(o.b)("p",null,"The columns in ",Object(o.b)("inlineCode",{parentName:"p"},"portfolio.csv")," correspond to the stock name, number of\nshares, and purchase price of a single stock holding.  Write a program called\n",Object(o.b)("inlineCode",{parentName:"p"},"pcost.py")," that opens this file, reads all lines, and calculates how\nmuch it cost to purchase all of the shares in the portfolio."),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"Hint: to convert a string to an integer, use ",Object(o.b)("inlineCode",{parentName:"em"},"int(s)"),". To convert a string to a floating point, use ",Object(o.b)("inlineCode",{parentName:"em"},"float(s)"),".")),Object(o.b)("p",null,"Your program should print output such as the following:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-bash"},"Total cost 44671.15\n")),Object(o.b)("h3",{id:"exercise-128-other-kinds-of-files"},'Exercise 1.28: Other kinds of "files"'),Object(o.b)("p",null,"What if you wanted to read a non-text file such as a gzip-compressed\ndatafile?  The builtin ",Object(o.b)("inlineCode",{parentName:"p"},"open()")," function won\u2019t help you here, but\nPython has a library module ",Object(o.b)("inlineCode",{parentName:"p"},"gzip")," that can read gzip compressed\nfiles."),Object(o.b)("p",null,"Try it:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},">>> import gzip\n>>> with gzip.open('Data/portfolio.csv.gz', 'rt') as f:\n    for line in f:\n        print(line, end='')\n\n... look at the output ...\n>>>\n")),Object(o.b)("p",null,"Note: Including the file mode of ",Object(o.b)("inlineCode",{parentName:"p"},"'rt'")," is critical here.  If you forget that,\nyou'll get byte strings instead of normal text strings."),Object(o.b)("h3",{id:"commentary--shouldnt-we-being-using-pandas-for-this"},"Commentary:  Shouldn't we being using Pandas for this?"),Object(o.b)("p",null,"Data scientists are quick to point out that libraries like\n",Object(o.b)("a",{parentName:"p",href:"https://pandas.pydata.org"},"Pandas")," already have a function for\nreading CSV files.  This is true--and it works pretty well.\nHowever, this is not a course on learning Pandas. Reading files\nis a more general problem than the specifics of CSV files.\nThe main reason we're working with a CSV file is that it's a\nfamiliar format to most coders and it's relatively easy to work with\ndirectly--illustrating many Python features in the process.\nSo, by all means use Pandas when you go back to work.  For the\nrest of this course however, we're going to stick with standard\nPython functionality."))}p.isMDXComponent=!0},120:function(e,n,t){"use strict";t.d(n,"a",(function(){return u})),t.d(n,"b",(function(){return f}));var a=t(0),i=t.n(a);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=i.a.createContext({}),p=function(e){var n=i.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=p(e.components);return i.a.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.a.createElement(i.a.Fragment,{},n)}},b=i.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,r=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(t),b=a,f=u["".concat(r,".").concat(b)]||u[b]||d[b]||o;return t?i.a.createElement(f,l(l({ref:n},c),{},{components:t})):i.a.createElement(f,l({ref:n},c))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,r=new Array(o);r[0]=b;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,r[1]=l;for(var c=2;c<o;c++)r[c]=t[c];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"}}]);