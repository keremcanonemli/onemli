(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{280:function(e,n,t){"use strict";t.d(n,"a",(function(){return c})),t.d(n,"b",(function(){return O}));var r=t(0),s=t.n(r);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function p(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,r,s=function(e,n){if(null==e)return{};var t,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var o=s.a.createContext({}),l=function(e){var n=s.a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):p(p({},n),e)),t},c=function(e){var n=l(e.components);return s.a.createElement(o.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return s.a.createElement(s.a.Fragment,{},n)}},b=s.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,o=d(e,["components","mdxType","originalType","parentName"]),c=l(t),b=r,O=c["".concat(i,".").concat(b)]||c[b]||u[b]||a;return t?s.a.createElement(O,p(p({ref:n},o),{},{components:t})):s.a.createElement(O,p({ref:n},o))}));function O(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=b;var p={};for(var d in n)hasOwnProperty.call(n,d)&&(p[d]=n[d]);p.originalType=e,p.mdxType="string"==typeof e?e:r,i[1]=p;for(var o=2;o<a;o++)i[o]=t[o];return s.a.createElement.apply(null,i)}return s.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"},73:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return p})),t.d(n,"toc",(function(){return d})),t.d(n,"default",(function(){return l}));var r=t(3),s=t(8),a=(t(0),t(280)),i={id:"ipaddress",title:"IPaddress",sidebar_label:"12.3 IPaddress",slug:"ipaddress",custom_edit_url:null},p={unversionedId:"python/useful_modules/ipaddress",id:"python/useful_modules/ipaddress",isDocsHomePage:!1,title:"IPaddress",description:"Module ipaddress simplifies work with IP addresses.",source:"@site/docs/python/useful_modules/3_ipaddress.md",slug:"/python/useful_modules/ipaddress",permalink:"/tr/docs/python/useful_modules/ipaddress",editUrl:null,version:"current",sidebar_label:"12.3 IPaddress",sidebar:"someSidebar",previous:{title:"Os",permalink:"/tr/docs/python/useful_modules/os"},next:{title:"Tabulate",permalink:"/tr/docs/python/useful_modules/tabulate"}},d=[{value:"<code>ipaddress.ip_address</code>",id:"ipaddressip_address",children:[]},{value:"<code>ipaddress.ip_network</code>",id:"ipaddressip_network",children:[]},{value:"<code>ipaddress.ip_interface</code>",id:"ipaddressip_interface",children:[]},{value:"Example of module usage",id:"example-of-module-usage",children:[]}],o={toc:d};function l(e){var n=e.components,t=Object(s.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},o,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Module ",Object(a.b)("inlineCode",{parentName:"p"},"ipaddress")," simplifies work with IP addresses."),Object(a.b)("p",null,"Note"),Object(a.b)("p",null,"Since Python 3.3, ",Object(a.b)("inlineCode",{parentName:"p"},"ipaddress")," module is part of standard Python library."),Object(a.b)("h2",{id:"ipaddressip_address"},Object(a.b)("inlineCode",{parentName:"h2"},"ipaddress.ip_address")),Object(a.b)("p",null,"Function ",Object(a.b)("inlineCode",{parentName:"p"},"ipaddress.ip_address")," allows to create an IPv4Address or IPv6Address respectively:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"In [1]: import ipaddress\n\nIn [2]: ipv4 = ipaddress.ip_address('10.0.1.1')\n\nIn [3]: ipv4\nOut[3]: IPv4Address('10.0.1.1')\n\nIn [4]: print(ipv4)\n10.0.1.1\n")),Object(a.b)("p",null,"Object has several methods and attributes:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"In [5]: ipv4.\nipv4.compressed       ipv4.is_loopback      ipv4.is_unspecified   ipv4.version\nipv4.exploded         ipv4.is_multicast     ipv4.max_prefixlen\nipv4.is_global        ipv4.is_private       ipv4.packed\nipv4.is_link_local    ipv4.is_reserved      ipv4.reverse_pointer\n")),Object(a.b)("p",null,"With ",Object(a.b)("inlineCode",{parentName:"p"},"is_")," attributes you can check to what range the address belongs to:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"In [6]: ipv4.is_loopback\nOut[6]: False\n\nIn [7]: ipv4.is_multicast\nOut[7]: False\n\nIn [8]: ipv4.is_reserved\nOut[8]: False\n\nIn [9]: ipv4.is_private\nOut[9]: True\n")),Object(a.b)("p",null,"Different operations can be performed with received objects:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"In [10]: ip1 = ipaddress.ip_address('10.0.1.1')\n\nIn [11]: ip2 = ipaddress.ip_address('10.0.2.1')\n\nIn [12]: ip1 > ip2\nOut[12]: False\n\nIn [13]: ip2 > ip1\nOut[13]: True\n\nIn [14]: ip1 == ip2\nOut[14]: False\n\nIn [15]: ip1 != ip2\nOut[15]: True\n\nIn [16]: str(ip1)\nOut[16]: '10.0.1.1'\n\nIn [17]: int(ip1)\nOut[17]: 167772417\n\nIn [18]: ip1 + 5\nOut[18]: IPv4Address('10.0.1.6')\n\nIn [19]: ip1 - 5\nOut[19]: IPv4Address('10.0.0.252')\n")),Object(a.b)("h2",{id:"ipaddressip_network"},Object(a.b)("inlineCode",{parentName:"h2"},"ipaddress.ip_network")),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"ipaddress.ip_network")," function allows you to create an object that describes the network (IPv4 or IPv6):"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"In [20]: subnet1 = ipaddress.ip_network('80.0.1.0/28')\n")),Object(a.b)("p",null,"As with an address, a network has various attributes and methods:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"In [21]: subnet1.broadcast_address\nOut[21]: IPv4Address('80.0.1.15')\n\nIn [22]: subnet1.with_netmask\nOut[22]: '80.0.1.0/255.255.255.240'\n\nIn [23]: subnet1.with_hostmask\nOut[23]: '80.0.1.0/0.0.0.15'\n\nIn [24]: subnet1.prefixlen\nOut[24]: 28\n\nIn [25]: subnet1.num_addresses\nOut[25]: 16\n")),Object(a.b)("p",null,"Method ",Object(a.b)("inlineCode",{parentName:"p"},"hosts")," returns generator, so to view all hosts you should apply list() function:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"In [26]: list(subnet1.hosts())\nOut[26]:\n[IPv4Address('80.0.1.1'),\n IPv4Address('80.0.1.2'),\n IPv4Address('80.0.1.3'),\n IPv4Address('80.0.1.4'),\n IPv4Address('80.0.1.5'),\n IPv4Address('80.0.1.6'),\n IPv4Address('80.0.1.7'),\n IPv4Address('80.0.1.8'),\n IPv4Address('80.0.1.9'),\n IPv4Address('80.0.1.10'),\n IPv4Address('80.0.1.11'),\n IPv4Address('80.0.1.12'),\n IPv4Address('80.0.1.13'),\n IPv4Address('80.0.1.14')]\n")),Object(a.b)("p",null,"Method ",Object(a.b)("inlineCode",{parentName:"p"},"subnets")," allows dividing network (subnetting). By default, it splits network into two subnets:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"In [27]: list(subnet1.subnets())\nOut[27]: [IPv4Network('80.0.1.0/29'), IPv4Network(u'80.0.1.8/29')]\n")),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Prefixlen_diff")," parameter allows you to specify the number of bits for subnets:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"In [28]: list(subnet1.subnets(prefixlen_diff=2))\nOut[28]:\n[IPv4Network('80.0.1.0/30'),\n IPv4Network('80.0.1.4/30'),\n IPv4Network('80.0.1.8/30'),\n IPv4Network('80.0.1.12/30')]\n")),Object(a.b)("p",null,"With ",Object(a.b)("inlineCode",{parentName:"p"},"new_prefix")," parameter you can specify which mask should be configured:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"In [29]: list(subnet1.subnets(new_prefix=30))\nOut[29]:\n[IPv4Network('80.0.1.0/30'),\n IPv4Network('80.0.1.4/30'),\n IPv4Network('80.0.1.8/30'),\n IPv4Network('80.0.1.12/30')]\n\nIn [30]: list(subnet1.subnets(new_prefix=29))\nOut[30]: [IPv4Network('80.0.1.0/29'), IPv4Network(u'80.0.1.8/29')]\n")),Object(a.b)("p",null,"IP addresses of network can be iterated in a loop:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"In [31]: for ip in subnet1:\n   ....:     print(ip)\n   ....:\n80.0.1.0\n80.0.1.1\n80.0.1.2\n80.0.1.3\n80.0.1.4\n80.0.1.5\n80.0.1.6\n80.0.1.7\n80.0.1.8\n80.0.1.9\n80.0.1.10\n80.0.1.11\n80.0.1.12\n80.0.1.13\n80.0.1.14\n80.0.1.15\n")),Object(a.b)("p",null,"And it is possible to get a specific address:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"In [32]: subnet1[0]\nOut[32]: IPv4Address('80.0.1.0')\n\nIn [33]: subnet1[5]\nOut[33]: IPv4Address('80.0.1.5')\n")),Object(a.b)("p",null,"This way you can check if IP address is in the network:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"In [34]: ip1 = ipaddress.ip_address('80.0.1.3')\n\nIn [35]: ip1 in subnet1\nOut[35]: True\n")),Object(a.b)("h2",{id:"ipaddressip_interface"},Object(a.b)("inlineCode",{parentName:"h2"},"ipaddress.ip_interface")),Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"ipaddress.ip_interface")," function allows you to create an IPv4Interface or IPv6Interface object, respectively:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"In [36]: int1 = ipaddress.ip_interface('10.0.1.1/24')\n")),Object(a.b)("p",null,"Using methods of IPv4Interface object you can get an address, mask or interface network:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"In [37]: int1.ip\nOut[37]: IPv4Address('10.0.1.1')\n\nIn [38]: int1.network\nOut[38]: IPv4Network('10.0.1.0/24')\n\nIn [39]: int1.netmask\nOut[39]: IPv4Address('255.255.255.0')\n")),Object(a.b)("h2",{id:"example-of-module-usage"},"Example of module usage"),Object(a.b)("p",null,"Since module has built-in address correctness checks, you can use them, for example, to check whether an address is a network or host address:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"In [40]: IP1 = '10.0.1.1/24'\n\nIn [41]: IP2 = '10.0.1.0/24'\n\nIn [42]: def check_if_ip_is_network(ip_address):\n   ....:     try:\n   ....:         ipaddress.ip_network(ip_address)\n   ....:         return True\n   ....:     except ValueError:\n   ....:         return False\n   ....:\n\nIn [43]: check_if_ip_is_network(IP1)\nOut[43]: False\n\nIn [44]: check_if_ip_is_network(IP2)\nOut[44]: True\n")))}l.isMDXComponent=!0}}]);