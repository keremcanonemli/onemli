(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{117:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return i})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return p}));var a=n(3),r=n(8),l=(n(0),n(121)),o={id:"datatypes",title:"Datatypes",sidebar_label:"2.1 Datatypes",slug:"datatypes",custom_edit_url:null},i={unversionedId:"python/working_with_data/datatypes",id:"python/working_with_data/datatypes",isDocsHomePage:!1,title:"Datatypes",description:"\u200b",source:"@site/docs/python/working_with_data/01_Datatypes.md",slug:"/python/working_with_data/datatypes",permalink:"/docs/python/working_with_data/datatypes",editUrl:null,version:"current",sidebar_label:"2.1 Datatypes",sidebar:"someSidebar",previous:{title:"Functions",permalink:"/docs/python/introduction/functions"},next:{title:"Containers",permalink:"/docs/python/working_with_data/containers"}},s=[{value:"Overview",id:"overview",children:[]},{value:"Primitive Datatypes",id:"primitive-datatypes",children:[]},{value:"None type",id:"none-type",children:[]},{value:"Data Structures",id:"data-structures",children:[]},{value:"Tuples",id:"tuples",children:[]},{value:"Tuple Packing",id:"tuple-packing",children:[]},{value:"Tuple Unpacking",id:"tuple-unpacking",children:[]},{value:"Tuples vs. Lists",id:"tuples-vs-lists",children:[]},{value:"Dictionaries",id:"dictionaries",children:[]},{value:"Common operations",id:"common-operations",children:[]},{value:"Why dictionaries?",id:"why-dictionaries",children:[]},{value:"Exercises",id:"exercises",children:[{value:"Exercise 2.1: Tuples",id:"exercise-21-tuples",children:[]},{value:"Exercise 2.2: Dictionaries as a data structure",id:"exercise-22-dictionaries-as-a-data-structure",children:[]},{value:"Exercise 2.3: Some additional dictionary operations",id:"exercise-23-some-additional-dictionary-operations",children:[]}]}],c={toc:s};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(l.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(l.b)("p",null,"\u200b    "),Object(l.b)("h3",{id:"overview"},"Overview"),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},"To write useful programs, you need to be able to work with data.\nThis section introduces Python's core data structures of tuples,\nlists, sets, and dictionaries and discusses common data handling\nidioms.  The last part of this section dives a little deeper\ninto Python's underlying object model.")),Object(l.b)("p",null,"This section introduces data structures in the form of tuples and dictionaries."),Object(l.b)("h3",{id:"primitive-datatypes"},"Primitive Datatypes"),Object(l.b)("p",null,"Python has a few primitive types of data:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Integers"),Object(l.b)("li",{parentName:"ul"},"Floating point numbers"),Object(l.b)("li",{parentName:"ul"},"Strings (text)")),Object(l.b)("p",null,"We learned about these in the introduction."),Object(l.b)("h3",{id:"none-type"},"None type"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"email_address = None\n")),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"None")," is often used as a placeholder for optional or missing value.  It\nevaluates as ",Object(l.b)("inlineCode",{parentName:"p"},"False")," in conditionals."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"if email_address:\n    send_email(email_address, msg)\n")),Object(l.b)("h3",{id:"data-structures"},"Data Structures"),Object(l.b)("p",null,"Real programs have more complex data. For example information about a stock holding:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-code"},"100 shares of GOOG at $490.10\n")),Object(l.b)("p",null,'This is an "object" with three parts:'),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},'Name or symbol of the stock ("GOOG", a string)'),Object(l.b)("li",{parentName:"ul"},"Number of shares (100, an integer)"),Object(l.b)("li",{parentName:"ul"},"Price (490.10 a float)")),Object(l.b)("h3",{id:"tuples"},"Tuples"),Object(l.b)("p",null,"A tuple is a collection of values grouped together."),Object(l.b)("p",null,"Example:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"s = ('GOOG', 100, 490.1)\n")),Object(l.b)("p",null,"Sometimes the ",Object(l.b)("inlineCode",{parentName:"p"},"()")," are omitted in the syntax."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"s = 'GOOG', 100, 490.1\n")),Object(l.b)("p",null,"Special cases (0-tuple, 1-tuple)."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"t = ()            # An empty tuple\nw = ('GOOG', )    # A 1-item tuple\n")),Object(l.b)("p",null,"Tuples are often used to represent ",Object(l.b)("em",{parentName:"p"},"simple")," records or structures.\nTypically, it is a single ",Object(l.b)("em",{parentName:"p"},"object")," of multiple parts. A good analogy: ",Object(l.b)("em",{parentName:"p"},"A tuple is like a single row in a database table.")),Object(l.b)("p",null,"Tuple contents are ordered (like an array)."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"s = ('GOOG', 100, 490.1)\nname = s[0]                 # 'GOOG'\nshares = s[1]               # 100\nprice = s[2]                # 490.1\n")),Object(l.b)("p",null,"However, the contents can't be modified."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},">>> s[1] = 75\nTypeError: object does not support item assignment\n")),Object(l.b)("p",null,"You can, however, make a new tuple based on a current tuple."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"s = (s[0], 75, s[2])\n")),Object(l.b)("h3",{id:"tuple-packing"},"Tuple Packing"),Object(l.b)("p",null,"Tuples are more about packing related items together into a single ",Object(l.b)("em",{parentName:"p"},"entity"),"."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"s = ('GOOG', 100, 490.1)\n")),Object(l.b)("p",null,"The tuple is then easy to pass around to other parts of a program as a single object."),Object(l.b)("h3",{id:"tuple-unpacking"},"Tuple Unpacking"),Object(l.b)("p",null,"To use the tuple elsewhere, you can unpack its parts into variables."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"name, shares, price = s\nprint('Cost', shares * price)\n")),Object(l.b)("p",null,"The number of variables on the left must match the tuple structure."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"name, shares = s     # ERROR\nTraceback (most recent call last):\n...\nValueError: too many values to unpack\n")),Object(l.b)("h3",{id:"tuples-vs-lists"},"Tuples vs. Lists"),Object(l.b)("p",null,"Tuples look like read-only lists. However, tuples are most often used\nfor a ",Object(l.b)("em",{parentName:"p"},"single item")," consisting of multiple parts.  Lists are usually a\ncollection of distinct items, usually all of the same type."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"record = ('GOOG', 100, 490.1)       # A tuple representing a record in a portfolio\n\nsymbols = [ 'GOOG', 'AAPL', 'IBM' ]  # A List representing three stock symbols\n")),Object(l.b)("h3",{id:"dictionaries"},"Dictionaries"),Object(l.b)("p",null,"A dictionary is mapping of keys to values.  It's also sometimes called a hash table or\nassociative array.  The keys serve as indices for accessing values."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"s = {\n    'name': 'GOOG',\n    'shares': 100,\n    'price': 490.1\n}\n")),Object(l.b)("h3",{id:"common-operations"},"Common operations"),Object(l.b)("p",null,"To get values from a dictionary use the key names."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},">>> print(s['name'], s['shares'])\nGOOG 100\n>>> s['price']\n490.10\n>>>\n")),Object(l.b)("p",null,"To add or modify values assign using the key names."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},">>> s['shares'] = 75\n>>> s['date'] = '6/6/2007'\n>>>\n")),Object(l.b)("p",null,"To delete a value use the ",Object(l.b)("inlineCode",{parentName:"p"},"del")," statement."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},">>> del s['date']\n>>>\n")),Object(l.b)("h3",{id:"why-dictionaries"},"Why dictionaries?"),Object(l.b)("p",null,"Dictionaries are useful when there are ",Object(l.b)("em",{parentName:"p"},"many")," different values and those values\nmight be modified or manipulated.  Dictionaries make your code more readable."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"s['price']\n# vs\ns[2]\n")),Object(l.b)("h2",{id:"exercises"},"Exercises"),Object(l.b)("p",null,"In the last few exercises, you wrote a program that read a datafile\n",Object(l.b)("inlineCode",{parentName:"p"},"Data/portfolio.csv"),". Using the ",Object(l.b)("inlineCode",{parentName:"p"},"csv")," module, it is easy to read the\nfile row-by-row."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},">>> import csv\n>>> f = open('Data/portfolio.csv')\n>>> rows = csv.reader(f)\n>>> next(rows)\n['name', 'shares', 'price']\n>>> row = next(rows)\n>>> row\n['AA', '100', '32.20']\n>>>\n")),Object(l.b)("p",null,'Although reading the file is easy, you often want to do more with the\ndata than read it.  For instance, perhaps you want to store it and\nstart performing some calculations on it.  Unfortunately, a raw "row"\nof data doesn\u2019t give you enough to work with. For example, even a\nsimple math calculation doesn\u2019t work:'),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},">>> row = ['AA', '100', '32.20']\n>>> cost = row[1] * row[2]\nTraceback (most recent call last):\n    File \"<stdin>\", line 1, in <module>\nTypeError: can't multiply sequence by non-int of type 'str'\n>>>\n")),Object(l.b)("p",null,"To do more, you typically want to interpret the raw data in some way\nand turn it into a more useful kind of object so that you can work\nwith it later.  Two simple options are tuples or dictionaries."),Object(l.b)("h3",{id:"exercise-21-tuples"},"Exercise 2.1: Tuples"),Object(l.b)("p",null,"At the interactive prompt, create the following tuple that represents\nthe above row, but with the numeric columns converted to proper\nnumbers:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},">>> t = (row[0], int(row[1]), float(row[2]))\n>>> t\n('AA', 100, 32.2)\n>>>\n")),Object(l.b)("p",null,"Using this, you can now calculate the total cost by multiplying the\nshares and the price:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},">>> cost = t[1] * t[2]\n>>> cost\n3220.0000000000005\n>>>\n")),Object(l.b)("p",null,"Is math broken in Python? What\u2019s the deal with the answer of\n3220.0000000000005?"),Object(l.b)("p",null,"This is an artifact of the floating point hardware on your computer\nonly being able to accurately represent decimals in Base-2, not\nBase-10.  For even simple calculations involving base-10 decimals,\nsmall errors are introduced. This is normal, although perhaps a bit\nsurprising if you haven\u2019t seen it before."),Object(l.b)("p",null,"This happens in all programming languages that use floating point\ndecimals, but it often gets hidden when printing. For example:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},">>> print(f'{cost:0.2f}')\n3220.00\n>>>\n")),Object(l.b)("p",null,"Tuples are read-only. Verify this by trying to change the number of\nshares to 75."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},">>> t[1] = 75\nTraceback (most recent call last):\n    File \"<stdin>\", line 1, in <module>\nTypeError: 'tuple' object does not support item assignment\n>>>\n")),Object(l.b)("p",null,"Although you can\u2019t change tuple contents, you can always create a\ncompletely new tuple that replaces the old one."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},">>> t = (t[0], 75, t[2])\n>>> t\n('AA', 75, 32.2)\n>>>\n")),Object(l.b)("p",null,"Whenever you reassign an existing variable name like this, the old\nvalue is discarded.  Although the above assignment might look like you\nare modifying the tuple, you are actually creating a new tuple and\nthrowing the old one away."),Object(l.b)("p",null,"Tuples are often used to pack and unpack values into variables. Try\nthe following:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},">>> name, shares, price = t\n>>> name\n'AA'\n>>> shares\n75\n>>> price\n32.2\n>>>\n")),Object(l.b)("p",null,"Take the above variables and pack them back into a tuple"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},">>> t = (name, 2*shares, price)\n>>> t\n('AA', 150, 32.2)\n>>>\n")),Object(l.b)("h3",{id:"exercise-22-dictionaries-as-a-data-structure"},"Exercise 2.2: Dictionaries as a data structure"),Object(l.b)("p",null,"An alternative to a tuple is to create a dictionary instead."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},">>> d = {\n        'name' : row[0],\n        'shares' : int(row[1]),\n        'price'  : float(row[2])\n    }\n>>> d\n{'name': 'AA', 'shares': 100, 'price': 32.2 }\n>>>\n")),Object(l.b)("p",null,"Calculate the total cost of this holding:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},">>> cost = d['shares'] * d['price']\n>>> cost\n3220.0000000000005\n>>>\n")),Object(l.b)("p",null,"Compare this example with the same calculation involving tuples\nabove. Change the number of shares to 75."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},">>> d['shares'] = 75\n>>> d\n{'name': 'AA', 'shares': 75, 'price': 32.2 }\n>>>\n")),Object(l.b)("p",null,"Unlike tuples, dictionaries can be freely modified. Add some\nattributes:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},">>> d['date'] = (6, 11, 2007)\n>>> d['account'] = 12345\n>>> d\n{'name': 'AA', 'shares': 75, 'price':32.2, 'date': (6, 11, 2007), 'account': 12345}\n>>>\n")),Object(l.b)("h3",{id:"exercise-23-some-additional-dictionary-operations"},"Exercise 2.3: Some additional dictionary operations"),Object(l.b)("p",null,"If you turn a dictionary into a list, you\u2019ll get all of its keys:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},">>> list(d)\n['name', 'shares', 'price', 'date', 'account']\n>>>\n")),Object(l.b)("p",null,"Similarly, if you use the ",Object(l.b)("inlineCode",{parentName:"p"},"for")," statement to iterate on a dictionary,\nyou will get the keys:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},">>> for k in d:\n        print('k =', k)\n\nk = name\nk = shares\nk = price\nk = date\nk = account\n>>>\n")),Object(l.b)("p",null,"Try this variant that performs a lookup at the same time:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},">>> for k in d:\n        print(k, '=', d[k])\n\nname = AA\nshares = 75\nprice = 32.2\ndate = (6, 11, 2007)\naccount = 12345\n>>>\n")),Object(l.b)("p",null,"You can also obtain all of the keys using the ",Object(l.b)("inlineCode",{parentName:"p"},"keys()")," method:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},">>> keys = d.keys()\n>>> keys\ndict_keys(['name', 'shares', 'price', 'date', 'account'])\n>>>\n")),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"keys()")," is a bit unusual in that it returns a special ",Object(l.b)("inlineCode",{parentName:"p"},"dict_keys")," object."),Object(l.b)("p",null,"This is an overlay on the original dictionary that always gives you\nthe current keys\u2014even if the dictionary changes. For example, try\nthis:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},">>> del d['account']\n>>> keys\ndict_keys(['name', 'shares', 'price', 'date'])\n>>>\n")),Object(l.b)("p",null,"Carefully notice that the ",Object(l.b)("inlineCode",{parentName:"p"},"'account'")," disappeared from ",Object(l.b)("inlineCode",{parentName:"p"},"keys")," even\nthough you didn\u2019t call ",Object(l.b)("inlineCode",{parentName:"p"},"d.keys()")," again."),Object(l.b)("p",null,"A more elegant way to work with keys and values together is to use the\n",Object(l.b)("inlineCode",{parentName:"p"},"items()")," method. This gives you ",Object(l.b)("inlineCode",{parentName:"p"},"(key, value)")," tuples:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},">>> items = d.items()\n>>> items\ndict_items([('name', 'AA'), ('shares', 75), ('price', 32.2), ('date', (6, 11, 2007))])\n>>> for k, v in d.items():\n        print(k, '=', v)\n\nname = AA\nshares = 75\nprice = 32.2\ndate = (6, 11, 2007)\n>>>\n")),Object(l.b)("p",null,"If you have tuples such as ",Object(l.b)("inlineCode",{parentName:"p"},"items"),", you can create a dictionary using\nthe ",Object(l.b)("inlineCode",{parentName:"p"},"dict()")," function. Try it:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},">>> items\ndict_items([('name', 'AA'), ('shares', 75), ('price', 32.2), ('date', (6, 11, 2007))])\n>>> d = dict(items)\n>>> d\n{'name': 'AA', 'shares': 75, 'price':32.2, 'date': (6, 11, 2007)}\n>>>\n")))}p.isMDXComponent=!0},121:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=r.a.createContext({}),p=function(e){var t=r.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),d=a,m=u["".concat(o,".").concat(d)]||u[d]||b[d]||l;return n?r.a.createElement(m,i(i({ref:t},c),{},{components:n})):r.a.createElement(m,i({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var c=2;c<l;c++)o[c]=n[c];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);