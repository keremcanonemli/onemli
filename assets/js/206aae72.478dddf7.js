(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{122:function(e,n,a){"use strict";a.d(n,"a",(function(){return u})),a.d(n,"b",(function(){return m}));var t=a(0),r=a.n(t);function o(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function i(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function s(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?i(Object(a),!0).forEach((function(n){o(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function l(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=r.a.createContext({}),p=function(e){var n=r.a.useContext(c),a=n;return e&&(a="function"==typeof e?e(n):s(s({},n),e)),a},u=function(e){var n=p(e.components);return r.a.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},b=r.a.forwardRef((function(e,n){var a=e.components,t=e.mdxType,o=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(a),b=t,m=u["".concat(i,".").concat(b)]||u[b]||d[b]||o;return a?r.a.createElement(m,s(s({ref:n},c),{},{components:a})):r.a.createElement(m,s({ref:n},c))}));function m(e,n){var a=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var o=a.length,i=new Array(o);i[0]=b;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:t,i[1]=s;for(var c=2;c<o;c++)i[c]=a[c];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,a)}b.displayName="MDXCreateElement"},82:function(e,n,a){"use strict";a.r(n),a.d(n,"frontMatter",(function(){return i})),a.d(n,"metadata",(function(){return s})),a.d(n,"toc",(function(){return l})),a.d(n,"default",(function(){return p}));var t=a(3),r=a(8),o=(a(0),a(122)),i={id:"more_on_functions",title:"More on Functions",sidebar_label:"3.2 More on Functions",slug:"more_on_functions",custom_edit_url:null},s={unversionedId:"python/program_organization/more_on_functions",id:"python/program_organization/more_on_functions",isDocsHomePage:!1,title:"More on Functions",description:"Although functions were introduced earlier, very few details were provided on how",source:"@site/docs/python/program_organization/02_More_functions.md",slug:"/python/program_organization/more_on_functions",permalink:"/docs/python/program_organization/more_on_functions",editUrl:null,version:"current",sidebar_label:"3.2 More on Functions",sidebar:"someSidebar",previous:{title:"Script",permalink:"/docs/python/program_organization/script"},next:{title:"Error Checking",permalink:"/docs/python/program_organization/error_checking"}},l=[{value:"Calling a Function",id:"calling-a-function",children:[]},{value:"Default Arguments",id:"default-arguments",children:[]},{value:"Prefer keyword arguments for optional arguments",id:"prefer-keyword-arguments-for-optional-arguments",children:[]},{value:"Design Best Practices",id:"design-best-practices",children:[]},{value:"Returning Values",id:"returning-values",children:[]},{value:"Multiple Return Values",id:"multiple-return-values",children:[]},{value:"Variable Scope",id:"variable-scope",children:[]},{value:"Local Variables",id:"local-variables",children:[]},{value:"Global Variables",id:"global-variables",children:[]},{value:"Modifying Globals",id:"modifying-globals",children:[]},{value:"Argument Passing",id:"argument-passing",children:[]},{value:"Reassignment vs Modifying",id:"reassignment-vs-modifying",children:[]},{value:"Exercises",id:"exercises",children:[{value:"Exercise 3.3: Reading CSV Files",id:"exercise-33-reading-csv-files",children:[]},{value:"Exercise 3.4: Building a Column Selector",id:"exercise-34-building-a-column-selector",children:[]},{value:"Exercise 3.5: Performing Type Conversion",id:"exercise-35-performing-type-conversion",children:[]},{value:"Exercise 3.6: Working without Headers",id:"exercise-36-working-without-headers",children:[]},{value:"Exercise 3.7: Picking a different column delimitier",id:"exercise-37-picking-a-different-column-delimitier",children:[]},{value:"Commentary",id:"commentary",children:[]}]}],c={toc:l};function p(e){var n=e.components,a=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(t.a)({},c,a,{components:n,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Although functions were introduced earlier, very few details were provided on how\nthey actually work at a deeper level.  This section aims to fill in some gaps\nand discuss matters such as calling conventions, scoping rules, and more."),Object(o.b)("h3",{id:"calling-a-function"},"Calling a Function"),Object(o.b)("p",null,"Consider this function:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"def read_prices(filename, debug):\n    ...\n")),Object(o.b)("p",null,"You can call the function with positional arguments:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"prices = read_prices('prices.csv', True)\n")),Object(o.b)("p",null,"Or you can call the function with keyword arguments:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"prices = read_prices(filename='prices.csv', debug=True)\n")),Object(o.b)("h3",{id:"default-arguments"},"Default Arguments"),Object(o.b)("p",null,"Sometimes you want an argument to be optional.  If so, assign a default value\nin the function definition."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"def read_prices(filename, debug=False):\n    ...\n")),Object(o.b)("p",null,"If a default value is assigned, the argument is optional in function calls."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"d = read_prices('prices.csv')\ne = read_prices('prices.dat', True)\n")),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"Note: Arguments with defaults must appear at the end of the arguments list (all non-optional arguments go first).")),Object(o.b)("h3",{id:"prefer-keyword-arguments-for-optional-arguments"},"Prefer keyword arguments for optional arguments"),Object(o.b)("p",null,"Compare and contrast these two different calling styles:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"parse_data(data, False, True) # ?????\n\nparse_data(data, ignore_errors=True)\nparse_data(data, debug=True)\nparse_data(data, debug=True, ignore_errors=True)\n")),Object(o.b)("p",null,"In most cases, keyword arguments improve code clarity--especially for arguments that\nserve as flags or which are related to optional features."),Object(o.b)("h3",{id:"design-best-practices"},"Design Best Practices"),Object(o.b)("p",null,"Always give short, but meaningful names to functions arguments."),Object(o.b)("p",null,"Someone using a function may want to use the keyword calling style."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"d = read_prices('prices.csv', debug=True)\n")),Object(o.b)("p",null,"Python development tools will show the names in help features and documentation."),Object(o.b)("h3",{id:"returning-values"},"Returning Values"),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"return")," statement returns a value"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"def square(x):\n    return x * x\n")),Object(o.b)("p",null,"If no return value is given or ",Object(o.b)("inlineCode",{parentName:"p"},"return")," is missing, ",Object(o.b)("inlineCode",{parentName:"p"},"None")," is returned."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"def bar(x):\n    statements\n    return\n\na = bar(4)      # a = None\n\n# OR\ndef foo(x):\n    statements  # No `return`\n\nb = foo(4)      # b = None\n")),Object(o.b)("h3",{id:"multiple-return-values"},"Multiple Return Values"),Object(o.b)("p",null,"Functions can only return one value.  However, a function may return\nmultiple values by returning them in a tuple."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"def divide(a,b):\n    q = a // b      # Quotient\n    r = a % b       # Remainder\n    return q, r     # Return a tuple\n")),Object(o.b)("p",null,"Usage example:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"x, y = divide(37,5) # x = 7, y = 2\n\nx = divide(37, 5)   # x = (7, 2)\n")),Object(o.b)("h3",{id:"variable-scope"},"Variable Scope"),Object(o.b)("p",null,"Programs assign values to variables."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"x = value # Global variable\n\ndef foo():\n    y = value # Local variable\n")),Object(o.b)("p",null,'Variables assignments occur outside and inside function definitions.\nVariables defined outside are "global". Variables inside a function\nare "local".'),Object(o.b)("h3",{id:"local-variables"},"Local Variables"),Object(o.b)("p",null,"Variables assigned inside functions are private."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"def read_portfolio(filename):\n    portfolio = []\n    for line in open(filename):\n        fields = line.split(',')\n        s = (fields[0], int(fields[1]), float(fields[2]))\n        portfolio.append(s)\n    return portfolio\n")),Object(o.b)("p",null,"In this example, ",Object(o.b)("inlineCode",{parentName:"p"},"filename"),", ",Object(o.b)("inlineCode",{parentName:"p"},"portfolio"),", ",Object(o.b)("inlineCode",{parentName:"p"},"line"),", ",Object(o.b)("inlineCode",{parentName:"p"},"fields")," and ",Object(o.b)("inlineCode",{parentName:"p"},"s")," are local variables.\nThose variables are not retained or accessible after the function call."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},">>> stocks = read_portfolio('portfolio.csv')\n>>> fields\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in ?\nNameError: name 'fields' is not defined\n>>>\n")),Object(o.b)("p",null,"Locals also can't conflict with variables found elsewhere."),Object(o.b)("h3",{id:"global-variables"},"Global Variables"),Object(o.b)("p",null,"Functions can freely access the values of globals defined in the same\nfile."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"name = 'Dave'\n\ndef greeting():\n    print('Hello', name)  # Using `name` global variable\n")),Object(o.b)("p",null,"However, functions can't modify globals:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"name = 'Dave'\n\ndef spam():\n  name = 'Guido'\n\nspam()\nprint(name) # prints 'Dave'\n")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Remember: All assignments in functions are local.")),Object(o.b)("h3",{id:"modifying-globals"},"Modifying Globals"),Object(o.b)("p",null,"If you must modify a global variable you must declare it as such."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"name = 'Dave'\n\ndef spam():\n    global name\n    name = 'Guido' # Changes the global name above\n")),Object(o.b)("p",null,"The global declaration must appear before its use and the corresponding\nvariable must exist in the same file as the function.   Having seen this,\nknow that it is considered poor form.  In fact, try to avoid ",Object(o.b)("inlineCode",{parentName:"p"},"global")," entirely\nif you can.  If you need a function to modify some kind of state outside\nof the function, it's better to use a class instead (more on this later)."),Object(o.b)("h3",{id:"argument-passing"},"Argument Passing"),Object(o.b)("p",null,"When you call a function, the argument variables are names that refer\nto the passed values. These values are NOT copies (see ",Object(o.b)("a",{parentName:"p",href:"/docs/python/working_with_data/objects"},"section\n2.7"),"). If mutable data types are\npassed (e.g. lists, dicts), they can be modified ",Object(o.b)("em",{parentName:"p"},"in-place"),"."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"def foo(items):\n    items.append(42)    # Modifies the input object\n\na = [1, 2, 3]\nfoo(a)\nprint(a)                # [1, 2, 3, 42]\n")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Key point: Functions don't receive a copy of the input arguments.")),Object(o.b)("h3",{id:"reassignment-vs-modifying"},"Reassignment vs Modifying"),Object(o.b)("p",null,"Make sure you understand the subtle difference between modifying a\nvalue and reassigning a variable name."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"def foo(items):\n    items.append(42)    # Modifies the input object\n\na = [1, 2, 3]\nfoo(a)\nprint(a)                # [1, 2, 3, 42]\n\n# VS\ndef bar(items):\n    items = [4,5,6]    # Changes local `items` variable to point to a different object\n\nb = [1, 2, 3]\nbar(b)\nprint(b)                # [1, 2, 3]\n")),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"Reminder: Variable assignment never overwrites memory. The name is merely bound to a new value.")),Object(o.b)("h2",{id:"exercises"},"Exercises"),Object(o.b)("p",null,"This set of exercises have you implement what is, perhaps, the most\npowerful and difficult part of the course.  There are a lot of steps\nand many concepts from past exercises are put together all at once.\nThe final solution is only about 25 lines of code, but take your time\nand make sure you understand each part."),Object(o.b)("p",null,"A central part of your ",Object(o.b)("inlineCode",{parentName:"p"},"report.py")," program focuses on the reading of\nCSV files.  For example, the function ",Object(o.b)("inlineCode",{parentName:"p"},"read_portfolio()")," reads a file\ncontaining rows of portfolio data and the function ",Object(o.b)("inlineCode",{parentName:"p"},"read_prices()"),'\nreads a file containing rows of price data. In both of those\nfunctions, there are a lot of low-level "fiddly" bits and similar\nfeatures.  For example, they both open a file and wrap it with the\n',Object(o.b)("inlineCode",{parentName:"p"},"csv")," module and they both convert various fields into new types."),Object(o.b)("p",null,"If you were doing a lot of file parsing for real, you\u2019d probably want\nto clean some of this up and make it more general purpose.  That's\nour goal."),Object(o.b)("p",null,"Start this exercise by opening the file called\n",Object(o.b)("inlineCode",{parentName:"p"},"Work/fileparse.py"),". This is where we will be doing our work."),Object(o.b)("h3",{id:"exercise-33-reading-csv-files"},"Exercise 3.3: Reading CSV Files"),Object(o.b)("p",null,"To start, let\u2019s just focus on the problem of reading a CSV file into a\nlist of dictionaries.  In the file ",Object(o.b)("inlineCode",{parentName:"p"},"fileparse.py"),", define a\nfunction that looks like this:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"# fileparse.py\nimport csv\n\ndef parse_csv(filename):\n    '''\n    Parse a CSV file into a list of records\n    '''\n    with open(filename) as f:\n        rows = csv.reader(f)\n\n        # Read the file headers\n        headers = next(rows)\n        records = []\n        for row in rows:\n            if not row:    # Skip rows with no data\n                continue\n            record = dict(zip(headers, row))\n            records.append(record)\n\n    return records\n")),Object(o.b)("p",null,"This function reads a CSV file into a list of dictionaries while\nhiding the details of opening the file, wrapping it with the ",Object(o.b)("inlineCode",{parentName:"p"},"csv"),"\nmodule, ignoring blank lines, and so forth."),Object(o.b)("p",null,"Try it out:"),Object(o.b)("p",null,"Hint: ",Object(o.b)("inlineCode",{parentName:"p"},"python3 -i fileparse.py"),"."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},">>> portfolio = parse_csv('Data/portfolio.csv')\n>>> portfolio\n[{'price': '32.20', 'name': 'AA', 'shares': '100'}, {'price': '91.10', 'name': 'IBM', 'shares': '50'}, {'price': '83.44', 'name': 'CAT', 'shares': '150'}, {'price': '51.23', 'name': 'MSFT', 'shares': '200'}, {'price': '40.37', 'name': 'GE', 'shares': '95'}, {'price': '65.10', 'name': 'MSFT', 'shares': '50'}, {'price': '70.44', 'name': 'IBM', 'shares': '100'}]\n>>>\n")),Object(o.b)("p",null,"This is good except that you can\u2019t do any kind of useful calculation\nwith the data because everything is represented as a string.  We\u2019ll\nfix this shortly, but let\u2019s keep building on it."),Object(o.b)("h3",{id:"exercise-34-building-a-column-selector"},"Exercise 3.4: Building a Column Selector"),Object(o.b)("p",null,"In many cases, you\u2019re only interested in selected columns from a CSV\nfile, not all of the data.  Modify the ",Object(o.b)("inlineCode",{parentName:"p"},"parse_csv()")," function so that\nit optionally allows user-specified columns to be picked out as\nfollows:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},">>> # Read all of the data\n>>> portfolio = parse_csv('Data/portfolio.csv')\n>>> portfolio\n[{'price': '32.20', 'name': 'AA', 'shares': '100'}, {'price': '91.10', 'name': 'IBM', 'shares': '50'}, {'price': '83.44', 'name': 'CAT', 'shares': '150'}, {'price': '51.23', 'name': 'MSFT', 'shares': '200'}, {'price': '40.37', 'name': 'GE', 'shares': '95'}, {'price': '65.10', 'name': 'MSFT', 'shares': '50'}, {'price': '70.44', 'name': 'IBM', 'shares': '100'}]\n\n>>> # Read only some of the data\n>>> shares_held = parse_csv('Data/portfolio.csv', select=['name','shares'])\n>>> shares_held\n[{'name': 'AA', 'shares': '100'}, {'name': 'IBM', 'shares': '50'}, {'name': 'CAT', 'shares': '150'}, {'name': 'MSFT', 'shares': '200'}, {'name': 'GE', 'shares': '95'}, {'name': 'MSFT', 'shares': '50'}, {'name': 'IBM', 'shares': '100'}]\n>>>\n")),Object(o.b)("p",null,"An example of a column selector was given in ",Object(o.b)("a",{parentName:"p",href:"/docs/python/working_with_data/list_comprehension"},"Exercise 2.23"),".\nHowever, here\u2019s one way to do it:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"# fileparse.py\nimport csv\n\ndef parse_csv(filename, select=None):\n    '''\n    Parse a CSV file into a list of records\n    '''\n    with open(filename) as f:\n        rows = csv.reader(f)\n\n        # Read the file headers\n        headers = next(rows)\n\n        # If a column selector was given, find indices of the specified columns.\n        # Also narrow the set of headers used for resulting dictionaries\n        if select:\n            indices = [headers.index(colname) for colname in select]\n            headers = select\n        else:\n            indices = []\n\n        records = []\n        for row in rows:\n            if not row:    # Skip rows with no data\n                continue\n            # Filter the row if specific columns were selected\n            if indices:\n                row = [ row[index] for index in indices ]\n\n            # Make a dictionary\n            record = dict(zip(headers, row))\n            records.append(record)\n\n    return records\n")),Object(o.b)("p",null,"There are a number of tricky bits to this part. Probably the most\nimportant one is the mapping of the column selections to row indices.\nFor example, suppose the input file had the following headers:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},">>> headers = ['name', 'date', 'time', 'shares', 'price']\n>>>\n")),Object(o.b)("p",null,"Now, suppose the selected columns were as follows:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},">>> select = ['name', 'shares']\n>>>\n")),Object(o.b)("p",null,"To perform the proper selection, you have to map the selected column names to column indices in the file.\nThat\u2019s what this step is doing:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},">>> indices = [headers.index(colname) for colname in select ]\n>>> indices\n[0, 3]\n>>>\n")),Object(o.b)("p",null,'In other words, "name" is column 0 and "shares" is column 3.\nWhen you read a row of data from the file, the indices are used to filter it:'),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},">>> row = ['AA', '6/11/2007', '9:50am', '100', '32.20' ]\n>>> row = [ row[index] for index in indices ]\n>>> row\n['AA', '100']\n>>>\n")),Object(o.b)("h3",{id:"exercise-35-performing-type-conversion"},"Exercise 3.5: Performing Type Conversion"),Object(o.b)("p",null,"Modify the ",Object(o.b)("inlineCode",{parentName:"p"},"parse_csv()")," function so that it optionally allows\ntype-conversions to be applied to the returned data.  For example:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},">>> portfolio = parse_csv('Data/portfolio.csv', types=[str, int, float])\n>>> portfolio\n[{'price': 32.2, 'name': 'AA', 'shares': 100}, {'price': 91.1, 'name': 'IBM', 'shares': 50}, {'price': 83.44, 'name': 'CAT', 'shares': 150}, {'price': 51.23, 'name': 'MSFT', 'shares': 200}, {'price': 40.37, 'name': 'GE', 'shares': 95}, {'price': 65.1, 'name': 'MSFT', 'shares': 50}, {'price': 70.44, 'name': 'IBM', 'shares': 100}]\n\n>>> shares_held = parse_csv('Data/portfolio.csv', select=['name', 'shares'], types=[str, int])\n>>> shares_held\n[{'name': 'AA', 'shares': 100}, {'name': 'IBM', 'shares': 50}, {'name': 'CAT', 'shares': 150}, {'name': 'MSFT', 'shares': 200}, {'name': 'GE', 'shares': 95}, {'name': 'MSFT', 'shares': 50}, {'name': 'IBM', 'shares': 100}]\n>>>\n")),Object(o.b)("p",null,"You already explored this in ",Object(o.b)("a",{parentName:"p",href:"/docs/python/working_with_data/objects"},"Exercise 2.24"),".\nYou'll need to insert the following fragment of code into your solution:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"...\nif types:\n    row = [func(val) for func, val in zip(types, row) ]\n...\n")),Object(o.b)("h3",{id:"exercise-36-working-without-headers"},"Exercise 3.6: Working without Headers"),Object(o.b)("p",null,"Some CSV files don\u2019t include any header information.\nFor example, the file ",Object(o.b)("inlineCode",{parentName:"p"},"prices.csv")," looks like this:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-csv"},'"AA",9.22\n"AXP",24.85\n"BA",44.85\n"BAC",11.27\n...\n')),Object(o.b)("p",null,"Modify the ",Object(o.b)("inlineCode",{parentName:"p"},"parse_csv()")," function so that it can work with such files\nby creating a list of tuples instead.  For example:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},">>> prices = parse_csv('Data/prices.csv', types=[str,float], has_headers=False)\n>>> prices\n[('AA', 9.22), ('AXP', 24.85), ('BA', 44.85), ('BAC', 11.27), ('C', 3.72), ('CAT', 35.46), ('CVX', 66.67), ('DD', 28.47), ('DIS', 24.22), ('GE', 13.48), ('GM', 0.75), ('HD', 23.16), ('HPQ', 34.35), ('IBM', 106.28), ('INTC', 15.72), ('JNJ', 55.16), ('JPM', 36.9), ('KFT', 26.11), ('KO', 49.16), ('MCD', 58.99), ('MMM', 57.1), ('MRK', 27.58), ('MSFT', 20.89), ('PFE', 15.19), ('PG', 51.94), ('T', 24.79), ('UTX', 52.61), ('VZ', 29.26), ('WMT', 49.74), ('XOM', 69.35)]\n>>>\n")),Object(o.b)("p",null,"To make this change, you\u2019ll need to modify the code so that the first\nline of data isn\u2019t interpreted as a header line.  Also, you\u2019ll need to\nmake sure you don\u2019t create dictionaries as there are no longer any\ncolumn names to use for keys."),Object(o.b)("h3",{id:"exercise-37-picking-a-different-column-delimitier"},"Exercise 3.7: Picking a different column delimitier"),Object(o.b)("p",null,"Although CSV files are pretty common, it\u2019s also possible that you\ncould encounter a file that uses a different column separator such as\na tab or space.  For example, the file ",Object(o.b)("inlineCode",{parentName:"p"},"Data/portfolio.dat")," looks like\nthis:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-csv"},'name shares price\n"AA" 100 32.20\n"IBM" 50 91.10\n"CAT" 150 83.44\n"MSFT" 200 51.23\n"GE" 95 40.37\n"MSFT" 50 65.10\n"IBM" 100 70.44\n')),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"csv.reader()")," function allows a different column delimiter to be given as follows:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"rows = csv.reader(f, delimiter=' ')\n")),Object(o.b)("p",null,"Modify your ",Object(o.b)("inlineCode",{parentName:"p"},"parse_csv()")," function so that it also allows the\ndelimiter to be changed."),Object(o.b)("p",null,"For example:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},">>> portfolio = parse_csv('Data/portfolio.dat', types=[str, int, float], delimiter=' ')\n>>> portfolio\n[{'price': '32.20', 'name': 'AA', 'shares': '100'}, {'price': '91.10', 'name': 'IBM', 'shares': '50'}, {'price': '83.44', 'name': 'CAT', 'shares': '150'}, {'price': '51.23', 'name': 'MSFT', 'shares': '200'}, {'price': '40.37', 'name': 'GE', 'shares': '95'}, {'price': '65.10', 'name': 'MSFT', 'shares': '50'}, {'price': '70.44', 'name': 'IBM', 'shares': '100'}]\n>>>\n")),Object(o.b)("h3",{id:"commentary"},"Commentary"),Object(o.b)("p",null,"If you\u2019ve made it this far, you\u2019ve created a nice library function\nthat\u2019s genuinely useful.  You can use it to parse arbitrary CSV files,\nselect out columns of interest, perform type conversions, without\nhaving to worry too much about the inner workings of files or the\n",Object(o.b)("inlineCode",{parentName:"p"},"csv")," module."))}p.isMDXComponent=!0}}]);