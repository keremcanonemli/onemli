(window.webpackJsonp=window.webpackJsonp||[]).push([[181],{254:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return l})),t.d(n,"toc",(function(){return s})),t.d(n,"default",(function(){return p}));var r=t(3),a=t(8),o=(t(0),t(281)),i={id:"work_with_yaml_files",title:"Work With Yaml Files",sidebar_label:"Work With Yaml Files",slug:"work_with_yaml_files",custom_edit_url:null},l={unversionedId:"python/csv_json_yaml/work_with_yaml_files",id:"python/csv_json_yaml/work_with_yaml_files",isDocsHomePage:!1,title:"Work With Yaml Files",description:"YAML (YAML Ain\u2019t Markup Language) - another text format for writing data.",source:"@site/docs/python/csv_json_yaml/3_work_with_yaml.md",slug:"/python/csv_json_yaml/work_with_yaml_files",permalink:"/tr/docs/python/csv_json_yaml/work_with_yaml_files",editUrl:null,version:"current",sidebar_label:"Work With Yaml Files",sidebar:"someSidebar",previous:{title:"Work With Json Files",permalink:"/tr/docs/python/csv_json_yaml/work_with_json_files"},next:{title:"Further Reading",permalink:"/tr/docs/python/csv_json_yaml/further_reading"}},s=[{value:"YAML syntax",id:"yaml-syntax",children:[{value:"List",id:"list",children:[]},{value:"Dictionary",id:"dictionary",children:[]},{value:"Strings",id:"strings",children:[]},{value:"Combination of elements",id:"combination-of-elements",children:[]}]},{value:"PyYAML module",id:"pyyaml-module",children:[{value:"Reading from YAML",id:"reading-from-yaml",children:[]},{value:"Writing to YAML",id:"writing-to-yaml",children:[]}]}],c={toc:s};function p(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"YAML (YAML Ain\u2019t Markup Language)")," - another text format for writing data."),Object(o.b)("p",null,"YAML is more human-friendly than JSON, so it is often used to describe actions in software. Playbooks in Ansible, for example."),Object(o.b)("h2",{id:"yaml-syntax"},"YAML syntax"),Object(o.b)("p",null,"Like Python, YAML uses indents to specify the structure of document. But YAML can only use spaces and cannot use tabs. Another similarity with Python is that comments start with ",Object(o.b)("inlineCode",{parentName:"p"},"#")," and continue until the end of line."),Object(o.b)("h3",{id:"list"},"List"),Object(o.b)("p",null,"A list can be written in one line:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"[switchport mode access, switchport access vlan, switchport nonegotiate, spanning-tree portfast, spanning-tree bpduguard enable]\n")),Object(o.b)("p",null,"Or every item in the list in separate row:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"- switchport mode access\n- switchport access vlan\n- switchport nonegotiate\n- spanning-tree portfast\n- spanning-tree bpduguard enable\n")),Object(o.b)("p",null,"When a list is written in such a block, each row must start with ",Object(o.b)("a",{parentName:"p",href:"https://pyneng.readthedocs.io/en/latest/book/17_serialization/yaml.html#id1"},"``"),"- `` (minus and space) and all lines in the list must be at the same indentation level."),Object(o.b)("h3",{id:"dictionary"},"Dictionary"),Object(o.b)("p",null,"A dictionary can also be written in one line:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{vlan: 100, name: IT}\n")),Object(o.b)("p",null,"Or a block:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"vlan: 100\nname: IT\n")),Object(o.b)("h3",{id:"strings"},"Strings"),Object(o.b)("p",null,"Strings in YAML don\u2019t have to be quoted. This is convenient, but sometimes quotes should be used. For example, when a special character (special for YAML) is used in a string."),Object(o.b)("p",null,"This line, for example, should be quoted to be correctly understood by YAML:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'command: "sh interface | include Queueing strategy:"\n')),Object(o.b)("h3",{id:"combination-of-elements"},"Combination of elements"),Object(o.b)("p",null,"A dictionary with two keys: access and trunk. Values that correspond to these keys - command lists:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"access:\n- switchport mode access\n- switchport access vlan\n- switchport nonegotiate\n- spanning-tree portfast\n- spanning-tree bpduguard enable\n\ntrunk:\n- switchport trunk encapsulation dot1q\n- switchport mode trunk\n- switchport trunk native vlan 999\n- switchport trunk allowed vlan\n")),Object(o.b)("p",null,"List of dictionaries:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"- BS: 1550\n  IT: 791\n  id: 11\n  name: Liverpool\n  to_id: 1\n  to_name: LONDON\n- BS: 1510\n  IT: 793\n  id: 12\n  name: Bristol\n  to_id: 1\n  to_name: LONDON\n- BS: 1650\n  IT: 892\n  id: 14\n  name: Coventry\n  to_id: 2\n  to_name: Manchester\n")),Object(o.b)("h2",{id:"pyyaml-module"},"PyYAML module"),Object(o.b)("p",null,"Python uses a PyYAML module to work with YAML. It is not part of the standard module library, so it needs to be installed:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"pip install pyyaml\n")),Object(o.b)("p",null,"Work with it is similar to csv and json modules."),Object(o.b)("h3",{id:"reading-from-yaml"},"Reading from YAML"),Object(o.b)("p",null,"Converting data from YAML file to Python objects (info.yaml file):"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"- BS: 1550\n  IT: 791\n  id: 11\n  name: Liverpool\n  to_id: 1\n  to_name: LONDON\n- BS: 1510\n  IT: 793\n  id: 12\n  name: Bristol\n  to_id: 1\n  to_name: LONDON\n- BS: 1650\n  IT: 892\n  id: 14\n  name: Coventry\n  to_id: 2\n  to_name: Manchester\n")),Object(o.b)("p",null,"Reading from YAML (yaml_read.py file):"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"import yaml\nfrom pprint import pprint\n\nwith open('info.yaml') as f:\n    templates = yaml.safe_load(f)\n\npprint(templates)\n")),Object(o.b)("p",null,"The result is:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"$ python yaml_read.py\n[{'BS': 1550,\n  'IT': 791,\n  'id': 11,\n  'name': 'Liverpool',\n  'to_id': 1,\n  'to_name': 'LONDON'},\n {'BS': 1510,\n  'IT': 793,\n  'id': 12,\n  'name': 'Bristol',\n  'to_id': 1,\n  'to_name': 'LONDON'},\n {'BS': 1650,\n  'IT': 892,\n  'id': 14,\n  'name': 'Coventry',\n  'to_id': 2,\n  'to_name': 'Manchester'}]\n")),Object(o.b)("p",null,"YAML format is very convenient for storing different parameters, especially if they are filled manually."),Object(o.b)("h3",{id:"writing-to-yaml"},"Writing to YAML"),Object(o.b)("p",null,"Write Python objects to YAML (yaml_write.py file):"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"import yaml\n\ntrunk_template = [\n    'switchport trunk encapsulation dot1q', 'switchport mode trunk',\n    'switchport trunk native vlan 999', 'switchport trunk allowed vlan'\n]\n\naccess_template = [\n    'switchport mode access', 'switchport access vlan',\n    'switchport nonegotiate', 'spanning-tree portfast',\n    'spanning-tree bpduguard enable'\n]\n\nto_yaml = {'trunk': trunk_template, 'access': access_template}\n\nwith open('sw_templates.yaml', 'w') as f:\n    yaml.dump(to_yaml, f, default_flow_style=False)\n\nwith open('sw_templates.yaml') as f:\n    print(f.read())\n")),Object(o.b)("p",null,"File sw_templates.yaml:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"access:\n- switchport mode access\n- switchport access vlan\n- switchport nonegotiate\n- spanning-tree portfast\n- spanning-tree bpduguard enable\ntrunk:\n- switchport trunk encapsulation dot1q\n- switchport mode trunk\n- switchport trunk native vlan 999\n- switchport trunk allowed vlan\n")))}p.isMDXComponent=!0},281:function(e,n,t){"use strict";t.d(n,"a",(function(){return u})),t.d(n,"b",(function(){return d}));var r=t(0),a=t.n(r);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=a.a.createContext({}),p=function(e){var n=a.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=p(e.components);return a.a.createElement(c.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},b=a.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(t),b=r,d=u["".concat(i,".").concat(b)]||u[b]||m[b]||o;return t?a.a.createElement(d,l(l({ref:n},c),{},{components:t})):a.a.createElement(d,l({ref:n},c))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=b;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=t[c];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"}}]);