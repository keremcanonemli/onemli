(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{102:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return s})),t.d(n,"toc",(function(){return c})),t.d(n,"default",(function(){return p}));var i=t(3),r=t(8),a=(t(0),t(121)),o={id:"design_discussion",title:"Design Discussion",sidebar_label:"3.6 Design Discussion",slug:"design_discussion",custom_edit_url:null},s={unversionedId:"python/program_organization/design_discussion",id:"python/program_organization/design_discussion",isDocsHomePage:!1,title:"Design Discussion",description:"Filenames versus Iterables",source:"@site/docs/python/program_organization/06_Design_discussion.md",slug:"/python/program_organization/design_discussion",permalink:"/docs/python/program_organization/design_discussion",editUrl:null,version:"current",sidebar_label:"3.6 Design Discussion",sidebar:"someSidebar",previous:{title:"Main Module",permalink:"/docs/python/program_organization/main_module"},next:{title:"Class",permalink:"/docs/python/classes_objects/class"}},c=[{value:"Filenames versus Iterables",id:"filenames-versus-iterables",children:[]},{value:"Deep Idea: &quot;Duck Typing&quot;",id:"deep-idea-duck-typing",children:[]},{value:"Library Design Best Practices",id:"library-design-best-practices",children:[]},{value:"Exercise",id:"exercise",children:[{value:"Exercise 3.17: From filenames to file-like objects",id:"exercise-317-from-filenames-to-file-like-objects",children:[]},{value:"Exercise 3.18: Fixing existing functions",id:"exercise-318-fixing-existing-functions",children:[]}]}],l={toc:c};function p(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(a.b)("wrapper",Object(i.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("h3",{id:"filenames-versus-iterables"},"Filenames versus Iterables"),Object(a.b)("p",null,"Compare these two programs that return the same output."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"# Provide a filename\ndef read_data(filename):\n    records = []\n    with open(filename) as f:\n        for line in f:\n            ...\n            records.append(r)\n    return records\n\nd = read_data('file.csv')\n")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"# Provide lines\ndef read_data(lines):\n    records = []\n    for line in lines:\n        ...\n        records.append(r)\n    return records\n\nwith open('file.csv') as f:\n    d = read_data(f)\n")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Which of these functions do you prefer? Why?"),Object(a.b)("li",{parentName:"ul"},"Which of these functions is more flexible?")),Object(a.b)("h3",{id:"deep-idea-duck-typing"},'Deep Idea: "Duck Typing"'),Object(a.b)("p",null,Object(a.b)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Duck_typing"},"Duck Typing")," is a computer\nprogramming concept to determine whether an object can be used for a\nparticular purpose.  It is an application of the ",Object(a.b)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Duck_test"},"duck\ntest"),"."),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"If it looks like a duck, swims like a duck, and quacks like a duck, then it probably is a duck.")),Object(a.b)("p",null,"In the second version of ",Object(a.b)("inlineCode",{parentName:"p"},"read_data()")," above, the function expects any\niterable object. Not just the lines of a file."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"def read_data(lines):\n    records = []\n    for line in lines:\n        ...\n        records.append(r)\n    return records\n")),Object(a.b)("p",null,"This means that we can use it with other ",Object(a.b)("em",{parentName:"p"},"lines"),"."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"# A CSV file\nlines = open('data.csv')\ndata = read_data(lines)\n\n# A zipped file\nlines = gzip.open('data.csv.gz','rt')\ndata = read_data(lines)\n\n# The Standard Input\nlines = sys.stdin\ndata = read_data(lines)\n\n# A list of strings\nlines = ['ACME,50,91.1','IBM,75,123.45', ... ]\ndata = read_data(lines)\n")),Object(a.b)("p",null,"There is considerable flexibility with this design."),Object(a.b)("p",null,Object(a.b)("em",{parentName:"p"},"Question: Should we embrace or fight this flexibility?")),Object(a.b)("h3",{id:"library-design-best-practices"},"Library Design Best Practices"),Object(a.b)("p",null,"Code libraries are often better served by embracing flexibility.\nDon't restrict your options.  With great flexibility comes great power."),Object(a.b)("h2",{id:"exercise"},"Exercise"),Object(a.b)("h3",{id:"exercise-317-from-filenames-to-file-like-objects"},"Exercise 3.17: From filenames to file-like objects"),Object(a.b)("p",null,"You've now created a file ",Object(a.b)("inlineCode",{parentName:"p"},"fileparse.py")," that contained a\nfunction ",Object(a.b)("inlineCode",{parentName:"p"},"parse_csv()"),".  The function worked like this:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},">>> import fileparse\n>>> portfolio = fileparse.parse_csv('Data/portfolio.csv', types=[str,int,float])\n>>>\n")),Object(a.b)("p",null,"Right now, the function expects to be passed a filename.  However, you\ncan make the code more flexible.  Modify the function so that it works\nwith any file-like/iterable object.  For example:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre"},">>> import fileparse\n>>> import gzip\n>>> with gzip.open('Data/portfolio.csv.gz', 'rt') as file:\n...      port = fileparse.parse_csv(file, types=[str,int,float])\n...\n>>> lines = ['name,shares,price', 'AA,100,34.23', 'IBM,50,91.1', 'HPE,75,45.1']\n>>> port = fileparse.parse_csv(lines, types=[str,int,float])\n>>>\n")),Object(a.b)("p",null,"In this new code, what happens if you pass a filename as before?"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre"},">>> port = fileparse.parse_csv('Data/portfolio.csv', types=[str,int,float])\n>>> port\n... look at output (it should be crazy) ...\n>>>\n")),Object(a.b)("p",null,"Yes, you'll need to be careful.   Could you add a safety check to avoid this?"),Object(a.b)("h3",{id:"exercise-318-fixing-existing-functions"},"Exercise 3.18: Fixing existing functions"),Object(a.b)("p",null,"Fix the ",Object(a.b)("inlineCode",{parentName:"p"},"read_portfolio()")," and ",Object(a.b)("inlineCode",{parentName:"p"},"read_prices()")," functions in the\n",Object(a.b)("inlineCode",{parentName:"p"},"report.py")," file so that they work with the modified version of\n",Object(a.b)("inlineCode",{parentName:"p"},"parse_csv()"),".  This should only involve a minor modification.\nAfterwards, your ",Object(a.b)("inlineCode",{parentName:"p"},"report.py")," and ",Object(a.b)("inlineCode",{parentName:"p"},"pcost.py")," programs should work\nthe same way they always did."))}p.isMDXComponent=!0},121:function(e,n,t){"use strict";t.d(n,"a",(function(){return d})),t.d(n,"b",(function(){return f}));var i=t(0),r=t.n(i);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=r.a.createContext({}),p=function(e){var n=r.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},d=function(e){var n=p(e.components);return r.a.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},b=r.a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,o=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=p(t),b=i,f=d["".concat(o,".").concat(b)]||d[b]||u[b]||a;return t?r.a.createElement(f,s(s({ref:n},l),{},{components:t})):r.a.createElement(f,s({ref:n},l))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=b;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var l=2;l<a;l++)o[l]=t[l];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"}}]);