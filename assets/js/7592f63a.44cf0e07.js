(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{100:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return c})),t.d(n,"toc",(function(){return s})),t.d(n,"default",(function(){return p}));var r=t(3),a=t(8),o=(t(0),t(122)),i={id:"error_checking",title:"Error Checking",sidebar_label:"3.3 Error Checking",slug:"error_checking",custom_edit_url:null},c={unversionedId:"python/program_organization/error_checking",id:"python/program_organization/error_checking",isDocsHomePage:!1,title:"Error Checking",description:"Although exceptions were introduced earlier, this section fills in some additional",source:"@site/docs/python/program_organization/03_Error_checking.md",slug:"/python/program_organization/error_checking",permalink:"/docs/python/program_organization/error_checking",editUrl:null,version:"current",sidebar_label:"3.3 Error Checking",sidebar:"someSidebar",previous:{title:"More on Functions",permalink:"/docs/python/program_organization/more_on_functions"},next:{title:"Modules",permalink:"/docs/python/program_organization/modules"}},s=[{value:"How programs fail",id:"how-programs-fail",children:[]},{value:"Exceptions",id:"exceptions",children:[]},{value:"Exception Handling",id:"exception-handling",children:[]},{value:"Built-in Exceptions",id:"built-in-exceptions",children:[]},{value:"Exception Values",id:"exception-values",children:[]},{value:"Catching Multiple Errors",id:"catching-multiple-errors",children:[]},{value:"Catching All Errors",id:"catching-all-errors",children:[]},{value:"Wrong Way to Catch Errors",id:"wrong-way-to-catch-errors",children:[]},{value:"Somewhat Better Approach",id:"somewhat-better-approach",children:[]},{value:"Reraising an Exception",id:"reraising-an-exception",children:[]},{value:"Exception Best Practices",id:"exception-best-practices",children:[]},{value:"<code>finally</code> statement",id:"finally-statement",children:[]},{value:"<code>with</code> statement",id:"with-statement",children:[]},{value:"Exercises",id:"exercises",children:[{value:"Exercise 3.8: Raising exceptions",id:"exercise-38-raising-exceptions",children:[]},{value:"Exercise 3.9: Catching exceptions",id:"exercise-39-catching-exceptions",children:[]},{value:"Exercise 3.10: Silencing Errors",id:"exercise-310-silencing-errors",children:[]}]}],l={toc:s};function p(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Although exceptions were introduced earlier, this section fills in some additional\ndetails about error checking and exception handling."),Object(o.b)("h3",{id:"how-programs-fail"},"How programs fail"),Object(o.b)("p",null,"Python performs no checking or validation of function argument types\nor values.  A function will work on any data that is compatible with\nthe statements in the function."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"def add(x, y):\n    return x + y\n\nadd(3, 4)               # 7\nadd('Hello', 'World')   # 'HelloWorld'\nadd('3', '4')           # '34'\n")),Object(o.b)("p",null,"If there are errors in a function, they appear at run time (as an exception)."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"def add(x, y):\n    return x + y\n\n>>> add(3, '4')\nTraceback (most recent call last):\n...\nTypeError: unsupported operand type(s) for +:\n'int' and 'str'\n>>>\n")),Object(o.b)("p",null,"To verify code, there is a strong emphasis on testing (covered later)."),Object(o.b)("h3",{id:"exceptions"},"Exceptions"),Object(o.b)("p",null,"Exceptions are used to signal errors.\nTo raise an exception yourself, use ",Object(o.b)("inlineCode",{parentName:"p"},"raise")," statement."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"if name not in authorized:\n    raise RuntimeError(f'{name} not authorized')\n")),Object(o.b)("p",null,"To catch an exception use ",Object(o.b)("inlineCode",{parentName:"p"},"try-except"),"."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"try:\n    authenticate(username)\nexcept RuntimeError as e:\n    print(e)\n")),Object(o.b)("h3",{id:"exception-handling"},"Exception Handling"),Object(o.b)("p",null,"Exceptions propagate to the first matching ",Object(o.b)("inlineCode",{parentName:"p"},"except"),"."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"def grok():\n    ...\n    raise RuntimeError('Whoa!')   # Exception raised here\n\ndef spam():\n    grok()                        # Call that will raise exception\n\ndef bar():\n    try:\n       spam()\n    except RuntimeError as e:     # Exception caught here\n        ...\n\ndef foo():\n    try:\n         bar()\n    except RuntimeError as e:     # Exception does NOT arrive here\n        ...\n\nfoo()\n")),Object(o.b)("p",null,"To handle the exception, put statements in the ",Object(o.b)("inlineCode",{parentName:"p"},"except")," block. You can add any\nstatements you want to handle the error."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"def grok(): ...\n    raise RuntimeError('Whoa!')\n\ndef bar():\n    try:\n      grok()\n    except RuntimeError as e:   # Exception caught here\n        statements              # Use this statements\n        statements\n        ...\n\nbar()\n")),Object(o.b)("p",null,"After handling, execution resumes with the first statement after the\n",Object(o.b)("inlineCode",{parentName:"p"},"try-except"),"."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"def grok(): ...\n    raise RuntimeError('Whoa!')\n\ndef bar():\n    try:\n      grok()\n    except RuntimeError as e:   # Exception caught here\n        statements\n        statements\n        ...\n    statements                  # Resumes execution here\n    statements                  # And continues here\n    ...\n\nbar()\n")),Object(o.b)("h3",{id:"built-in-exceptions"},"Built-in Exceptions"),Object(o.b)("p",null,"There are about two-dozen built-in exceptions.  Usually the name of\nthe exception is indicative of what's wrong (e.g., a ",Object(o.b)("inlineCode",{parentName:"p"},"ValueError")," is\nraised because you supplied a bad value). This is not an\nexhaustive list. Check the ",Object(o.b)("a",{parentName:"p",href:"https://docs.python.org/3/library/exceptions.html"},"documentation")," for more."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"ArithmeticError\nAssertionError\nEnvironmentError\nEOFError\nImportError\nIndexError\nKeyboardInterrupt\nKeyError\nMemoryError\nNameError\nReferenceError\nRuntimeError\nSyntaxError\nSystemError\nTypeError\nValueError\n")),Object(o.b)("h3",{id:"exception-values"},"Exception Values"),Object(o.b)("p",null,"Exceptions have an associated value. It contains more specific\ninformation about what's wrong."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"raise RuntimeError('Invalid user name')\n")),Object(o.b)("p",null,"This value is part of the exception instance that's placed in the variable supplied to ",Object(o.b)("inlineCode",{parentName:"p"},"except"),"."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"try:\n    ...\nexcept RuntimeError as e:   # `e` holds the exception raised\n    ...\n")),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"e")," is an instance of the exception type. However, it often looks like a string when\nprinted."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"except RuntimeError as e:\n    print('Failed : Reason', e)\n")),Object(o.b)("h3",{id:"catching-multiple-errors"},"Catching Multiple Errors"),Object(o.b)("p",null,"You can catch different kinds of exceptions using multiple ",Object(o.b)("inlineCode",{parentName:"p"},"except")," blocks."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"try:\n  ...\nexcept LookupError as e:\n  ...\nexcept RuntimeError as e:\n  ...\nexcept IOError as e:\n  ...\nexcept KeyboardInterrupt as e:\n  ...\n")),Object(o.b)("p",null,"Alternatively, if the statements to handle them is the same, you can group them:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"try:\n  ...\nexcept (IOError,LookupError,RuntimeError) as e:\n  ...\n")),Object(o.b)("h3",{id:"catching-all-errors"},"Catching All Errors"),Object(o.b)("p",null,"To catch any exception, use ",Object(o.b)("inlineCode",{parentName:"p"},"Exception")," like this:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"try:\n    ...\nexcept Exception:       # DANGER. See below\n    print('An error occurred')\n")),Object(o.b)("p",null,"In general, writing code like that is a bad idea because you'll have\nno idea why it failed."),Object(o.b)("h3",{id:"wrong-way-to-catch-errors"},"Wrong Way to Catch Errors"),Object(o.b)("p",null,"Here is the wrong way to use exceptions."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"try:\n    go_do_something()\nexcept Exception:\n    print('Computer says no')\n")),Object(o.b)("p",null,"This catches all possible errors and it may make it impossible to debug\nwhen the code is failing for some reason you didn't expect at all\n(e.g. uninstalled Python module, etc.)."),Object(o.b)("h3",{id:"somewhat-better-approach"},"Somewhat Better Approach"),Object(o.b)("p",null,"If you're going to catch all errors, this is a more sane approach."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"try:\n    go_do_something()\nexcept Exception as e:\n    print('Computer says no. Reason :', e)\n")),Object(o.b)("p",null,"It reports a specific reason for failure.  It is almost always a good\nidea to have some mechanism for viewing/reporting errors when you\nwrite code that catches all possible exceptions."),Object(o.b)("p",null,"In general though, it's better to catch the error as narrowly as is\nreasonable. Only catch the errors you can actually handle. Let\nother errors pass by--maybe some other code can handle them."),Object(o.b)("h3",{id:"reraising-an-exception"},"Reraising an Exception"),Object(o.b)("p",null,"Use ",Object(o.b)("inlineCode",{parentName:"p"},"raise")," to propagate a caught error."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"try:\n    go_do_something()\nexcept Exception as e:\n    print('Computer says no. Reason :', e)\n    raise\n")),Object(o.b)("p",null,"This allows you to take action (e.g. logging) and pass the error on to\nthe caller."),Object(o.b)("h3",{id:"exception-best-practices"},"Exception Best Practices"),Object(o.b)("p",null,"Don't catch exceptions. Fail fast and loud. If it's important, someone\nelse will take care of the problem.  Only catch an exception if you\nare ",Object(o.b)("em",{parentName:"p"},"that")," someone.  That is, only catch errors where you can recover\nand sanely keep going."),Object(o.b)("h3",{id:"finally-statement"},Object(o.b)("inlineCode",{parentName:"h3"},"finally")," statement"),Object(o.b)("p",null,"It specifies code that must run regardless of whether or not an\nexception occurs."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"lock = Lock()\n...\nlock.acquire()\ntry:\n    ...\nfinally:\n    lock.release()  # this will ALWAYS be executed. With and without exception.\n")),Object(o.b)("p",null,"Commonly used to safely manage resources (especially locks, files, etc.)."),Object(o.b)("h3",{id:"with-statement"},Object(o.b)("inlineCode",{parentName:"h3"},"with")," statement"),Object(o.b)("p",null,"In modern code, ",Object(o.b)("inlineCode",{parentName:"p"},"try-finally")," is often replaced with the ",Object(o.b)("inlineCode",{parentName:"p"},"with")," statement."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"lock = Lock()\nwith lock:\n    # lock acquired\n    ...\n# lock released\n")),Object(o.b)("p",null,"A more familiar example:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"with open(filename) as f:\n    # Use the file\n    ...\n# File closed\n")),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"with")," defines a usage ",Object(o.b)("em",{parentName:"p"},"context")," for a resource.  When execution\nleaves that context, resources are released. ",Object(o.b)("inlineCode",{parentName:"p"},"with")," only works with\ncertain objects that have been specifically programmed to support it."),Object(o.b)("h2",{id:"exercises"},"Exercises"),Object(o.b)("h3",{id:"exercise-38-raising-exceptions"},"Exercise 3.8: Raising exceptions"),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"parse_csv()")," function you wrote in the last section allows\nuser-specified columns to be selected, but that only works if the\ninput data file has column headers."),Object(o.b)("p",null,"Modify the code so that an exception gets raised if both the ",Object(o.b)("inlineCode",{parentName:"p"},"select"),"\nand ",Object(o.b)("inlineCode",{parentName:"p"},"has_headers=False")," arguments are passed.  For example:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},">>> parse_csv('Data/prices.csv', select=['name','price'], has_headers=False)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"fileparse.py\", line 9, in parse_csv\n    raise RuntimeError(\"select argument requires column headers\")\nRuntimeError: select argument requires column headers\n>>>\n")),Object(o.b)("p",null,"Having added this one check, you might ask if you should be performing\nother kinds of sanity checks in the function.  For example, should you\ncheck that the filename is a string, that types is a list, or anything\nof that nature?"),Object(o.b)("p",null,"As a general rule, it\u2019s usually best to skip such tests and to just\nlet the program fail on bad inputs.  The traceback message will point\nat the source of the problem and can assist in debugging."),Object(o.b)("p",null,"The main reason for adding the above check is to avoid running the code\nin a non-sensical mode (e.g., using a feature that requires column\nheaders, but simultaneously specifying that there are no headers)."),Object(o.b)("p",null,'This indicates a programming error on the part of the calling code.\nChecking for cases that "aren\'t supposed to happen" is often a good idea.'),Object(o.b)("h3",{id:"exercise-39-catching-exceptions"},"Exercise 3.9: Catching exceptions"),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"parse_csv()")," function you wrote is used to process the entire\ncontents of a file.  However, in the real-world, it\u2019s possible that\ninput files might have corrupted, missing, or dirty data.  Try this\nexperiment:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},">>> portfolio = parse_csv('Data/missing.csv', types=[str, int, float])\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"fileparse.py\", line 36, in parse_csv\n    row = [func(val) for func, val in zip(types, row)]\nValueError: invalid literal for int() with base 10: ''\n>>>\n")),Object(o.b)("p",null,"Modify the ",Object(o.b)("inlineCode",{parentName:"p"},"parse_csv()")," function to catch all ",Object(o.b)("inlineCode",{parentName:"p"},"ValueError")," exceptions\ngenerated during record creation and print a warning message for rows\nthat can\u2019t be converted."),Object(o.b)("p",null,"The message should include the row number and information about the\nreason why it failed.  To test your function, try reading the file\n",Object(o.b)("inlineCode",{parentName:"p"},"Data/missing.csv")," above.  For example:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},">>> portfolio = parse_csv('Data/missing.csv', types=[str, int, float])\nRow 4: Couldn't convert ['MSFT', '', '51.23']\nRow 4: Reason invalid literal for int() with base 10: ''\nRow 7: Couldn't convert ['IBM', '', '70.44']\nRow 7: Reason invalid literal for int() with base 10: ''\n>>>\n>>> portfolio\n[{'price': 32.2, 'name': 'AA', 'shares': 100}, {'price': 91.1, 'name': 'IBM', 'shares': 50}, {'price': 83.44, 'name': 'CAT', 'shares': 150}, {'price': 40.37, 'name': 'GE', 'shares': 95}, {'price': 65.1, 'name': 'MSFT', 'shares': 50}]\n>>>\n")),Object(o.b)("h3",{id:"exercise-310-silencing-errors"},"Exercise 3.10: Silencing Errors"),Object(o.b)("p",null,"Modify the ",Object(o.b)("inlineCode",{parentName:"p"},"parse_csv()")," function so that parsing error messages can\nbe silenced if explicitly desired by the user.  For example:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},">>> portfolio = parse_csv('Data/missing.csv', types=[str,int,float], silence_errors=True)\n>>> portfolio\n[{'price': 32.2, 'name': 'AA', 'shares': 100}, {'price': 91.1, 'name': 'IBM', 'shares': 50}, {'price': 83.44, 'name': 'CAT', 'shares': 150}, {'price': 40.37, 'name': 'GE', 'shares': 95}, {'price': 65.1, 'name': 'MSFT', 'shares': 50}]\n>>>\n")),Object(o.b)("p",null,"Error handling is one of the most difficult things to get right in\nmost programs.  As a general rule, you shouldn\u2019t silently ignore\nerrors.  Instead, it\u2019s better to report problems and to give the user\nan option to the silence the error message if they choose to do so."))}p.isMDXComponent=!0},122:function(e,n,t){"use strict";t.d(n,"a",(function(){return u})),t.d(n,"b",(function(){return d}));var r=t(0),a=t.n(r);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=a.a.createContext({}),p=function(e){var n=a.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},u=function(e){var n=p(e.components);return a.a.createElement(l.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},h=a.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=p(t),h=r,d=u["".concat(i,".").concat(h)]||u[h]||b[h]||o;return t?a.a.createElement(d,c(c({ref:n},l),{},{components:t})):a.a.createElement(d,c({ref:n},l))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=h;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var l=2;l<o;l++)i[l]=t[l];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,t)}h.displayName="MDXCreateElement"}}]);