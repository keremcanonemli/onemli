(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{280:function(e,n,t){"use strict";t.d(n,"a",(function(){return l})),t.d(n,"b",(function(){return b}));var r=t(0),s=t.n(r);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,s=function(e,n){if(null==e)return{};var t,r,s={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var d=s.a.createContext({}),c=function(e){var n=s.a.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},l=function(e){var n=c(e.components);return s.a.createElement(d.Provider,{value:n},e.children)},_={inlineCode:"code",wrapper:function(e){var n=e.children;return s.a.createElement(s.a.Fragment,{},n)}},u=s.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),l=c(t),u=r,b=l["".concat(i,".").concat(u)]||l[u]||_[u]||o;return t?s.a.createElement(b,a(a({ref:n},d),{},{components:t})):s.a.createElement(b,a({ref:n},d))}));function b(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=u;var a={};for(var p in n)hasOwnProperty.call(n,p)&&(a[p]=n[p]);a.originalType=e,a.mdxType="string"==typeof e?e:r,i[1]=a;for(var d=2;d<o;d++)i[d]=t[d];return s.a.createElement.apply(null,i)}return s.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},85:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return a})),t.d(n,"toc",(function(){return p})),t.d(n,"default",(function(){return c}));var r=t(3),s=t(8),o=(t(0),t(280)),i={id:"methods_str_and_repr",title:"Methods Str And Repr",sidebar_label:"23.2 Methods Str And Repr",slug:"methods_str_and_repr",custom_edit_url:null},a={unversionedId:"python/oop_special_methods/methods_str_and_repr",id:"python/oop_special_methods/methods_str_and_repr",isDocsHomePage:!1,title:"Methods Str And Repr",description:"Methods str, repr",source:"@site/docs/python/oop_special_methods/2_methods__str.md",slug:"/python/oop_special_methods/methods_str_and_repr",permalink:"/tr/docs/python/oop_special_methods/methods_str_and_repr",editUrl:null,version:"current",sidebar_label:"23.2 Methods Str And Repr",sidebar:"someSidebar",previous:{title:"Underscore In Names",permalink:"/tr/docs/python/oop_special_methods/underscore_in_names"},next:{title:"Arithmetic Operator Support",permalink:"/tr/docs/python/oop_special_methods/arithmetic_operator_support"}},p=[{value:"Methods <code>__str__</code>, <code>__repr__</code>",id:"methods-__str__-__repr__",children:[]}],d={toc:p};function c(e){var n=e.components,t=Object(s.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},d,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"methods-__str__-__repr__"},"Methods ",Object(o.b)("inlineCode",{parentName:"h2"},"__str__"),", ",Object(o.b)("inlineCode",{parentName:"h2"},"__repr__")),Object(o.b)("p",null,"Special methods ",Object(o.b)("inlineCode",{parentName:"p"},"__str__")," and ",Object(o.b)("inlineCode",{parentName:"p"},"__repr__")," are responsible for string representation of the object. They are used in different places."),Object(o.b)("p",null,"Consider example of IPAddress class that is responsible for representing IPv4 address:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"class IPAddress:\n    def __init__(self, ip):\n        self.ip = ip\n")),Object(o.b)("p",null,"After creating class instances, they have a default string view that looks like this (the same output is displayed when ",Object(o.b)("inlineCode",{parentName:"p"},"print")," is used):"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"In [2]: ip1 = IPAddress('10.1.1.1')\n\nIn [3]: ip2 = IPAddress('10.2.2.2')\n\nIn [4]: str(ip1)\nOut[4]: '<__main__.IPAddress object at 0xb4e4e76c>'\n\nIn [5]: str(ip2)\nOut[5]: '<__main__.IPAddress object at 0xb1bd376c>'\n")),Object(o.b)("p",null,"Unfortunately, this presentation is not very informative. It would be better to show information about which address this instance represents. Special method ",Object(o.b)("inlineCode",{parentName:"p"},"__str__")," is responsible for displaying information when using ",Object(o.b)("inlineCode",{parentName:"p"},"str")," function. As an argument this method expects only instance and must return string."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"class IPAddress:\n    def __init__(self, ip):\n        self.ip = ip\n\n    def __str__(self):\n        return f\"IPAddress: {self.ip}\"\n\n\nIn [7]: ip1 = IPAddress('10.1.1.1')\n\nIn [8]: ip2 = IPAddress('10.2.2.2')\n\nIn [9]: str(ip1)\nOut[9]: 'IPAddress: 10.1.1.1'\n\nIn [10]: str(ip2)\nOut[10]: 'IPAddress: 10.2.2.2'\n")),Object(o.b)("p",null,"A second string view which is used in Python objects is displayed when using ",Object(o.b)("inlineCode",{parentName:"p"},"repr")," function and when adding objects to containers such as lists:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"In [11]: ip_addresses = [ip1, ip2]\n\nIn [12]: ip_addresses\nOut[12]: [<__main__.IPAddress at 0xb4e40c8c>, <__main__.IPAddress at 0xb1bc46ac>]\n\nIn [13]: repr(ip1)\nOut[13]: '<__main__.IPAddress object at 0xb4e40c8c>'\n")),Object(o.b)("p",null,"Method ",Object(o.b)("inlineCode",{parentName:"p"},"__repr__")," is responsible for this output and it should also return a string, but it would return a string by copying which you can get an instance of a class:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"class IPAddress:\n    def __init__(self, ip):\n        self.ip = ip\n\n    def __str__(self):\n        return f\"IPAddress: {self.ip}\"\n\n    def __repr__(self):\n        return f\"IPAddress('{self.ip}')\"\n\n\nIn [15]: ip1 = IPAddress('10.1.1.1')\n\nIn [16]: ip2 = IPAddress('10.2.2.2')\n\nIn [17]: ip_addresses = [ip1, ip2]\n\nIn [18]: ip_addresses\nOut[18]: [IPAddress('10.1.1.1'), IPAddress('10.2.2.2')]\n\nIn [19]: repr(ip1)\nOut[19]: \"IPAddress('10.1.1.1')\"\n")))}c.isMDXComponent=!0}}]);