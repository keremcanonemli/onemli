(window.webpackJsonp=window.webpackJsonp||[]).push([[155],{227:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return s})),t.d(n,"metadata",(function(){return c})),t.d(n,"toc",(function(){return i})),t.d(n,"default",(function(){return d}));var r=t(3),o=t(8),a=(t(0),t(280)),s={id:"tasks",title:"Tasks",sidebar_label:"24.2 Tasks",slug:"tasks",custom_edit_url:null},c={unversionedId:"python/oop_inheritance/tasks",id:"python/oop_inheritance/tasks",isDocsHomePage:!1,title:"Tasks",description:"All tasks and additional files can be downloaded from repository.",source:"@site/docs/python/oop_inheritance/2_tasks.md",slug:"/python/oop_inheritance/tasks",permalink:"/tr/docs/python/oop_inheritance/tasks",editUrl:null,version:"current",sidebar_label:"24.2 Tasks",sidebar:"someSidebar",previous:{title:"Inheritance Basics",permalink:"/tr/docs/python/oop_inheritance/inheritance_basics"},next:{title:"enable()",permalink:"/tr/docs/netmiko/methods/netmiko_enable"}},i=[{value:"Task 24.1",id:"task-241",children:[]},{value:"Task 24.1a",id:"task-241a",children:[]},{value:"Task 24.2",id:"task-242",children:[]},{value:"Task 24.2a",id:"task-242a",children:[]},{value:"Task 24.2b",id:"task-242b",children:[]},{value:"Task 24.2c",id:"task-242c",children:[]},{value:"Task 24.2d",id:"task-242d",children:[]}],p={toc:i};function d(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},p,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("p",null,"All tasks and additional files can be downloaded from ",Object(a.b)("a",{parentName:"p",href:"https://github.com/natenka/pyneng-examples-exercises-en/"},"repository"),"."),Object(a.b)("p",null,"Warning"),Object(a.b)("p",null,"Starting from section \u201c4. Data types in Python\u201d there are automated tests for testing tasks. They help to check whether everything matches the task, and also give feedback on what does not correspond to the task. As a rule, after the first period of adaptation to tests, it becomes easier to do tasks with tests. Testing is done using the pyneng utility. ",Object(a.b)("a",{parentName:"p",href:"https://pyneng.readthedocs.io/en/latest/book/additional_info/pyneng.html#additional-info-pyneng"},"Learn more about how to work with the pyneng utility"),"."),Object(a.b)("h2",{id:"task-241"},"Task 24.1"),Object(a.b)("p",null,"Create a CiscoSSH class that inherits the BaseSSH class from the base_connect_class.py file."),Object(a.b)("p",null,"Create an ",Object(a.b)("strong",{parentName:"p"},"init")," method in the CiscoSSH class so that after connecting via SSH, it switches to enable mode."),Object(a.b)("p",null,"To do this, the ",Object(a.b)("strong",{parentName:"p"},"init")," method must first call the ",Object(a.b)("strong",{parentName:"p"},"init")," method of the BaseSSH class, and then switch to enable mode."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"In [2]: from task_24_1 import CiscoSSH\n\nIn [3]: r1 = CiscoSSH(**device_params)\n\nIn [4]: r1.send_show_command('sh ip int br')\nOut[4]: 'Interface                  IP-Address      OK? Method Status                Protocol\\nEthernet0/0                192.168.100.1   YES NVRAM  up                    up      \\nEthernet0/1                192.168.200.1   YES NVRAM  up                    up      \\nEthernet0/2                190.16.200.1    YES NVRAM  up                    up      \\nEthernet0/3                192.168.230.1   YES NVRAM  up                    up      \\nEthernet0/3.100            10.100.0.1      YES NVRAM  up                    up      \\nEthernet0/3.200            10.200.0.1      YES NVRAM  up                    up      \\nEthernet0/3.300            10.30.0.1       YES NVRAM  up                    up      '\n")),Object(a.b)("h2",{id:"task-241a"},"Task 24.1a"),Object(a.b)("p",null,"Copy and update the CiscoSSH class from task 24.1."),Object(a.b)("p",null,"Before connecting via SSH, you need to check if the dictionary with the connection parameters contains the following parameters: username, password, secret. If any parameter is missing, ask the user for a value and then connect. If all parameters are present, connect."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"In [1]: from task_24_1a import CiscoSSH\n\nIn [2]: device_params = {\n   ...:         'device_type': 'cisco_ios',\n   ...:         'host': '192.168.100.1',\n   ...: }\n\nIn [3]: r1 = CiscoSSH(**device_params)\nEnter username: cisco\nEnter password: cisco\nEnter enable passwod: cisco\n\nIn [4]: r1.send_show_command('sh ip int br')\nOut[4]: 'Interface                  IP-Address      OK? Method Status                Protocol\\nEthernet0/0                192.168.100.1   YES NVRAM  up                    up      \\nEthernet0/1                192.168.200.1   YES NVRAM  up                    up      \\nEthernet0/2                190.16.200.1    YES NVRAM  up                    up      \\nEthernet0/3                192.168.230.1   YES NVRAM  up                    up      \\nEthernet0/3.100            10.100.0.1      YES NVRAM  up                    up      \\nEthernet0/3.200            10.200.0.1      YES NVRAM  up                    up      \\nEthernet0/3.300            10.30.0.1       YES NVRAM  up                    up      '\n")),Object(a.b)("h2",{id:"task-242"},"Task 24.2"),Object(a.b)("p",null,"Create a MyNetmiko class that inherits the CiscoIosSSH class from netmiko. Write the ",Object(a.b)("strong",{parentName:"p"},"init")," method in the MyNetmiko class so that after connecting via SSH, it switches to enable mode."),Object(a.b)("p",null,"To do this, the ",Object(a.b)("strong",{parentName:"p"},"init")," method must first call the ",Object(a.b)("strong",{parentName:"p"},"init")," method of the CiscoIosSSH class, and then switch to enable mode."),Object(a.b)("p",null,"Check that the send_command and send_config_set methods are available in the MyNetmiko class (they are inherited automatically, this is just for checking)."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"In [2]: from task_24_2 import MyNetmiko\n\nIn [3]: r1 = MyNetmiko(**device_params)\n\nIn [4]: r1.send_command('sh ip int br')\nOut[4]: 'Interface                  IP-Address      OK? Method Status                Protocol\\nEthernet0/0                192.168.100.1   YES NVRAM  up                    up      \\nEthernet0/1                192.168.200.1   YES NVRAM  up                    up      \\nEthernet0/2                190.16.200.1    YES NVRAM  up                    up      \\nEthernet0/3                192.168.230.1   YES NVRAM  up                    up      \\nEthernet0/3.100            10.100.0.1      YES NVRAM  up                    up      \\nEthernet0/3.200            10.200.0.1      YES NVRAM  up                    up      \\nEthernet0/3.300            10.30.0.1       YES NVRAM  up                    up      '\n")),Object(a.b)("h2",{id:"task-242a"},"Task 24.2a"),Object(a.b)("p",null,"Copy and update the MyNetmiko class from task 24.2."),Object(a.b)("p",null,"Add the _check_error_in_command method that checks for such errors: Invalid input detected, Incomplete command, Ambiguous command"),Object(a.b)("p",null,"The method expects a command and command output as an argument. If no error is found in the output, the method returns nothing. If an error is found in the output, the method should raise an ErrorInCommand exception with a message about which error was detected, on which device, and in which command."),Object(a.b)("p",null,"An ErrorInCommand exception is created in the task file."),Object(a.b)("p",null,"Rewrite send_command method to include error checking."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"In [2]: from task_24_2a import MyNetmiko\n\nIn [3]: r1 = MyNetmiko(**device_params)\n\nIn [4]: r1.send_command('sh ip int br')\nOut[4]: 'Interface                  IP-Address      OK? Method Status                Protocol\\nEthernet0/0                192.168.100.1   YES NVRAM  up                    up      \\nEthernet0/1                192.168.200.1   YES NVRAM  up                    up      \\nEthernet0/2                190.16.200.1    YES NVRAM  up                    up      \\nEthernet0/3                192.168.230.1   YES NVRAM  up                    up      \\nEthernet0/3.100            10.100.0.1      YES NVRAM  up                    up      \\nEthernet0/3.200            10.200.0.1      YES NVRAM  up                    up      \\nEthernet0/3.300            10.30.0.1       YES NVRAM  up                    up      '\n\nIn [5]: r1.send_command('sh ip br')\n---------------------------------------------------------------------------\nErrorInCommand                            Traceback (most recent call last)\n<ipython-input-2-1c60b31812fd> in <module>()\n----\x3e 1 r1.send_command('sh ip br')\n...\nErrorInCommand: When executing the command \"sh ip br\" on device 192.168.100.1, an error occurred \"Invalid input detected at '^' marker.\"\n")),Object(a.b)("h2",{id:"task-242b"},"Task 24.2b"),Object(a.b)("p",null,"Copy the class MyNetmiko from task 24.2a."),Object(a.b)("p",null,"Add error checking to the send_config_set method using the _check_error_in_command method."),Object(a.b)("p",null,"The send_config_set method should send commands one at a time and check each for errors. If no errors are encountered while executing the commands, the send_config_set method returns the output of the commands."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"In [2]: from task_24_2b import MyNetmiko\n\nIn [3]: r1 = MyNetmiko(**device_params)\n\nIn [4]: r1.send_config_set('lo')\n---------------------------------------------------------------------------\nErrorInCommand                            Traceback (most recent call last)\n<ipython-input-2-8e491f78b235> in <module>()\n----\x3e 1 r1.send_config_set('lo')\n\n...\nErrorInCommand: When executing the command \"lo\" on device 192.168.100.1, an error occurred \"Incomplete command.\"\n")),Object(a.b)("h2",{id:"task-242c"},"Task 24.2c"),Object(a.b)("p",null,"Copy the class MyNetmiko from task 24.2b. Check that the send_command method, in addition to a command, also accepts additional arguments, for example, strip_command."),Object(a.b)("p",null,"If an error occurs, rewrite the method to accept any arguments that netmiko supports."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"In [2]: from task_24_2c import MyNetmiko\n\nIn [3]: r1 = MyNetmiko(**device_params)\n\nIn [4]: r1.send_command('sh ip int br', strip_command=False)\nOut[4]: 'sh ip int br\\nInterface                  IP-Address      OK? Method Status                Protocol\\nEthernet0/0                192.168.100.1   YES NVRAM  up                    up      \\nEthernet0/1                192.168.200.1   YES NVRAM  up                    up      \\nEthernet0/2                190.16.200.1    YES NVRAM  up                    up      \\nEthernet0/3                192.168.230.1   YES NVRAM  up                    up      \\nEthernet0/3.100            10.100.0.1      YES NVRAM  up                    up      \\nEthernet0/3.200            10.200.0.1      YES NVRAM  up                    up      \\nEthernet0/3.300            10.30.0.1       YES NVRAM  up                    up      '\n\nIn [5]: r1.send_command('sh ip int br', strip_command=True)\nOut[5]: 'Interface                  IP-Address      OK? Method Status                Protocol\\nEthernet0/0                192.168.100.1   YES NVRAM  up                    up      \\nEthernet0/1                192.168.200.1   YES NVRAM  up                    up      \\nEthernet0/2                190.16.200.1    YES NVRAM  up                    up      \\nEthernet0/3                192.168.230.1   YES NVRAM  up                    up      \\nEthernet0/3.100            10.100.0.1      YES NVRAM  up                    up      \\nEthernet0/3.200            10.200.0.1      YES NVRAM  up                    up      \\nEthernet0/3.300            10.30.0.1       YES NVRAM  up                    up      '\n")),Object(a.b)("h2",{id:"task-242d"},"Task 24.2d"),Object(a.b)("p",null,"Copy class MyNetmiko from task 24.2c or task 24.2b."),Object(a.b)("p",null,"Add the ignore_errors parameter to the send_config_set method. If ignore_errors=True, no error checking is needed and the method should work exactly like the send_config_set method in netmiko. If ignore_errors=False, errors should be checked."),Object(a.b)("p",null,"By default, errors should be ignored."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"In [2]: from task_24_2d import MyNetmiko\n\nIn [3]: r1 = MyNetmiko(**device_params)\n\nIn [6]: r1.send_config_set('lo')\nOut[6]: 'config term\\nEnter configuration commands, one per line.  End with CNTL/Z.\\nR1(config)#lo\\n% Incomplete command.\\n\\nR1(config)#end\\nR1#'\n\nIn [7]: r1.send_config_set('lo', ignore_errors=True)\nOut[7]: 'config term\\nEnter configuration commands, one per line.  End with CNTL/Z.\\nR1(config)#lo\\n% Incomplete command.\\n\\nR1(config)#end\\nR1#'\n\nIn [8]: r1.send_config_set('lo', ignore_errors=False)\n---------------------------------------------------------------------------\nErrorInCommand                            Traceback (most recent call last)\n<ipython-input-8-704f2e8d1886> in <module>()\n----\x3e 1 r1.send_config_set('lo', ignore_errors=False)\n\n...\nErrorInCommand: When executing the command \"lo\" on device 192.168.100.1, an error occurred \"Incomplete command.\"\n")))}d.isMDXComponent=!0},280:function(e,n,t){"use strict";t.d(n,"a",(function(){return u})),t.d(n,"b",(function(){return h}));var r=t(0),o=t.n(r);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=o.a.createContext({}),d=function(e){var n=o.a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},u=function(e){var n=d(e.components);return o.a.createElement(p.Provider,{value:n},e.children)},l={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},m=o.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=d(t),m=r,h=u["".concat(s,".").concat(m)]||u[m]||l[m]||a;return t?o.a.createElement(h,c(c({ref:n},p),{},{components:t})):o.a.createElement(h,c({ref:n},p))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,s=new Array(a);s[0]=m;var c={};for(var i in n)hasOwnProperty.call(n,i)&&(c[i]=n[i]);c.originalType=e,c.mdxType="string"==typeof e?e:r,s[1]=c;for(var p=2;p<a;p++)s[p]=t[p];return o.a.createElement.apply(null,s)}return o.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"}}]);