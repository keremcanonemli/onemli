(window.webpackJsonp=window.webpackJsonp||[]).push([[69],{141:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return p}));var a=n(3),r=n(8),o=(n(0),n(280)),i={id:"template_inheritance",title:"Template Inheritance",sidebar_label:"20.4 Template Inheritance",slug:"template_inheritance",custom_edit_url:null},l={unversionedId:"python/jinja2/template_inheritance",id:"python/jinja2/template_inheritance",isDocsHomePage:!1,title:"Template Inheritance",description:"Template inheritance is a very powerful functionality that avoids repetition of the same in different templates.",source:"@site/docs/python/jinja2/4_template_inheritance.md",slug:"/python/jinja2/template_inheritance",permalink:"/docs/python/jinja2/template_inheritance",editUrl:null,version:"current",sidebar_label:"20.4 Template Inheritance",sidebar:"someSidebar",previous:{title:"Jinja2 Template Syntax",permalink:"/docs/python/jinja2/jinja2_template_syntax"},next:{title:"Further Reading",permalink:"/docs/python/jinja2/further_reading"}},c=[],s={toc:c};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Template inheritance is a very powerful functionality that avoids repetition of the same in different templates."),Object(o.b)("p",null,"When using inheritance, there are:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"p"},"base template")," - template that describes template skeleton."),Object(o.b)("p",{parentName:"li"},"this template may contain any ordinary expressions or text. In addition, special ",Object(o.b)("inlineCode",{parentName:"p"},"blocks")," are defined in this template.")))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"p"},"child template")," - template that extends base template by filling in specified blocks."),Object(o.b)("p",{parentName:"li"},"child templates can overwrite or supplement blocks defined in base template."))))),Object(o.b)("p",null,"Example of base template templates/base_router.txt:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"!\n{% block services %}\nservice timestamps debug datetime msec localtime show-timezone year\nservice timestamps log datetime msec localtime show-timezone year\nservice password-encryption\nservice sequence-numbers\n{% endblock %}\n!\nno ip domain lookup\n!\nip ssh version 2\n!\n{% block ospf %}\nrouter ospf 1\n auto-cost reference-bandwidth 10000\n{% endblock %}\n!\n{% block bgp %}\n{% endblock %}\n!\n{% block alias %}\n{% endblock %}\n!\nline con 0\n logging synchronous\n history size 100\nline vty 0 4\n logging synchronous\n history size 100\n transport input ssh\n!\n")),Object(o.b)("p",null,"Note four blocks that are created in template:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{% block services %}\nservice timestamps debug datetime msec localtime show-timezone year\nservice timestamps log datetime msec localtime show-timezone year\nservice password-encryption\nservice sequence-numbers\n{% endblock %}\n!\n{% block ospf %}\nrouter ospf 1\n auto-cost reference-bandwidth 10000\n{% endblock %}\n!\n{% block bgp %}\n{% endblock %}\n!\n{% block alias %}\n{% endblock %}\n")),Object(o.b)("p",null,"These are blanks for the corresponding configuration sections. A child template that uses this base template as a base can fill all or only some of the blocks."),Object(o.b)("p",null,"Child template templates/hq_router.txt:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'{% extends "base_router.txt" %}\n\n{% block ospf %}\n{{ super() }}\n{% for networks in ospf %}\n network {{ networks.network }} area {{ networks.area }}\n{% endfor %}\n{% endblock %}\n\n{% block alias %}\nalias configure sh do sh\nalias exec ospf sh run | s ^router ospf\nalias exec bri show ip int bri | exc unass\nalias exec id show int desc\nalias exec top sh proc cpu sorted | excl 0.00%__0.00%__0.00%\nalias exec c conf t\nalias exec diff sh archive config differences nvram:startup-config system:running-config\nalias exec desc sh int desc | ex down\n{% endblock %}\n')),Object(o.b)("p",null,"The first line in template templates/hq_router.txt is very important:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'{% extends "base_router.txt" %}\n')),Object(o.b)("p",null,"It is said that template hq_router.txt will be constructed on the basis of template base_router.txt."),Object(o.b)("p",null,"Inside child template, everything happens inside blocks. Due to the blocks that have been defined in base template, child template can extend the parent template."),Object(o.b)("p",null,"Note"),Object(o.b)("p",null,"Note that lines described in child template outside blocks are ignored."),Object(o.b)("p",null,"There are four blocks in base template: services, ospf, bgp, alias. In child template only two of them are filled: ospf and alias. That\u2019s the convenience of inheritance. You don\u2019t have to fill all blocks in every child template."),Object(o.b)("p",null,"In this way ",Object(o.b)("em",{parentName:"p"},"ospf")," and ",Object(o.b)("em",{parentName:"p"},"alias")," blocks are used differently. In base template, ",Object(o.b)("em",{parentName:"p"},"ospf")," block already has part of configuration:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{% block ospf %}\nrouter ospf 1\n auto-cost reference-bandwidth 10000\n{% endblock %}\n")),Object(o.b)("p",null,"Therefore, child template has a choice: use this configuration and supplement it or completely rewrite everything in child template."),Object(o.b)("p",null,"In this case the configuration is supplemented. That is why in child template templates/hq_router.txt the ",Object(o.b)("em",{parentName:"p"},"ospf")," block starts with expression ",Object(o.b)("inlineCode",{parentName:"p"},"{{ super() }}"),":"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{% block ospf %}\n{{ super() }}\n {% for networks in ospf %}\n network {{ networks.network }} area {{ networks.area }}\n {% endfor %}\n{% endblock %}\n")),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"{{ super() }}")," transfers content of this block from parent template to child template. Because of this, lines from parent are moved to child template."),Object(o.b)("p",null,"Note"),Object(o.b)("p",null,"Expression ",Object(o.b)("inlineCode",{parentName:"p"},"super")," doesn\u2019t have to be at the beginning of the block. It could be anywhere in the block. Content of base template are moved to where ",Object(o.b)("inlineCode",{parentName:"p"},"super")," expression is located."),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"alias")," block simply describes the alias. And even if there were some settings in parent template, they would be substituted by content of child template."),Object(o.b)("p",null,"Let\u2019s recap the rules for working with blocks. If block is created in parent template:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"no content - in child template you can fill this block or ignore it. If block is filled, it will contain only what was written in child template (example - ",Object(o.b)("inlineCode",{parentName:"li"},"alias")," block)"),Object(o.b)("li",{parentName:"ul"},"with content - in child template you can perform such actions:",Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},"ignore block - in this case, child template will get content from parent template (example - ",Object(o.b)("em",{parentName:"li"},"services")," block)"),Object(o.b)("li",{parentName:"ul"},"rewrite block - then child template will contain only what it has"),Object(o.b)("li",{parentName:"ul"},"move content of the block from parent template and supplement it - then child template will contain both the content of the block from parent template and the content from child template. To pass content from parent template the expression ",Object(o.b)("inlineCode",{parentName:"li"},"{{ super() }}")," is used (example - ",Object(o.b)("em",{parentName:"li"},"ospf")," block)")))),Object(o.b)("p",null,"Data file for template configuration generation (data_files/hq_router.yml):"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"ospf:\n  - network: 10.0.1.0 0.0.0.255\n    area: 0\n  - network: 10.0.2.0 0.0.0.255\n    area: 2\n  - network: 10.1.1.0 0.0.0.255\n    area: 0\n")),Object(o.b)("p",null,"The result will be:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"$ python cfg_gen.py templates/hq_router.txt data_files/hq_router.yml\n!\nservice timestamps debug datetime msec localtime show-timezone year\nservice timestamps log datetime msec localtime show-timezone year\nservice password-encryption\nservice sequence-numbers\n!\nno ip domain lookup\n!\nip ssh version 2\n!\nrouter ospf 1\n auto-cost reference-bandwidth 10000\n\n network 10.0.1.0 0.0.0.255 area 0\n network 10.0.2.0 0.0.0.255 area 2\n network 10.1.1.0 0.0.0.255 area 0\n!\n!\nalias configure sh do sh\nalias exec ospf sh run | s ^router ospf\nalias exec bri show ip int bri | exc unass\nalias exec id show int desc\nalias exec top sh proc cpu sorted | excl 0.00%__0.00%__0.00%\nalias exec c conf t\nalias exec diff sh archive config differences nvram:startup-config system:running-config\nalias exec desc sh int desc | ex down\n!\nline con 0\n logging synchronous\n history size 100\nline vty 0 4\n logging synchronous\n history size 100\n transport input ssh\n!\n")),Object(o.b)("p",null,"Note that in ",Object(o.b)("em",{parentName:"p"},"ospf")," block there are commands from base template and commands from child template."))}p.isMDXComponent=!0},280:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return d}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=r.a.createContext({}),p=function(e){var t=r.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},b=function(e){var t=p(e.components);return r.a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),b=p(n),u=a,d=b["".concat(i,".").concat(u)]||b[u]||m[u]||o;return n?r.a.createElement(d,l(l({ref:t},s),{},{components:n})):r.a.createElement(d,l({ref:t},s))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);