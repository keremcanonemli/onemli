(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{130:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return s})),t.d(n,"metadata",(function(){return o})),t.d(n,"toc",(function(){return c})),t.d(n,"default",(function(){return p}));var a=t(3),r=t(8),i=(t(0),t(281)),s={id:"special_symbols",title:"Special Symbols",sidebar_label:"Special Symbols",slug:"special_symbols",custom_edit_url:null},o={unversionedId:"python/regex/special_symbols",id:"python/regex/special_symbols",isDocsHomePage:!1,title:"Special Symbols",description:"- . - any character except new line character",source:"@site/docs/python/regex/4_special_symbols.md",slug:"/python/regex/special_symbols",permalink:"/tr/docs/python/regex/special_symbols",editUrl:null,version:"current",sidebar_label:"Special Symbols",sidebar:"someSidebar",previous:{title:"Repeating Characters",permalink:"/tr/docs/python/regex/repeating_characters"},next:{title:"Greedy Qualifiers",permalink:"/tr/docs/python/regex/greedy_qualifiers"}},c=[{value:"<code>.</code>",id:"",children:[]},{value:"<code>^</code>",id:"-1",children:[]},{value:"<code>$</code>",id:"-2",children:[]},{value:"<code>[]</code>",id:"-3",children:[]},{value:"<code>|</code>",id:"-4",children:[]},{value:"<code>()</code>",id:"-5",children:[]}],l={toc:c};function p(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},".")," - any character except new line character"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"^")," - beginning of line"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"$")," - end of line"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"[abc]")," - any symbol in square brackets"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"[^abc]")," - any symbol except those in square brackets"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"a|b")," - element a or b"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"(regex)")," - expression is treated as one element. In addition, substring that matches an expression is memorized")),Object(i.b)("h2",{id:""},Object(i.b)("inlineCode",{parentName:"h2"},".")),Object(i.b)("p",null,"Dot represents any symbol. Most often, a dot is used with repetition symbols ",Object(i.b)("inlineCode",{parentName:"p"},"+")," and ",Object(i.b)("inlineCode",{parentName:"p"},"*")," to indicate that any character can be found between certain expressions."),Object(i.b)("p",null,"For example, using expression ",Object(i.b)("inlineCode",{parentName:"p"},"Interface.+Port ID.+")," you can describe a line with interfaces in the output \u201csh cdp neighbors detail\u201d:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"In [1]: cdp = '''\n   ...: SW1#show cdp neighbors detail\n   ...: -------------------------\n   ...: Device ID: SW2\n   ...: Entry address(es):\n   ...:   IP address: 10.1.1.2\n   ...: Platform: cisco WS-C2960-8TC-L,  Capabilities: Switch IGMP\n   ...: Interface: GigabitEthernet1/0/16,  Port ID (outgoing port): GigabitEthernet0/1\n   ...: Holdtime : 164 sec\n   ...: '''\n\nIn [2]: re.search('Interface.+Port ID.+', cdp).group()\nOut[2]: 'Interface: GigabitEthernet1/0/16,  Port ID (outgoing port): GigabitEthernet0/1'\n")),Object(i.b)("p",null,"The result was only one string as the dot represents any character except line feed character. In addition, repetition characters ",Object(i.b)("inlineCode",{parentName:"p"},"+")," and ",Object(i.b)("inlineCode",{parentName:"p"},"*")," by default capture the longest string possible. This aspect is addressed in subsection \u201cGreedy qualifiers\u201d."),Object(i.b)("h2",{id:"-1"},Object(i.b)("inlineCode",{parentName:"h2"},"^")),Object(i.b)("p",null,"Character ",Object(i.b)("inlineCode",{parentName:"p"},"^")," means the beginning of line. Expression ",Object(i.b)("inlineCode",{parentName:"p"},"^\\d+")," corresponds to substring:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"In [3]: line = \"100     aa12.35fe.a5d3    FastEthernet0/1\"\n\nIn [4]: re.search('^\\d+', line).group()\nOut[4]: '100'\n")),Object(i.b)("p",null,"Characters from beginning of line to pound sign (including pound):"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"In [5]: prompt = 'SW1#show cdp neighbors detail'\n\nIn [6]: re.search('^.+#', prompt).group()\nOut[6]: 'SW1#'\n")),Object(i.b)("h2",{id:"-2"},Object(i.b)("inlineCode",{parentName:"h2"},"$")),Object(i.b)("p",null,"Symbol ",Object(i.b)("inlineCode",{parentName:"p"},"$")," represents the end of a line."),Object(i.b)("p",null,"Expression ",Object(i.b)("inlineCode",{parentName:"p"},"\\S+$")," describes any characters except whitespace at the end of line:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"In [7]: line = \"100     aa12.35fe.a5d3    FastEthernet0/1\"\n\nIn [8]: re.search('\\S+$', line).group()\nOut[8]: 'FastEthernet0/1'\n")),Object(i.b)("h2",{id:"-3"},Object(i.b)("inlineCode",{parentName:"h2"},"[]")),Object(i.b)("p",null,"Symbols that are listed in square brackets mean that any of these symbols will be a match. Thus, different registers can be described:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"In [9]: line = \"100     aa12.35fe.a5d3    FastEthernet0/1\"\n\nIn [10]: re.search('[Ff]ast', line).group()\nOut[10]: 'Fast'\n\nIn [11]: re.search('[Ff]ast[Ee]thernet', line).group()\nOut[11]: 'FastEthernet'\n")),Object(i.b)("p",null,"Using square brackets, you can specify which characters may meet at a specific position. For example, expression ",Object(i.b)("inlineCode",{parentName:"p"},"^.+[>#]")," describes characters from the beginning of a line to ",Object(i.b)("inlineCode",{parentName:"p"},"#")," or ",Object(i.b)("inlineCode",{parentName:"p"},">")," sign (including them). This expression can be used to get the name of device:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"In [12]: commands = ['SW1#show cdp neighbors detail',\n    ...:             'SW1>sh ip int br',\n    ...:             'r1-london-core# sh ip route']\n    ...:\n\nIn [13]: for line in commands:\n    ...:     match = re.search('^.+[>#]', line)\n    ...:     if match:\n    ...:         print(match.group())\n    ...:\nSW1#\nSW1>\nr1-london-core#\n")),Object(i.b)("p",null,"You can specify character ranges in square brackets. For example, any number from 0 to 9:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"In [14]: line = \"100     aa12.35fe.a5d3    FastEthernet0/1\"\n\nIn [15]: re.search('[0-9]+', line).group()\nOut[15]: '100'\n")),Object(i.b)("p",null,"Letters:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"In [16]: line = \"100     aa12.35fe.a5d3    FastEthernet0/1\"\n\nIn [17]: re.search('[a-z]+', line).group()\nOut[17]: 'aa'\n\nIn [18]: re.search('[A-Z]+', line).group()\nOut[18]: 'F'\n")),Object(i.b)("p",null,"Several ranges may be indicated in square brackets:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"In [19]: line = \"100     aa12.35fe.a5d3    FastEthernet0/1\"\n\nIn [20]: re.search('[a-f0-9]+\\.[a-f0-9]+\\.[a-f0-9]+', line).group()\nOut[20]: 'aa12.35fe.a5d3'\n")),Object(i.b)("p",null,"Expression ",Object(i.b)("inlineCode",{parentName:"p"},"[a-f0-9]+\\.[a-f0-9]+\\.[a-f0-9]+")," describes three groups of symbols separated by a dot. Characters in each group can be letters a-f or digits 0-9. This expression describes MAC address."),Object(i.b)("p",null,"Another feature of square brackets is that the special symbols within square brackets lose their special meaning and are simply a symbol. For example, a dot inside square brackets will denote a dot, not any symbol."),Object(i.b)("p",null,"Expression ",Object(i.b)("inlineCode",{parentName:"p"},"[a-f0-9]+[./][a-f0-9]+")," describes three groups of symbols:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"letters a-f or digits 0-9"),Object(i.b)("li",{parentName:"ol"},"dot or slash"),Object(i.b)("li",{parentName:"ol"},"letters a-f or digits 0-9")),Object(i.b)("p",null,"For ",Object(i.b)("inlineCode",{parentName:"p"},"line")," string the match will be a such substring:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"In [21]: line = \"100     aa12.35fe.a5d3    FastEthernet0/1\"\n\nIn [22]: re.search('[a-f0-9]+[./][a-f0-9]+', line).group()\nOut[22]: 'aa12.35fe'\n")),Object(i.b)("p",null,"If first symbol in square brackets is ",Object(i.b)("inlineCode",{parentName:"p"},"^"),", match will be any symbol except those in brackets."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"In [23]: line = 'FastEthernet0/0    15.0.15.1       YES manual up         up'\n\nIn [24]: re.search('[^a-zA-Z]+', line).group()\nOut[24]: '0/0    15.0.15.1       '\n")),Object(i.b)("p",null,"In this case, expression describes everything except letters."),Object(i.b)("h2",{id:"-4"},Object(i.b)("inlineCode",{parentName:"h2"},"|")),Object(i.b)("p",null,"Pipe symbol works like \u2018or\u2019:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"In [25]: line = \"100     aa12.35fe.a5d3    FastEthernet0/1\"\n\nIn [26]: re.search('Fast|0/1', line).group()\nOut[26]: 'Fast'\n")),Object(i.b)("p",null,"Note how ",Object(i.b)("inlineCode",{parentName:"p"},"|")," works - Fast \u0438 0/1 are treated as an whole expression. So in the end, expression means that we\u2019re looking for Fast or 0/1."),Object(i.b)("h2",{id:"-5"},Object(i.b)("inlineCode",{parentName:"h2"},"()")),Object(i.b)("p",null,"Parentheses are used to group expressions. As in mathematical expressions, parentheses can be used to indicate which elements the operation is applied to."),Object(i.b)("p",null,"For example, expression ",Object(i.b)("inlineCode",{parentName:"p"},"[0-9]([a-f]|[0-9])[0-9]")," describes three characters: digit, then a letter or digit and digit:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"In [27]: line = \"100     aa12.35fe.a5d3    FastEthernet0/1\"\n\nIn [28]: re.search('[0-9]([a-f]|[0-9])[0-9]', line).group()\nOut[28]: '100'\n")),Object(i.b)("p",null,"Parentheses allow to indicate which expression is a one entity. This is particularly useful when using repetition symbols:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"In [29]: line = 'FastEthernet0/0    15.0.15.1       YES manual up         up'\n\nIn [30]: re.search('([0-9]+\\.)+[0-9]+', line).group()\nOut[30]: '15.0.15.1'\n")),Object(i.b)("p",null,"Parentheses not only allow you to group expressions. String that matches expression in parentheses is memorized. It can be obtained separately by special methods ",Object(i.b)("inlineCode",{parentName:"p"},"groups")," and ",Object(i.b)("inlineCode",{parentName:"p"},"group(n)"),". This is covered in subsection \u201cGrouping\u201d."))}p.isMDXComponent=!0},281:function(e,n,t){"use strict";t.d(n,"a",(function(){return b})),t.d(n,"b",(function(){return m}));var a=t(0),r=t.n(a);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=r.a.createContext({}),p=function(e){var n=r.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},b=function(e){var n=p(e.components);return r.a.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},d=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),b=p(t),d=a,m=b["".concat(s,".").concat(d)]||b[d]||u[d]||i;return t?r.a.createElement(m,o(o({ref:n},l),{},{components:t})):r.a.createElement(m,o({ref:n},l))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,s=new Array(i);s[0]=d;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var l=2;l<i;l++)s[l]=t[l];return r.a.createElement.apply(null,s)}return r.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"}}]);