(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{122:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return d}));var a=n(0),i=n.n(a);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=i.a.createContext({}),p=function(e){var t=i.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},b=function(e){var t=p(e.components);return i.a.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},u=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),b=p(n),u=a,d=b["".concat(l,".").concat(u)]||b[u]||m[u]||s;return n?i.a.createElement(d,r(r({ref:t},c),{},{components:n})):i.a.createElement(d,r({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,l=new Array(s);l[0]=u;var r={};for(var o in t)hasOwnProperty.call(t,o)&&(r[o]=t[o]);r.originalType=e,r.mdxType="string"==typeof e?e:a,l[1]=r;for(var c=2;c<s;c++)l[c]=n[c];return i.a.createElement.apply(null,l)}return i.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},94:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return r})),n.d(t,"toc",(function(){return o})),n.d(t,"default",(function(){return p}));var a=n(3),i=n(8),s=(n(0),n(122)),l={id:"lists",title:"Lists",sidebar_label:"1.5 Lists",slug:"lists",custom_edit_url:null},r={unversionedId:"python/introduction/lists",id:"python/introduction/lists",isDocsHomePage:!1,title:"Lists",description:"\u200b",source:"@site/docs/python/introduction/05_Lists.md",slug:"/python/introduction/lists",permalink:"/docs/python/introduction/lists",editUrl:null,version:"current",sidebar_label:"1.5 Lists",sidebar:"someSidebar",previous:{title:"Strings",permalink:"/docs/python/introduction/strings"},next:{title:"File Management",permalink:"/docs/python/introduction/file_management"}},o=[{value:"Creating a List",id:"creating-a-list",children:[]},{value:"List operations",id:"list-operations",children:[]},{value:"List Iteration and Search",id:"list-iteration-and-search",children:[]},{value:"List Removal",id:"list-removal",children:[]},{value:"List Sorting",id:"list-sorting",children:[]},{value:"Lists and Math",id:"lists-and-math",children:[]},{value:"Exercises",id:"exercises",children:[{value:"Exercise 1.19: Extracting and reassigning list elements",id:"exercise-119-extracting-and-reassigning-list-elements",children:[]},{value:"Exercise 1.20: Looping over list items",id:"exercise-120-looping-over-list-items",children:[]},{value:"Exercise 1.21: Membership tests",id:"exercise-121-membership-tests",children:[]},{value:"Exercise 1.22: Appending, inserting, and deleting items",id:"exercise-122-appending-inserting-and-deleting-items",children:[]},{value:"Exercise 1.23: Sorting",id:"exercise-123-sorting",children:[]},{value:"Exercise 1.24: Putting it all back together",id:"exercise-124-putting-it-all-back-together",children:[]},{value:"Exercise 1.25: Lists of anything",id:"exercise-125-lists-of-anything",children:[]}]}],c={toc:o};function p(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(s.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(s.b)("p",null,"\u200b    "),Object(s.b)("p",null,"This section introduces lists, Python's primary type for holding an ordered collection of values."),Object(s.b)("h3",{id:"creating-a-list"},"Creating a List"),Object(s.b)("p",null,"Use square brackets to define a list literal:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python"},"names = [ 'Elwood', 'Jake', 'Curtis' ]\nnums = [ 39, 38, 42, 65, 111]\n")),Object(s.b)("p",null,"Sometimes lists are created by other methods.  For example, a string can be split into a\nlist using the ",Object(s.b)("inlineCode",{parentName:"p"},"split()")," method:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python"},">>> line = 'GOOG,100,490.10'\n>>> row = line.split(',')\n>>> row\n['GOOG', '100', '490.10']\n>>>\n")),Object(s.b)("h3",{id:"list-operations"},"List operations"),Object(s.b)("p",null,"Lists can hold items of any type. Add a new item using ",Object(s.b)("inlineCode",{parentName:"p"},"append()"),":"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python"},"names.append('Murphy')    # Adds at end\nnames.insert(2, 'Aretha') # Inserts in middle\n")),Object(s.b)("p",null,"Use ",Object(s.b)("inlineCode",{parentName:"p"},"+")," to concatenate lists:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python"},"s = [1, 2, 3]\nt = ['a', 'b']\ns + t           # [1, 2, 3, 'a', 'b']\n")),Object(s.b)("p",null,"Lists are indexed by integers. Starting at 0."),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python"},"names = [ 'Elwood', 'Jake', 'Curtis' ]\n\nnames[0]  # 'Elwood'\nnames[1]  # 'Jake'\nnames[2]  # 'Curtis'\n")),Object(s.b)("p",null,"Negative indices count from the end."),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python"},"names[-1] # 'Curtis'\n")),Object(s.b)("p",null,"You can change any item in a list."),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python"},"names[1] = 'Joliet Jake'\nnames                     # [ 'Elwood', 'Joliet Jake', 'Curtis' ]\n")),Object(s.b)("p",null,"Length of the list."),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python"},"names = ['Elwood','Jake','Curtis']\nlen(names)  # 3\n")),Object(s.b)("p",null,"Membership test (",Object(s.b)("inlineCode",{parentName:"p"},"in"),", ",Object(s.b)("inlineCode",{parentName:"p"},"not in"),")."),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python"},"'Elwood' in names       # True\n'Britney' not in names  # True\n")),Object(s.b)("p",null,"Replication (",Object(s.b)("inlineCode",{parentName:"p"},"s * n"),")."),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python"},"s = [1, 2, 3]\ns * 3   # [1, 2, 3, 1, 2, 3, 1, 2, 3]\n")),Object(s.b)("h3",{id:"list-iteration-and-search"},"List Iteration and Search"),Object(s.b)("p",null,"Use ",Object(s.b)("inlineCode",{parentName:"p"},"for")," to iterate over the list contents."),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python"},"for name in names:\n    # use name\n    # e.g. print(name)\n    ...\n")),Object(s.b)("p",null,"This is similar to a ",Object(s.b)("inlineCode",{parentName:"p"},"foreach")," statement from other programming languages."),Object(s.b)("p",null,"To find the position of something quickly, use ",Object(s.b)("inlineCode",{parentName:"p"},"index()"),"."),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python"},"names = ['Elwood','Jake','Curtis']\nnames.index('Curtis')   # 2\n")),Object(s.b)("p",null,"If the element is present more than once, ",Object(s.b)("inlineCode",{parentName:"p"},"index()")," will return the index of the first occurrence."),Object(s.b)("p",null,"If the element is not found, it will raise a ",Object(s.b)("inlineCode",{parentName:"p"},"ValueError")," exception."),Object(s.b)("h3",{id:"list-removal"},"List Removal"),Object(s.b)("p",null,"You can remove items either by element value or by index:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python"},"# Using the value\nnames.remove('Curtis')\n\n# Using the index\ndel names[1]\n")),Object(s.b)("p",null,"Removing an item does not create a hole.  Other items will move down\nto fill the space vacated.  If there are more than one occurrence of\nthe element, ",Object(s.b)("inlineCode",{parentName:"p"},"remove()")," will remove only the first occurrence."),Object(s.b)("h3",{id:"list-sorting"},"List Sorting"),Object(s.b)("p",null,'Lists can be sorted "in-place".'),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python"},"s = [10, 1, 7, 3]\ns.sort()                    # [1, 3, 7, 10]\n\n# Reverse order\ns = [10, 1, 7, 3]\ns.sort(reverse=True)        # [10, 7, 3, 1]\n\n# It works with any ordered data\ns = ['foo', 'bar', 'spam']\ns.sort()                    # ['bar', 'foo', 'spam']\n")),Object(s.b)("p",null,"Use ",Object(s.b)("inlineCode",{parentName:"p"},"sorted()")," if you'd like to make a new list instead:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python"},"t = sorted(s)               # s unchanged, t holds sorted values\n")),Object(s.b)("h3",{id:"lists-and-math"},"Lists and Math"),Object(s.b)("p",null,Object(s.b)("em",{parentName:"p"},"Caution: Lists were not designed for math operations.")),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python"},">>> nums = [1, 2, 3, 4, 5]\n>>> nums * 2\n[1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\n>>> nums + [10, 11, 12, 13, 14]\n[1, 2, 3, 4, 5, 10, 11, 12, 13, 14]\n")),Object(s.b)("p",null,"Specifically, lists don't represent vectors/matrices as in MATLAB, Octave, R, etc.\nHowever, there are some packages to help you with that (e.g. ",Object(s.b)("a",{parentName:"p",href:"https://numpy.org"},"numpy"),")."),Object(s.b)("h2",{id:"exercises"},"Exercises"),Object(s.b)("p",null,"In this exercise, we experiment with Python's list datatype. In the last section,\nyou worked with strings containing stock symbols."),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python"},">>> symbols = 'HPQ,AAPL,IBM,MSFT,YHOO,DOA,GOOG'\n")),Object(s.b)("p",null,"Split it into a list of names using the ",Object(s.b)("inlineCode",{parentName:"p"},"split()")," operation of strings:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python"},">>> symlist = symbols.split(',')\n")),Object(s.b)("h3",{id:"exercise-119-extracting-and-reassigning-list-elements"},"Exercise 1.19: Extracting and reassigning list elements"),Object(s.b)("p",null,"Try a few lookups:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python"},">>> symlist[0]\n'HPQ'\n>>> symlist[1]\n'AAPL'\n>>> symlist[-1]\n'GOOG'\n>>> symlist[-2]\n'DOA'\n>>>\n")),Object(s.b)("p",null,"Try reassigning one value:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python"},">>> symlist[2] = 'AIG'\n>>> symlist\n['HPQ', 'AAPL', 'AIG', 'MSFT', 'YHOO', 'DOA', 'GOOG']\n>>>\n")),Object(s.b)("p",null,"Take a few slices:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python"},">>> symlist[0:3]\n['HPQ', 'AAPL', 'AIG']\n>>> symlist[-2:]\n['DOA', 'GOOG']\n>>>\n")),Object(s.b)("p",null,"Create an empty list and append an item to it."),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python"},">>> mysyms = []\n>>> mysyms.append('GOOG')\n>>> mysyms\n['GOOG']\n")),Object(s.b)("p",null,"You can reassign a portion of a list to another list. For example:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python"},">>> symlist[-2:] = mysyms\n>>> symlist\n['HPQ', 'AAPL', 'AIG', 'MSFT', 'YHOO', 'GOOG']\n>>>\n")),Object(s.b)("p",null,"When you do this, the list on the left-hand-side (",Object(s.b)("inlineCode",{parentName:"p"},"symlist"),") will be resized as appropriate to make the right-hand-side (",Object(s.b)("inlineCode",{parentName:"p"},"mysyms"),") fit.\nFor instance, in the above example, the last two items of ",Object(s.b)("inlineCode",{parentName:"p"},"symlist")," got replaced by the single item in the list ",Object(s.b)("inlineCode",{parentName:"p"},"mysyms"),"."),Object(s.b)("h3",{id:"exercise-120-looping-over-list-items"},"Exercise 1.20: Looping over list items"),Object(s.b)("p",null,"The ",Object(s.b)("inlineCode",{parentName:"p"},"for")," loop works by looping over data in a sequence such as a list.\nCheck this out by typing the following loop and watching what happens:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python"},">>> for s in symlist:\n        print('s =', s)\n# Look at the output\n")),Object(s.b)("h3",{id:"exercise-121-membership-tests"},"Exercise 1.21: Membership tests"),Object(s.b)("p",null,"Use the ",Object(s.b)("inlineCode",{parentName:"p"},"in")," or ",Object(s.b)("inlineCode",{parentName:"p"},"not in")," operator to check if ",Object(s.b)("inlineCode",{parentName:"p"},"'AIG'"),",",Object(s.b)("inlineCode",{parentName:"p"},"'AA'"),", and ",Object(s.b)("inlineCode",{parentName:"p"},"'CAT'")," are in the list of symbols."),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python"},">>> # Is 'AIG' IN the `symlist`?\nTrue\n>>> # Is 'AA' IN the `symlist`?\nFalse\n>>> # Is 'CAT' NOT IN the `symlist`?\nTrue\n>>>\n")),Object(s.b)("h3",{id:"exercise-122-appending-inserting-and-deleting-items"},"Exercise 1.22: Appending, inserting, and deleting items"),Object(s.b)("p",null,"Use the ",Object(s.b)("inlineCode",{parentName:"p"},"append()")," method to add the symbol ",Object(s.b)("inlineCode",{parentName:"p"},"'RHT'")," to end of ",Object(s.b)("inlineCode",{parentName:"p"},"symlist"),"."),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python"},">>> # append 'RHT'\n>>> symlist\n['HPQ', 'AAPL', 'AIG', 'MSFT', 'YHOO', 'GOOG', 'RHT']\n>>>\n")),Object(s.b)("p",null,"Use the ",Object(s.b)("inlineCode",{parentName:"p"},"insert()")," method to insert the symbol ",Object(s.b)("inlineCode",{parentName:"p"},"'AA'")," as the second item in the list."),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python"},">>> # Insert 'AA' as the second item in the list\n>>> symlist\n['HPQ', 'AA', 'AAPL', 'AIG', 'MSFT', 'YHOO', 'GOOG', 'RHT']\n>>>\n")),Object(s.b)("p",null,"Use the ",Object(s.b)("inlineCode",{parentName:"p"},"remove()")," method to remove ",Object(s.b)("inlineCode",{parentName:"p"},"'MSFT'")," from the list."),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python"},">>> # Remove 'MSFT'\n>>> symlist\n['HPQ', 'AA', 'AAPL', 'AIG', 'YHOO', 'GOOG', 'RHT']\n>>>\n")),Object(s.b)("p",null,"Append a duplicate entry for ",Object(s.b)("inlineCode",{parentName:"p"},"'YHOO'")," at the end of the list."),Object(s.b)("p",null,Object(s.b)("em",{parentName:"p"},"Note: it is perfectly fine for a list to have duplicate values.")),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python"},">>> # Append 'YHOO'\n>>> symlist\n['HPQ', 'AA', 'AAPL', 'AIG', 'YHOO', 'GOOG', 'RHT', 'YHOO']\n>>>\n")),Object(s.b)("p",null,"Use the ",Object(s.b)("inlineCode",{parentName:"p"},"index()")," method to find the first position of ",Object(s.b)("inlineCode",{parentName:"p"},"'YHOO'")," in the list."),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python"},">>> # Find the first index of 'YHOO'\n4\n>>> symlist[4]\n'YHOO'\n>>>\n")),Object(s.b)("p",null,"Count how many times ",Object(s.b)("inlineCode",{parentName:"p"},"'YHOO'")," is in the list:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python"},">>> symlist.count('YHOO')\n2\n>>>\n")),Object(s.b)("p",null,"Remove the first occurrence of ",Object(s.b)("inlineCode",{parentName:"p"},"'YHOO'"),"."),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python"},">>> # Remove first occurrence 'YHOO'\n>>> symlist\n['HPQ', 'AA', 'AAPL', 'AIG', 'GOOG', 'RHT', 'YHOO']\n>>>\n")),Object(s.b)("p",null,"Just so you know, there is no method to find or remove all occurrences of an item.\nHowever, we'll see an elegant way to do this in section 2."),Object(s.b)("h3",{id:"exercise-123-sorting"},"Exercise 1.23: Sorting"),Object(s.b)("p",null,"Want to sort a list?  Use the ",Object(s.b)("inlineCode",{parentName:"p"},"sort()")," method. Try it out:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python"},">>> symlist.sort()\n>>> symlist\n['AA', 'AAPL', 'AIG', 'GOOG', 'HPQ', 'RHT', 'YHOO']\n>>>\n")),Object(s.b)("p",null,"Want to sort in reverse? Try this:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python"},">>> symlist.sort(reverse=True)\n>>> symlist\n['YHOO', 'RHT', 'HPQ', 'GOOG', 'AIG', 'AAPL', 'AA']\n>>>\n")),Object(s.b)("p",null,"Note: Sorting a list modifies its contents 'in-place'.  That is, the elements of the list are shuffled around, but no new list is created as a result."),Object(s.b)("h3",{id:"exercise-124-putting-it-all-back-together"},"Exercise 1.24: Putting it all back together"),Object(s.b)("p",null,"Want to take a list of strings and join them together into one string?\nUse the ",Object(s.b)("inlineCode",{parentName:"p"},"join()")," method of strings like this (note: this looks funny at first)."),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python"},">>> a = ','.join(symlist)\n>>> a\n'YHOO,RHT,HPQ,GOOG,AIG,AAPL,AA'\n>>> b = ':'.join(symlist)\n>>> b\n'YHOO:RHT:HPQ:GOOG:AIG:AAPL:AA'\n>>> c = ''.join(symlist)\n>>> c\n'YHOORHTHPQGOOGAIGAAPLAA'\n>>>\n")),Object(s.b)("h3",{id:"exercise-125-lists-of-anything"},"Exercise 1.25: Lists of anything"),Object(s.b)("p",null,"Lists can contain any kind of object, including other lists (e.g., nested lists).\nTry this out:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python"},">>> nums = [101, 102, 103]\n>>> items = ['spam', symlist, nums]\n>>> items\n['spam', ['YHOO', 'RHT', 'HPQ', 'GOOG', 'AIG', 'AAPL', 'AA'], [101, 102, 103]]\n")),Object(s.b)("p",null,"Pay close attention to the above output. ",Object(s.b)("inlineCode",{parentName:"p"},"items")," is a list with three elements.\nThe first element is a string, but the other two elements are lists."),Object(s.b)("p",null,"You can access items in the nested lists by using multiple indexing operations."),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python"},">>> items[0]\n'spam'\n>>> items[0][0]\n's'\n>>> items[1]\n['YHOO', 'RHT', 'HPQ', 'GOOG', 'AIG', 'AAPL', 'AA']\n>>> items[1][1]\n'RHT'\n>>> items[1][1][2]\n'T'\n>>> items[2]\n[101, 102, 103]\n>>> items[2][1]\n102\n>>>\n")),Object(s.b)("p",null,"Even though it is technically possible to make very complicated list\nstructures, as a general rule, you want to keep things simple.\nUsually lists hold items that are all the same kind of value.  For\nexample, a list that consists entirely of numbers or a list of text\nstrings.  Mixing different kinds of data together in the same list is\noften a good way to make your head explode so it's best avoided."))}p.isMDXComponent=!0}}]);