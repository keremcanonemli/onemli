(window.webpackJsonp=window.webpackJsonp||[]).push([[126],{198:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return c})),t.d(n,"metadata",(function(){return p})),t.d(n,"toc",(function(){return s})),t.d(n,"default",(function(){return b}));var a=t(3),r=t(8),l=(t(0),t(280)),c={id:"variable_unpacking",title:"Variable Unpacking",sidebar_label:"8.2 Variable Unpacking",slug:"variable_unpacking",custom_edit_url:null},p={unversionedId:"python/python_basic_examples/variable_unpacking",id:"python/python_basic_examples/variable_unpacking",isDocsHomePage:!1,title:"Variable Unpacking",description:"Variable unpacking is a special syntax that allows to assign elements of an iterable to variables.",source:"@site/docs/python/python_basic_examples/2_variable_unpacking.md",slug:"/python/python_basic_examples/variable_unpacking",permalink:"/docs/python/python_basic_examples/variable_unpacking",editUrl:null,version:"current",sidebar_label:"8.2 Variable Unpacking",sidebar:"someSidebar",previous:{title:"Formatting Lines With F-Strings",permalink:"/docs/python/python_basic_examples/formatting_lines_with_f_strings"},next:{title:"List Dict Set Comprehensions",permalink:"/docs/python/python_basic_examples/list_dict_set_comprehensions"}},s=[{value:"Replacement of unnecessary elements <code>_</code>",id:"replacement-of-unnecessary-elements-_",children:[]},{value:"Use <code>*</code>",id:"use-",children:[]},{value:"Unpacking examples",id:"unpacking-examples",children:[{value:"Unpacking of iterable objects",id:"unpacking-of-iterable-objects",children:[]},{value:"Example of unpacking in <em>for</em> loop",id:"example-of-unpacking-in-for-loop",children:[]}]}],i={toc:s};function b(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(l.b)("wrapper",Object(a.a)({},i,t,{components:n,mdxType:"MDXLayout"}),Object(l.b)("p",null,"Variable unpacking is a special syntax that allows to assign elements of an iterable to variables."),Object(l.b)("p",null,"Note"),Object(l.b)("p",null,"This functionality is often referred to as tuple unpacking but unpacking works on any iterable object, not only with tuples"),Object(l.b)("p",null,"Example of variable unpacking:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"interface = ['FastEthernet0/1', '10.1.1.1', 'up', 'up']\n\nintf, ip, status, protocol = interface\n\nprint(intf)\n\nprint(ip)\n\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"FastEthernet0/1\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"10.1.1.1\n")),Object(l.b)("p",null,"This option is much more convenient than the use of indexes:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," intf, ip, status, protocol = interface[0], interface[1], interface[2], interface[3]\n")),Object(l.b)("p",null,"When you unpack variables, each item in list falls into the corresponding variable. It is important to take into account that there should be exactly as many variables on the left as there are elements in the list."),Object(l.b)("p",null,"If amount of variables are less or more, there will be an exception:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"intf, ip, status = interface\n\nintf, ip, status, protocol , subnet = interface\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},'Traceback (most recent call last):\n  File "...", line 9, in <module>\n    intf, ip, status = interface\nValueError: too many values to unpack (expected 3)\n')),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},'Traceback (most recent call last):\n  File "...", line 9, in <module>\n    intf, ip, status, protocol , subnet = interface\nValueError: not enough values to unpack (expected 5, got 4)\n')),Object(l.b)("h2",{id:"replacement-of-unnecessary-elements-_"},"Replacement of unnecessary elements ",Object(l.b)("inlineCode",{parentName:"h2"},"_")),Object(l.b)("p",null,"Often only some of elements of an iterable are needed. Unpacking syntax requires that exactly as many variables as elements in the object being iterated be specified."),Object(l.b)("p",null,"If, for example, only VLAN, MAC and interface should be obtained from line, you still need to specify a variable for \u201cDYNAMIC\u201d:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"line = '100    01bb.c580.7000    DYNAMIC     Gi0/1'\n\nvlan, mac, item_type, intf = line.split()\n\nprint(vlan)\n\nprint(intf)\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"100\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"Gi0/1\n")),Object(l.b)("p",null,"If record type is no longer needed, you can replace item_type variable with underline character:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"vlan, mac, _, intf = line.split()\n")),Object(l.b)("p",null,"This clearly indicates that this element is not needed."),Object(l.b)("p",null,"Underline character can be used more than once:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"dhcp = '00:09:BB:3D:D6:58   10.1.10.2        86250       dhcp-snooping   10    FastEthernet0/1'\n\nmac, ip, _, _, vlan, intf = dhcp.split()\n\nprint(mac)\n\nprint(vlan)\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-markdown"},"00:09:BB:3D:D6:58\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"10\n")),Object(l.b)("h2",{id:"use-"},"Use ",Object(l.b)("inlineCode",{parentName:"h2"},"*")),Object(l.b)("p",null,"Variable unpacking supports a special syntax that allows unpacking of several elements into one. If you put ",Object(l.b)("inlineCode",{parentName:"p"},"*")," in front of variable name, all elements except those that are explicitly assigned will be written into it."),Object(l.b)("p",null,"For example, you can get the first element in ",Object(l.b)("em",{parentName:"p"},"first")," variable and the rest in ",Object(l.b)("em",{parentName:"p"},"rest"),":"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"vlans = [10, 11, 13, 30]\n\nfirst, *rest = vlans\n\nprint(first)\n\nprint(rest)\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"10\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"[11, 13, 30]\n")),Object(l.b)("p",null,"Variable with an asterisk will always contain a list:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"vlans = (10, 11, 13, 30)\n\nfirst, *rest = vlans\n\nprint(first)\n\n\nprint(rest)\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"10\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"[11, 13, 30]\n")),Object(l.b)("p",null,"If there is only one item, unpacking will still work:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"vlans = (10, 11, 13, 30)\nfirst, *rest = vlans\n\nprint(first)\n\nprint(rest)\n\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"10\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"[11, 13, 30]\n")),Object(l.b)("p",null,"There can be only one variable with an asterisk in the unpacking expression."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"vlans = (10, 11, 13, 30)\nfirst, *rest, *others = vlans\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},'File "...", line 2\n    first, *rest, *others = vlans\n    ^\nSyntaxError: two starred expressions in assignment\n')),Object(l.b)("p",null,"This variable may not only be at the end of expression:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"vlans = (10, 11, 13, 30)\n\n*rest, last = vlans\n\nprint(rest)\n\nprint(last)\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"[10, 11, 13]\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"30\n")),Object(l.b)("p",null,"Thus, the first, second and last element can be specified:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"cdp = 'SW1     Eth 0/0    140   S I   WS-C3750-  Eth 0/1'\n\nname, l_intf, *other, r_intf = cdp.split()\n\nprint(name)\n\nprint(l_intf)\n\nprint(r_intf)\n\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"SW1\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"Eth\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"0/1\n")),Object(l.b)("h2",{id:"unpacking-examples"},"Unpacking examples"),Object(l.b)("h3",{id:"unpacking-of-iterable-objects"},"Unpacking of iterable objects"),Object(l.b)("p",null,"These examples show that you can unpack not only lists, tuples and strings but also any other iterable objects."),Object(l.b)("p",null,"Unpacking the range:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"first, *rest = range(1, 6)\n\nprint(first)\n\nprint(rest)\n\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"1\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"[2, 3, 4, 5]\n")),Object(l.b)("p",null,"Unpacking zip:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"a = [1, 2, 3, 4, 5]\n\nb = [100, 200, 300, 400, 500]\n\nprint(zip(a, b))\n\nprint(list(zip(a, b)))\nfirst, *rest, last = zip(a, b)\n\nprint(first)\n\nprint(rest)\n\nprint(last)\n\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"<zip object at 0x000002AE27C49180>\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"[(1, 100), (2, 200), (3, 300), (4, 400), (5, 500)]\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"(1, 100)\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"[(2, 200), (3, 300), (4, 400)]\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"(5, 500)\n")),Object(l.b)("h3",{id:"example-of-unpacking-in-for-loop"},"Example of unpacking in ",Object(l.b)("em",{parentName:"h3"},"for")," loop"),Object(l.b)("p",null,"Example of a loop that runs through the keys:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"access_template = ['switchport mode access',\n                   'switchport access vlan',\n                   'spanning-tree portfast',\n                   'spanning-tree bpduguard enable']\n\n\naccess = {'0/12':10,\n          '0/14':11,\n          '0/16':17}\n\n\nfor intf in access:\n    print('interface FastEthernet' + intf)\n    for command in access_template:\n        if command.endswith('access vlan'):\n            print(' {} {}'.format(command, access[intf]))\n        else:\n            print(' {}'.format(command))\n\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"interface FastEthernet0/12\n switchport mode access\n switchport access vlan 10\n spanning-tree portfast\n spanning-tree bpduguard enable\ninterface FastEthernet0/14\n switchport mode access\n switchport access vlan 11\n spanning-tree portfast\n spanning-tree bpduguard enable\ninterface FastEthernet0/16\n switchport mode access\n switchport access vlan 17\n spanning-tree portfast\n spanning-tree bpduguard enable\n")),Object(l.b)("p",null,"Instead, you can run through key-value pairs and immediately unpack them into different variables:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"for intf, vlan in access.items():\n    print('interface FastEthernet' + intf)\n    for command in access_template:\n        if command.endswith('access vlan'):\n            print(' {} {}'.format(command, vlan))\n        else:\n            print(' {}'.format(command))\n\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"interface FastEthernet0/12\n switchport mode access\n switchport access vlan 10\n spanning-tree portfast\n spanning-tree bpduguard enable\ninterface FastEthernet0/14\n switchport mode access\n switchport access vlan 11\n spanning-tree portfast\n spanning-tree bpduguard enable\ninterface FastEthernet0/16\n switchport mode access\n switchport access vlan 17\n spanning-tree portfast\n spanning-tree bpduguard enable\n")),Object(l.b)("p",null,"Example of unpacking list items in the loop:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"table =[['100', 'a1b2.ac10.7000', 'DYNAMIC', 'Gi0/1'],\n ['200', 'a0d4.cb20.7000', 'DYNAMIC', 'Gi0/2'],\n ['300', 'acb4.cd30.7000', 'DYNAMIC', 'Gi0/3'],\n ['100', 'a2bb.ec40.7000', 'DYNAMIC', 'Gi0/4'],\n ['500', 'aa4b.c550.7000', 'DYNAMIC', 'Gi0/5'],\n ['200', 'a1bb.1c60.7000', 'DYNAMIC', 'Gi0/6'],\n ['300', 'aa0b.cc70.7000', 'DYNAMIC', 'Gi0/7']]\n\n\nfor line in table:\n    vlan, mac, _, intf = line\n    print(vlan, mac, intf)\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"100 a1b2.ac10.7000 Gi0/1\n200 a0d4.cb20.7000 Gi0/2\n300 acb4.cd30.7000 Gi0/3\n100 a2bb.ec40.7000 Gi0/4\n500 aa4b.c550.7000 Gi0/5\n200 a1bb.1c60.7000 Gi0/6\n300 aa0b.cc70.7000 Gi0/7\n")),Object(l.b)("p",null,"But it\u2019s better to do this:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"for vlan, mac, _, intf in table:\n    print(vlan, mac, intf)\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"100 a1b2.ac10.7000 Gi0/1\n200 a0d4.cb20.7000 Gi0/2\n300 acb4.cd30.7000 Gi0/3\n100 a2bb.ec40.7000 Gi0/4\n500 aa4b.c550.7000 Gi0/5\n200 a1bb.1c60.7000 Gi0/6\n300 aa0b.cc70.7000 Gi0/7\n")))}b.isMDXComponent=!0},280:function(e,n,t){"use strict";t.d(n,"a",(function(){return o})),t.d(n,"b",(function(){return O}));var a=t(0),r=t.n(a);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function c(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function p(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?c(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=r.a.createContext({}),b=function(e){var n=r.a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):p(p({},n),e)),t},o=function(e){var n=b(e.components);return r.a.createElement(i.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},m=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,c=e.parentName,i=s(e,["components","mdxType","originalType","parentName"]),o=b(t),m=a,O=o["".concat(c,".").concat(m)]||o[m]||u[m]||l;return t?r.a.createElement(O,p(p({ref:n},i),{},{components:t})):r.a.createElement(O,p({ref:n},i))}));function O(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,c=new Array(l);c[0]=m;var p={};for(var s in n)hasOwnProperty.call(n,s)&&(p[s]=n[s]);p.originalType=e,p.mdxType="string"==typeof e?e:a,c[1]=p;for(var i=2;i<l;i++)c[i]=t[i];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"}}]);