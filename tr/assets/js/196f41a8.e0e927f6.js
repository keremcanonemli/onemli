(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{280:function(e,n,t){"use strict";t.d(n,"a",(function(){return m})),t.d(n,"b",(function(){return b}));var a=t(0),i=t.n(a);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var o=i.a.createContext({}),u=function(e){var n=i.a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},m=function(e){var n=u(e.components);return i.a.createElement(o.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return i.a.createElement(i.a.Fragment,{},n)}},d=i.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,r=e.parentName,o=c(e,["components","mdxType","originalType","parentName"]),m=u(t),d=a,b=m["".concat(r,".").concat(d)]||m[d]||p[d]||l;return t?i.a.createElement(b,s(s({ref:n},o),{},{components:t})):i.a.createElement(b,s({ref:n},o))}));function b(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,r=new Array(l);r[0]=d;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,r[1]=s;for(var o=2;o<l;o++)r[o]=t[o];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},99:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return r})),t.d(n,"metadata",(function(){return s})),t.d(n,"toc",(function(){return c})),t.d(n,"default",(function(){return u}));var a=t(3),i=t(8),l=(t(0),t(280)),r={id:"netmiko_using_textfsm_templates",title:"\ud83d\udcbb TextFSM Templates",sidebar_label:"\ud83d\udcbb TextFSM Templates",slug:"netmiko_using_textfsm_templates",custom_edit_url:null},s={unversionedId:"netmiko/scripts/netmiko_using_textfsm_templates",id:"netmiko/scripts/netmiko_using_textfsm_templates",isDocsHomePage:!1,title:"\ud83d\udcbb TextFSM Templates",description:"NTC-Templates is an Apache 2.0 licensed project of Network To Code. NTC-Templates contains a set of multi-vendor templates. In background uses Google\u2019s TextFSM parsing engine. TextFSM templates for parsing show commands of network devices.",source:"@site/docs/netmiko/scripts/14_netmiko_using_textfsm_templates.md",slug:"/netmiko/scripts/netmiko_using_textfsm_templates",permalink:"/tr/docs/netmiko/scripts/netmiko_using_textfsm_templates",editUrl:null,version:"current",sidebar_label:"\ud83d\udcbb TextFSM Templates",sidebar:"someSidebar",previous:{title:"\ud83d\udcbb Connecting Devices",permalink:"/tr/docs/netmiko/scripts/netmiko_connecting_devices"}},c=[{value:"Installation",id:"installation",children:[]},{value:"Supported Show Commands",id:"supported-show-commands",children:[]},{value:"Example",id:"example",children:[{value:"Device Definition",id:"device-definition",children:[]},{value:"Without TextFSM",id:"without-textfsm",children:[]},{value:"With TextFSM",id:"with-textfsm",children:[]},{value:"Make More Readable with JSON",id:"make-more-readable-with-json",children:[]}]},{value:"Using Excel",id:"using-excel",children:[{value:"Example",id:"example-1",children:[]}]}],o={toc:c};function u(e){var n=e.components,t=Object(i.a)(e,["components"]);return Object(l.b)("wrapper",Object(a.a)({},o,t,{components:n,mdxType:"MDXLayout"}),Object(l.b)("div",{className:"admonition admonition-warning alert alert--danger"},Object(l.b)("div",{parentName:"div",className:"admonition-heading"},Object(l.b)("h5",{parentName:"div"},Object(l.b)("span",{parentName:"h5",className:"admonition-icon"},Object(l.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(l.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"NTC Templates")),Object(l.b)("div",{parentName:"div",className:"admonition-content"},Object(l.b)("p",{parentName:"div"},"NTC-Templates is an Apache 2.0 licensed project of ",Object(l.b)("a",{parentName:"p",href:"https://www.networktocode.com/"},"Network To Code"),". NTC-Templates contains a set of multi-vendor templates",Object(l.b)("strong",{parentName:"p"},".")," In background uses Google\u2019s ",Object(l.b)("a",{parentName:"p",href:"https://github.com/google/textfsm"},Object(l.b)("strong",{parentName:"a"},"TextFSM"))," parsing engine. TextFSM templates for parsing ",Object(l.b)("inlineCode",{parentName:"p"},"show")," commands of network devices."))),Object(l.b)("h2",{id:"installation"},"Installation"),Object(l.b)("p",null,"NTC-Templates automatically installed with Netmiko. If you want to install without netmiko you just need following command : "),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"pip install ntc_templates\n")),Object(l.b)("p",null,"\u200b    "),Object(l.b)("h2",{id:"supported-show-commands"},"Supported Show Commands"),Object(l.b)("p",null,"TextFSM templates are multi-vendor and support many demonstration commands. Just click ",Object(l.b)("a",{parentName:"p",href:"https://github.com/networktocode/ntc-templates/tree/master/ntc_templates/templates"},Object(l.b)("strong",{parentName:"a"},"this link"))," to view which commands it supports. Also, if you want to access this list from your computer:",Object(l.b)("inlineCode",{parentName:"p"},"/site-packages/ntc_templates/templates")),Object(l.b)("p",null,"\u200b    "),Object(l.b)("h2",{id:"example"},"Example"),Object(l.b)("h3",{id:"device-definition"},"Device Definition"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"from netmiko import ConnectHandler\nimport json\n\ndevice= { \n        'device_type': 'cisco_ios', \n        'host': '192.168.10.12', \n        'username': 'keremcan', \n        'password': 'onemli',\n        'secret':'onem.li'\n        } \n")),Object(l.b)("h3",{id:"without-textfsm"},"Without TextFSM"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},'with ConnectHandler(**device) as connection:\n    output= connection.send_command("show vlan brief")\n    print(output)\n')),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-javascript"},"1    default                          active    Gi0/0, Gi0/1, Gi0/2, Gi0/3, Gi1/0, Gi1/1, Gi1/2, Gi1/3\n100  IT                               active    \n200  AP                               active    \n300  OOB                              active    \n1002 fddi-default                     act/unsup \n1003 token-ring-default               act/unsup \n1004 fddinet-default                  act/unsup \n1005 trnet-default                    act/unsup \n\nProcess finished with exit code 0\n\n")),Object(l.b)("h3",{id:"with-textfsm"},"With TextFSM"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},'with ConnectHandler(**device1) as connection:\n    print(connection.send_command("show vlan brief",use_textfsm=True))\n')),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-json"},"[{'vlan_id': '1', 'name': 'default', 'status': 'active', 'interfaces': ['Gi0/0', 'Gi0/1', 'Gi0/2', 'Gi0/3', 'Gi1/0', 'Gi1/1', 'Gi1/2', 'Gi1/3']}, {'vlan_id': '100', 'name': 'IT', 'status': 'active', 'interfaces': []}, {'vlan_id': '200', 'name': 'AP', 'status': 'active', 'interfaces': []}, {'vlan_id': '300', 'name': 'OOB', 'status': 'active', 'interfaces': []}, {'vlan_id': '1002', 'name': 'fddi-default', 'status': 'act/unsup', 'interfaces': []}, {'vlan_id': '1003', 'name': 'token-ring-default', 'status': 'act/unsup', 'interfaces': []}, {'vlan_id': '1004', 'name': 'fddinet-default', 'status': 'act/unsup', 'interfaces': []}, {'vlan_id': '1005', 'name': 'trnet-default', 'status': 'act/unsup', 'interfaces': []}]\n\n")),Object(l.b)("h3",{id:"make-more-readable-with-json"},"Make More Readable with JSON"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},'with ConnectHandler(**device) as connection:\n    output = connection.send_command("show vlan brief",use_textfsm=True)\n    print(json.dumps(output,indent=4))\n')),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-json"},'[\n    {\n        "vlan_id": "1",\n        "name": "default",\n        "status": "active",\n        "interfaces": [\n            "Gi0/0",\n            "Gi0/1",\n            "Gi0/2",\n            "Gi0/3",\n            "Gi1/0",\n            "Gi1/1",\n            "Gi1/2",\n            "Gi1/3"\n        ]\n    },\n    {\n        "vlan_id": "100",\n        "name": "IT",\n        "status": "active",\n        "interfaces": []\n    },\n    {\n        "vlan_id": "200",\n        "name": "AP",\n        "status": "active",\n        "interfaces": []\n    },\n    {\n        "vlan_id": "300",\n        "name": "OOB",\n        "status": "active",\n        "interfaces": []\n    },\n    {\n        "vlan_id": "1002",\n        "name": "fddi-default",\n        "status": "act/unsup",\n        "interfaces": []\n    },\n    {\n        "vlan_id": "1003",\n        "name": "token-ring-default",\n        "status": "act/unsup",\n        "interfaces": []\n    },\n    {\n        "vlan_id": "1004",\n        "name": "fddinet-default",\n        "status": "act/unsup",\n        "interfaces": []\n    },\n    {\n        "vlan_id": "1005",\n        "name": "trnet-default",\n        "status": "act/unsup",\n        "interfaces": []\n    }\n]\n')),Object(l.b)("p",null,"\u200b    "),Object(l.b)("h2",{id:"using-excel"},"Using Excel"),Object(l.b)("p",null,"In the ",Object(l.b)("a",{parentName:"p",href:"/docs/netmiko/scripts/netmiko_connecting_devices"},"previous example"),", we connect devices with excel. In this example, I add new columns in the ",Object(l.b)("inlineCode",{parentName:"p"},"Hosts.xlsx")," for parsing with text_fsm formatting with JSON."),Object(l.b)("p",null,"\u200b    "),Object(l.b)("h3",{id:"example-1"},"Example"),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",{parentName:"tr",align:null},"device_type"),Object(l.b)("th",{parentName:"tr",align:null},"host"),Object(l.b)("th",{parentName:"tr",align:null},"username"),Object(l.b)("th",{parentName:"tr",align:null},"password"),Object(l.b)("th",{parentName:"tr",align:null},"secret"),Object(l.b)("th",{parentName:"tr",align:null},"sleep"),Object(l.b)("th",{parentName:"tr",align:null},"text_fsm"),Object(l.b)("th",{parentName:"tr",align:null},"json"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"cisco_ios"),Object(l.b)("td",{parentName:"tr",align:null},"192.168.10.12"),Object(l.b)("td",{parentName:"tr",align:null},"keremcan"),Object(l.b)("td",{parentName:"tr",align:null},"onemli"),Object(l.b)("td",{parentName:"tr",align:null},"onem.li"),Object(l.b)("td",{parentName:"tr",align:null},"10"),Object(l.b)("td",{parentName:"tr",align:null},"TRUE"),Object(l.b)("td",{parentName:"tr",align:null},"TRUE")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"cisco_ios"),Object(l.b)("td",{parentName:"tr",align:null},"192.168.10.13"),Object(l.b)("td",{parentName:"tr",align:null},"keremcan"),Object(l.b)("td",{parentName:"tr",align:null},"onemli"),Object(l.b)("td",{parentName:"tr",align:null},"onem.li"),Object(l.b)("td",{parentName:"tr",align:null},"10"),Object(l.b)("td",{parentName:"tr",align:null},"FALSE"),Object(l.b)("td",{parentName:"tr",align:null},"FALSE")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"cisco_ios"),Object(l.b)("td",{parentName:"tr",align:null},"192.168.10.14"),Object(l.b)("td",{parentName:"tr",align:null},"keremcan"),Object(l.b)("td",{parentName:"tr",align:null},"onemli"),Object(l.b)("td",{parentName:"tr",align:null},"onem.li"),Object(l.b)("td",{parentName:"tr",align:null},"10"),Object(l.b)("td",{parentName:"tr",align:null},"FALSE"),Object(l.b)("td",{parentName:"tr",align:null},"FALSE")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"cisco_ios"),Object(l.b)("td",{parentName:"tr",align:null},"192.168.10.15"),Object(l.b)("td",{parentName:"tr",align:null},"keremcan"),Object(l.b)("td",{parentName:"tr",align:null},"onemli"),Object(l.b)("td",{parentName:"tr",align:null},"onem.li"),Object(l.b)("td",{parentName:"tr",align:null},"10"),Object(l.b)("td",{parentName:"tr",align:null},"FALSE"),Object(l.b)("td",{parentName:"tr",align:null},"FALSE")))),Object(l.b)("p",null,"\u200b    "),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},'from netmiko import ConnectHandler\nfrom openpyxl import load_workbook\nfrom datetime import datetime\nimport json\nimport time\n# Worksheet from Hosts.xlsx file. Set the active worksheet index 0\nworkBook = load_workbook("Hosts.xlsx")\nworkBook.active = 0\n# Sheet id\'s starting at 0 in openpyxl, like list\'s index value.\nworkSheet = workBook.active\n\n# if there is any sleep value specified in Hosts.xlsx, we can assign value to SLEEP variable\nSLEEP = 0\n\n# min_row specifies from which line the loop will start\nfor row in workSheet.iter_rows(min_row=2):\n    # we will add values from excel file one by one to the DEVICE dictionary\n    DEVICE = {}\n    PARSING= {}\n    for cell in row:\n        if cell.column == 1 and str(cell.value).strip() is not None:\n            DEVICE["device_type"] = cell.value\n        elif cell.column == 2 and str(cell.value).strip() is not None:\n            DEVICE["host"] = cell.value\n        elif cell.column == 3 and str(cell.value).strip() is not None:\n            DEVICE["username"] = cell.value\n        elif cell.column == 4 and str(cell.value).strip() is not None:\n            DEVICE["password"] = cell.value\n        elif cell.column == 5 and str(cell.value).strip() is not None:\n            DEVICE["secret"] = cell.value\n        elif cell.column == 6 and str(cell.value).strip() is not None and str(cell.value).isdigit():\n            SLEEP = cell.value\n        # TextFSM Column value checking\n        elif cell.column == 7 and str(cell.value).strip() is not None:\n            if cell.value == "True" or cell.value == "False":\n                PARSING["textfsm"] = cell.value\n            else:\n                print("TextFSM Value Error")\n        # Json Column value checking\n        elif cell.column == 8 and str(cell.value).strip() is not None:\n            if cell.value == "True" or cell.value == "False":\n                PARSING["json"] = cell.value\n            else:\n                print("JSON Value Error")\n\n    # Establish the connection\n    try:\n        print(10 * "*",  "START TIME --\x3e ",datetime.now(),"CONNECTING --\x3e ", DEVICE["host"], 10 * "*")\n        net_connect = ConnectHandler(**DEVICE)\n\n        if PARSING["json"] == "True":\n            time.sleep(SLEEP)\n            print(json.dumps(net_connect.send_command("show vlan brief",use_textfsm=PARSING["textfsm"]),indent=4))\n            print(10 * "*", "FINISH TIME --\x3e ", datetime.now(), "FINISHED --\x3e ", DEVICE["host"], 10 * "*","\\n\\n")\n\n        else:\n            time.sleep(SLEEP)\n            print(net_connect.send_command("show vlan brief",use_textfsm=PARSING["textfsm"]))\n            print(10 * "*",  "FINISH TIME --\x3e ",datetime.now(),"FINISHED --\x3e ", DEVICE["host"], 10 * "*","\\n\\n")\n\n    except Exception as e:\n        print(10 * "*",  "FAILED TIME --\x3e ",datetime.now(),"FAILED --\x3e ", DEVICE["host"], 10 * "*")\n        print(f"Houston We Have a Connection Problem to {DEVICE[\'host\']}")\n')),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-javascript"},"********** START TIME --\x3e  2021-03-19 21:22:29.614120 CONNECTING --\x3e  192.168.10.12 **********\n[\n    {\n        \"vlan_id\": \"1\",\n        \"name\": \"default\",\n        \"status\": \"active\",\n        \"interfaces\": [\n            \"Gi0/0\",\n            \"Gi0/1\",\n            \"Gi0/2\",\n            \"Gi0/3\",\n            \"Gi1/0\",\n            \"Gi1/1\",\n            \"Gi1/2\",\n            \"Gi1/3\"\n        ]\n    },\n    {\n        \"vlan_id\": \"100\",\n        \"name\": \"IT\",\n        \"status\": \"active\",\n        \"interfaces\": []\n    },\n    {\n        \"vlan_id\": \"200\",\n        \"name\": \"AP\",\n        \"status\": \"active\",\n        \"interfaces\": []\n    },\n    {\n        \"vlan_id\": \"300\",\n        \"name\": \"OOB\",\n        \"status\": \"active\",\n        \"interfaces\": []\n    },\n    {\n        \"vlan_id\": \"1002\",\n        \"name\": \"fddi-default\",\n        \"status\": \"act/unsup\",\n        \"interfaces\": []\n    },\n    {\n        \"vlan_id\": \"1003\",\n        \"name\": \"token-ring-default\",\n        \"status\": \"act/unsup\",\n        \"interfaces\": []\n    },\n    {\n        \"vlan_id\": \"1004\",\n        \"name\": \"fddinet-default\",\n        \"status\": \"act/unsup\",\n        \"interfaces\": []\n    },\n    {\n        \"vlan_id\": \"1005\",\n        \"name\": \"trnet-default\",\n        \"status\": \"act/unsup\",\n        \"interfaces\": []\n    }\n]\n********** FINISH TIME --\x3e  2021-03-19 21:22:35.875171 FINISHED --\x3e  192.168.10.12 ********** \n\n\n********** START TIME --\x3e  2021-03-19 21:22:35.875171 CONNECTING --\x3e  192.168.10.13 **********\n[{'vlan_id': '1', 'name': 'default', 'status': 'active', 'interfaces': ['Gi0/0', 'Gi0/1', 'Gi0/2', 'Gi0/3', 'Gi1/0', 'Gi1/1', 'Gi1/2', 'Gi1/3']}, {'vlan_id': '1002', 'name': 'fddi-default', 'status': 'act/unsup', 'interfaces': []}, {'vlan_id': '1003', 'name': 'token-ring-default', 'status': 'act/unsup', 'interfaces': []}, {'vlan_id': '1004', 'name': 'fddinet-default', 'status': 'act/unsup', 'interfaces': []}, {'vlan_id': '1005', 'name': 'trnet-default', 'status': 'act/unsup', 'interfaces': []}]\n********** FINISH TIME --\x3e  2021-03-19 21:22:41.772457 FINISHED --\x3e  192.168.10.13 ********** \n\n\n********** START TIME --\x3e  2021-03-19 21:22:41.772457 CONNECTING --\x3e  192.168.10.14 **********\n[{'vlan_id': '1', 'name': 'default', 'status': 'active', 'interfaces': ['Gi0/0', 'Gi0/1', 'Gi0/2', 'Gi0/3', 'Gi1/0', 'Gi1/1', 'Gi1/2', 'Gi1/3']}, {'vlan_id': '1002', 'name': 'fddi-default', 'status': 'act/unsup', 'interfaces': []}, {'vlan_id': '1003', 'name': 'token-ring-default', 'status': 'act/unsup', 'interfaces': []}, {'vlan_id': '1004', 'name': 'fddinet-default', 'status': 'act/unsup', 'interfaces': []}, {'vlan_id': '1005', 'name': 'trnet-default', 'status': 'act/unsup', 'interfaces': []}]\n********** FINISH TIME --\x3e  2021-03-19 21:22:47.849741 FINISHED --\x3e  192.168.10.14 ********** \n\n\n********** START TIME --\x3e  2021-03-19 21:22:47.849741 CONNECTING --\x3e  192.168.10.15 **********\n********** FAILED TIME --\x3e  2021-03-19 21:22:52.850571 FAILED --\x3e  192.168.10.15 ********** \nHouston We Have a Connection Problem to 192.168.10.15\n")))}u.isMDXComponent=!0}}]);