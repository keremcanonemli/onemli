(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{121:function(e,n,t){"use strict";t.d(n,"a",(function(){return m})),t.d(n,"b",(function(){return d}));var a=t(0),r=t.n(a);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=r.a.createContext({}),p=function(e){var n=r.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},m=function(e){var n=p(e.components);return r.a.createElement(l.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},u=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),m=p(t),u=a,d=m["".concat(o,".").concat(u)]||m[u]||b[u]||i;return t?r.a.createElement(d,c(c({ref:n},l),{},{components:t})):r.a.createElement(d,c({ref:n},l))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=u;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var l=2;l<i;l++)o[l]=t[l];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},94:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return c})),t.d(n,"toc",(function(){return s})),t.d(n,"default",(function(){return p}));var a=t(3),r=t(8),i=(t(0),t(121)),o={id:"main_module",title:"Main Module",sidebar_label:"3.5 Main Module",slug:"main_module",custom_edit_url:null},c={unversionedId:"python/program_organization/main_module",id:"python/program_organization/main_module",isDocsHomePage:!1,title:"Main Module",description:"This section introduces the concept of a main program or main module.",source:"@site/docs/python/program_organization/05_Main_module.md",slug:"/python/program_organization/main_module",permalink:"/docs/python/program_organization/main_module",editUrl:null,version:"current",sidebar_label:"3.5 Main Module",sidebar:"someSidebar",previous:{title:"Modules",permalink:"/docs/python/program_organization/modules"},next:{title:"Design Discussion",permalink:"/docs/python/program_organization/design_discussion"}},s=[{value:"Main Functions",id:"main-functions",children:[]},{value:"Python Main Module",id:"python-main-module",children:[]},{value:"<code>__main__</code> check",id:"__main__-check",children:[]},{value:"Main programs vs. library imports",id:"main-programs-vs-library-imports",children:[]},{value:"Program Template",id:"program-template",children:[]},{value:"Command Line Tools",id:"command-line-tools",children:[]},{value:"Command Line Args",id:"command-line-args",children:[]},{value:"Standard I/O",id:"standard-io",children:[]},{value:"Environment Variables",id:"environment-variables",children:[]},{value:"Program Exit",id:"program-exit",children:[]},{value:"The <code>#!</code> line",id:"the--line",children:[]},{value:"Script Template",id:"script-template",children:[]},{value:"Exercises",id:"exercises",children:[{value:"Exercise 3.15: <code>main()</code> functions",id:"exercise-315-main-functions",children:[]},{value:"Exercise 3.16: Making Scripts",id:"exercise-316-making-scripts",children:[]}]}],l={toc:s};function p(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("p",null,"This section introduces the concept of a main program or main module."),Object(i.b)("h3",{id:"main-functions"},"Main Functions"),Object(i.b)("p",null,"In many programming languages, there is a concept of a ",Object(i.b)("em",{parentName:"p"},"main")," function or method."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-c"},"// c / c++\nint main(int argc, char *argv[]) {\n    ...\n}\n")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-java"},"// java\nclass myprog {\n    public static void main(String args[]) {\n        ...\n    }\n}\n")),Object(i.b)("p",null,"This is the first function that executes when an application is launched."),Object(i.b)("h3",{id:"python-main-module"},"Python Main Module"),Object(i.b)("p",null,"Python has no ",Object(i.b)("em",{parentName:"p"},"main")," function or method.  Instead, there is a ",Object(i.b)("em",{parentName:"p"},"main"),"\nmodule. The ",Object(i.b)("em",{parentName:"p"},"main module")," is the source file that runs first."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"bash % python3 prog.py\n...\n")),Object(i.b)("p",null,"Whatever file you give to the interpreter at startup becomes ",Object(i.b)("em",{parentName:"p"},"main"),". It doesn't matter the name."),Object(i.b)("h3",{id:"__main__-check"},Object(i.b)("inlineCode",{parentName:"h3"},"__main__")," check"),Object(i.b)("p",null,"It is standard practice for modules that run as a main script to use this convention:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"# prog.py\n...\nif __name__ == '__main__':\n    # Running as the main program ...\n    statements\n    ...\n")),Object(i.b)("p",null,"Statements enclosed inside the ",Object(i.b)("inlineCode",{parentName:"p"},"if")," statement become the ",Object(i.b)("em",{parentName:"p"},"main")," program."),Object(i.b)("h3",{id:"main-programs-vs-library-imports"},"Main programs vs. library imports"),Object(i.b)("p",null,"Any Python file can either run as main or as a library import:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"bash % python3 prog.py # Running as main\n")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"import prog   # Running as library import\n")),Object(i.b)("p",null,"In both cases, ",Object(i.b)("inlineCode",{parentName:"p"},"__name__")," is the name of the module.  However, it will only be set to ",Object(i.b)("inlineCode",{parentName:"p"},"__main__")," if\nrunning as main."),Object(i.b)("p",null,"Usually, you don't want statements that are part of the main program\nto execute on a library import.  So, it's common to have an ",Object(i.b)("inlineCode",{parentName:"p"},"if-"),"check\nin code that might be used either way."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"if __name__ == '__main__':\n    # Does not execute if loaded with import ...\n")),Object(i.b)("h3",{id:"program-template"},"Program Template"),Object(i.b)("p",null,"Here is a common program template for writing a Python program:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"# prog.py\n# Import statements (libraries)\nimport modules\n\n# Functions\ndef spam():\n    ...\n\ndef blah():\n    ...\n\n# Main function\ndef main():\n    ...\n\nif __name__ == '__main__':\n    main()\n")),Object(i.b)("h3",{id:"command-line-tools"},"Command Line Tools"),Object(i.b)("p",null,"Python is often used for command-line tools"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"bash % python3 report.py portfolio.csv prices.csv\n")),Object(i.b)("p",null,"It means that the scripts are executed from the shell /\nterminal. Common use cases are for automation, background tasks, etc."),Object(i.b)("h3",{id:"command-line-args"},"Command Line Args"),Object(i.b)("p",null,"The command line is a list of text strings."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"bash % python3 report.py portfolio.csv prices.csv\n")),Object(i.b)("p",null,"This list of text strings is found in ",Object(i.b)("inlineCode",{parentName:"p"},"sys.argv"),"."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"# In the previous bash command\nsys.argv # ['report.py, 'portfolio.csv', 'prices.csv']\n")),Object(i.b)("p",null,"Here is a simple example of processing the arguments:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"import sys\n\nif len(sys.argv) != 3:\n    raise SystemExit(f'Usage: {sys.argv[0]} ' 'portfile pricefile')\nportfile = sys.argv[1]\npricefile = sys.argv[2]\n...\n")),Object(i.b)("h3",{id:"standard-io"},"Standard I/O"),Object(i.b)("p",null,"Standard Input / Output (or stdio) are files that work the same as normal files."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"sys.stdout\nsys.stderr\nsys.stdin\n")),Object(i.b)("p",null,"By default, print is directed to ",Object(i.b)("inlineCode",{parentName:"p"},"sys.stdout"),".  Input is read from\n",Object(i.b)("inlineCode",{parentName:"p"},"sys.stdin"),".  Tracebacks and errors are directed to ",Object(i.b)("inlineCode",{parentName:"p"},"sys.stderr"),"."),Object(i.b)("p",null,"Be aware that ",Object(i.b)("em",{parentName:"p"},"stdio")," could be connected to terminals, files, pipes, etc."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"bash % python3 prog.py > results.txt\n# or\nbash % cmd1 | python3 prog.py | cmd2\n")),Object(i.b)("h3",{id:"environment-variables"},"Environment Variables"),Object(i.b)("p",null,"Environment variables are set in the shell."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"bash % setenv NAME dave\nbash % setenv RSH ssh\nbash % python3 prog.py\n")),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"os.environ")," is a dictionary that contains these values."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"import os\n\nname = os.environ['NAME'] # 'dave'\n")),Object(i.b)("p",null,"Changes are reflected in any subprocesses later launched by the program."),Object(i.b)("h3",{id:"program-exit"},"Program Exit"),Object(i.b)("p",null,"Program exit is handled through exceptions."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"raise SystemExit\nraise SystemExit(exitcode)\nraise SystemExit('Informative message')\n")),Object(i.b)("p",null,"An alternative."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"import sys\nsys.exit(exitcode)\n")),Object(i.b)("p",null,"A non-zero exit code indicates an error."),Object(i.b)("h3",{id:"the--line"},"The ",Object(i.b)("inlineCode",{parentName:"h3"},"#!")," line"),Object(i.b)("p",null,"On Unix, the ",Object(i.b)("inlineCode",{parentName:"p"},"#!")," line can launch a script as Python.\nAdd the following to the first line of your script file."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"#!/usr/bin/env python3\n# prog.py\n...\n")),Object(i.b)("p",null,"It requires the executable permission."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"bash % chmod +x prog.py\n# Then you can execute\nbash % prog.py\n... output ...\n")),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"Note: The Python Launcher on Windows also looks for the ",Object(i.b)("inlineCode",{parentName:"em"},"#!")," line to indicate language version.")),Object(i.b)("h3",{id:"script-template"},"Script Template"),Object(i.b)("p",null,"Finally, here is a common code template for Python programs that run\nas command-line scripts:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"#!/usr/bin/env python3\n# prog.py\n\n# Import statements (libraries)\nimport modules\n\n# Functions\ndef spam():\n    ...\n\ndef blah():\n    ...\n\n# Main function\ndef main(argv):\n    # Parse command line args, environment, etc.\n    ...\n\nif __name__ == '__main__':\n    import sys\n    main(sys.argv)\n")),Object(i.b)("h2",{id:"exercises"},"Exercises"),Object(i.b)("h3",{id:"exercise-315-main-functions"},"Exercise 3.15: ",Object(i.b)("inlineCode",{parentName:"h3"},"main()")," functions"),Object(i.b)("p",null,"In the file ",Object(i.b)("inlineCode",{parentName:"p"},"report.py")," add a ",Object(i.b)("inlineCode",{parentName:"p"},"main()")," function that accepts a list of\ncommand line options and produces the same output as before.  You\nshould be able to run it interatively like this:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},">>> import report\n>>> report.main(['report.py', 'Data/portfolio.csv', 'Data/prices.csv'])\n      Name     Shares      Price     Change\n---------- ---------- ---------- ----------\n        AA        100       9.22     -22.98\n       IBM         50     106.28      15.18\n       CAT        150      35.46     -47.98\n      MSFT        200      20.89     -30.34\n        GE         95      13.48     -26.89\n      MSFT         50      20.89     -44.21\n       IBM        100     106.28      35.84\n>>>\n")),Object(i.b)("p",null,"Modify the ",Object(i.b)("inlineCode",{parentName:"p"},"pcost.py")," file so that it has a similar ",Object(i.b)("inlineCode",{parentName:"p"},"main()")," function:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},">>> import pcost\n>>> pcost.main(['pcost.py', 'Data/portfolio.csv'])\nTotal cost: 44671.15\n>>>\n")),Object(i.b)("h3",{id:"exercise-316-making-scripts"},"Exercise 3.16: Making Scripts"),Object(i.b)("p",null,"Modify the ",Object(i.b)("inlineCode",{parentName:"p"},"report.py")," and ",Object(i.b)("inlineCode",{parentName:"p"},"pcost.py")," programs so that they can\nexecute as a script on the command line:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"bash $ python3 report.py Data/portfolio.csv Data/prices.csv\n      Name     Shares      Price     Change\n---------- ---------- ---------- ----------\n        AA        100       9.22     -22.98\n       IBM         50     106.28      15.18\n       CAT        150      35.46     -47.98\n      MSFT        200      20.89     -30.34\n        GE         95      13.48     -26.89\n      MSFT         50      20.89     -44.21\n       IBM        100     106.28      35.84\n\nbash $ python3 pcost.py Data/portfolio.csv\nTotal cost: 44671.15\n")))}p.isMDXComponent=!0}}]);