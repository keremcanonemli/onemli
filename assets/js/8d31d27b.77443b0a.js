(window.webpackJsonp=window.webpackJsonp||[]).push([[122],{194:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return s})),t.d(n,"metadata",(function(){return i})),t.d(n,"toc",(function(){return c})),t.d(n,"default",(function(){return p}));var o=t(3),a=t(8),r=(t(0),t(280)),s={id:"module_paramiko",title:"Module Paramiko",sidebar_label:"18.5 Module Paramiko",slug:"module_paramiko",custom_edit_url:null},i={unversionedId:"python/ssh_telnet/module_paramiko",id:"python/ssh_telnet/module_paramiko",isDocsHomePage:!1,title:"Module Paramiko",description:"Paramiko is an implementation of SSHv2 protocol on Python. Paramiko provides client-server functionality. Book covers only client functionality.",source:"@site/docs/python/ssh_telnet/5_module_paramiko.md",slug:"/python/ssh_telnet/module_paramiko",permalink:"/docs/python/ssh_telnet/module_paramiko",editUrl:null,version:"current",sidebar_label:"18.5 Module Paramiko",sidebar:"someSidebar",previous:{title:"Module Telnetlib",permalink:"/docs/python/ssh_telnet/module_telnetlib"},next:{title:"Module Netmiko",permalink:"/docs/python/ssh_telnet/module_netmiko"}},c=[{value:"Method send",id:"method-send",children:[]},{value:"Method recv",id:"method-recv",children:[]},{value:"Method close",id:"method-close",children:[]},{value:"Example of paramiko use",id:"example-of-paramiko-use",children:[]},{value:"Paginated command output",id:"paginated-command-output",children:[]}],l={toc:c};function p(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(r.b)("wrapper",Object(o.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Paramiko is an implementation of SSHv2 protocol on Python. Paramiko provides client-server functionality. Book covers only client functionality."),Object(r.b)("p",null,"Since Paramiko is not part of standard Python module library, it needs to be installed:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"pip install paramiko\n")),Object(r.b)("p",null,"Connection is established in this way: first, client is created and client configuration is set, then connection is initiated and an interactive session is returned:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},'In [2]: client = paramiko.SSHClient()\n\nIn [3]: client.set_missing_host_key_policy(paramiko.AutoAddPolicy())\n\nIn [4]: client.connect(hostname="192.168.100.1", username="cisco", password="cisco",\n   ...: look_for_keys=False, allow_agent=False)\n\nIn [5]: ssh = client.invoke_shell()\n')),Object(r.b)("p",null,"SSHClient is a class that represents a connection to SSH server. It performs client authentication. String ",Object(r.b)("inlineCode",{parentName:"p"},"set_missing_host_key_policy")," is optional, it indicates which policy to use when connecting to a server whose key is unknown. Policy ",Object(r.b)("inlineCode",{parentName:"p"},"paramiko.AutoAddPolicy()")," automatically add new hostname and key to local HostKeys object."),Object(r.b)("p",null,"Method ",Object(r.b)("inlineCode",{parentName:"p"},"connect")," connects to SSH server and authenticates the connection. Parameters:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"look_for_keys")," - by default paramiko performs key authentication. To disable this, put the flag in False"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"allow_agent")," - paramiko can connect to a local SSH agent. This is necessary when working with keys and since in this case authentication is done by login/password, it should be disabled.")),Object(r.b)("p",null,"After execution of previous command there is already a connection to server. Method ",Object(r.b)("inlineCode",{parentName:"p"},"invoke_shell")," allows to set an interactive SSH session with server."),Object(r.b)("h2",{id:"method-send"},"Method send"),Object(r.b)("p",null,"Method ",Object(r.b)("inlineCode",{parentName:"p"},"send")," - sends specified string to session and returns amount of sent bytes."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},'In [7]: ssh.send("enable\\n")\nOut[7]: 7\n\nIn [8]: ssh.send("cisco\\n")\nOut[8]: 6\n\nIn [9]: ssh.send("sh ip int br\\n")\nOut[9]: 13\n')),Object(r.b)("p",null,"Warning"),Object(r.b)("p",null,"In code, after ",Object(r.b)("inlineCode",{parentName:"p"},"send")," you will need to put time.sleep, especially between ",Object(r.b)("inlineCode",{parentName:"p"},"send")," and ",Object(r.b)("inlineCode",{parentName:"p"},"recv"),". Since this is an interactive session and commands are slow to type, everything works without pauses."),Object(r.b)("h2",{id:"method-recv"},"Method recv"),Object(r.b)("p",null,"Method ",Object(r.b)("inlineCode",{parentName:"p"},"recv")," receives data from session. In parentheses, the maximum value in bytes that can be obtained is indicated. This method returns a received string"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"In [10]: ssh.recv(3000)\nOut[10]: b'\\r\\nR1>enable\\r\\nPassword: \\r\\nR1#sh ip int br\\r\\nInterface                  IP-Address      OK? Method Status                Protocol\\r\\nEthernet0/0                192.168.100.1   YES NVRAM  up                    up      \\r\\nEthernet0/1                192.168.200.1   YES NVRAM  up                    up      \\r\\nEthernet0/2                unassigned      YES NVRAM  up                    up      \\r\\nEthernet0/3                192.168.130.1   YES NVRAM  up                    up      \\r\\nLoopback22                 10.2.2.2        YES manual up                    up      \\r\\nLoopback33                 unassigned      YES unset  up                    up      \\r\\nLoopback45                 unassigned      YES unset  up                    up      \\r\\nLoopback55                 5.5.5.5         YES manual up                    up      \\r\\nR1#'\n")),Object(r.b)("h2",{id:"method-close"},"Method close"),Object(r.b)("p",null,"Method ",Object(r.b)("inlineCode",{parentName:"p"},"close")," closes session:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"In [11]: ssh.close()\n")),Object(r.b)("h2",{id:"example-of-paramiko-use"},"Example of paramiko use"),Object(r.b)("p",null,"Example of paramiko use (3_paramiko.py file):"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},'import paramiko\nimport time\nimport socket\nfrom pprint import pprint\n\n\ndef send_show_command(\n    ip,\n    username,\n    password,\n    enable,\n    command,\n    max_bytes=60000,\n    short_pause=1,\n    long_pause=5,\n):\n    cl = paramiko.SSHClient()\n    cl.set_missing_host_key_policy(paramiko.AutoAddPolicy())\n    cl.connect(\n        hostname=ip,\n        username=username,\n        password=password,\n        look_for_keys=False,\n        allow_agent=False,\n    )\n    with cl.invoke_shell() as ssh:\n        ssh.send("enable\\n")\n        ssh.send(f"{enable}\\n")\n        time.sleep(short_pause)\n        ssh.send("terminal length 0\\n")\n        time.sleep(short_pause)\n        ssh.recv(max_bytes)\n\n        result = {}\n        for command in commands:\n            ssh.send(f"{command}\\n")\n            ssh.settimeout(5)\n\n            output = ""\n            while True:\n                try:\n                    part = ssh.recv(max_bytes).decode("utf-8")\n                    output += part\n                    time.sleep(0.5)\n                except socket.timeout:\n                    break\n            result[command] = output\n\n        return result\n\n\nif __name__ == "__main__":\n    devices = ["192.168.100.1", "192.168.100.2", "192.168.100.3"]\n    commands = ["sh clock", "sh arp"]\n    result = send_show_command("192.168.100.1", "cisco", "cisco", "cisco", commands)\n    pprint(result, width=120)\n')),Object(r.b)("p",null,"Result of script execution:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"{'sh arp': 'sh arp\\r\\n'\n           'Protocol  Address          Age (min)  Hardware Addr   Type   Interface\\r\\n'\n           'Internet  192.168.100.1           -   aabb.cc00.6500  ARPA   Ethernet0/0\\r\\n'\n           'Internet  192.168.100.2         124   aabb.cc00.6600  ARPA   Ethernet0/0\\r\\n'\n           'Internet  192.168.100.3         183   aabb.cc00.6700  ARPA   Ethernet0/0\\r\\n'\n           'Internet  192.168.100.100       208   aabb.cc80.c900  ARPA   Ethernet0/0\\r\\n'\n           'Internet  192.168.101.1           -   aabb.cc00.6500  ARPA   Ethernet0/0\\r\\n'\n           'Internet  192.168.102.1           -   aabb.cc00.6500  ARPA   Ethernet0/0\\r\\n'\n           'Internet  192.168.130.1           -   aabb.cc00.6530  ARPA   Ethernet0/3\\r\\n'\n           'Internet  192.168.200.1           -   0203.e800.6510  ARPA   Ethernet0/1\\r\\n'\n           'Internet  192.168.200.100        18   6ee2.6d8c.e75d  ARPA   Ethernet0/1\\r\\n'\n           'R1#',\n 'sh clock': 'sh clock\\r\\n*08:25:22.435 UTC Mon Jul 20 2020\\r\\nR1#'}\n")),Object(r.b)("h2",{id:"paginated-command-output"},"Paginated command output"),Object(r.b)("p",null,"Example of using paramiko to work with paginated output of show command (3_paramiko_more.py file):"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},'import paramiko\nimport time\nimport socket\nfrom pprint import pprint\nimport re\n\n\ndef send_show_command(\n    ip,\n    username,\n    password,\n    enable,\n    command,\n    max_bytes=60000,\n    short_pause=1,\n    long_pause=5,\n):\n    cl = paramiko.SSHClient()\n    cl.set_missing_host_key_policy(paramiko.AutoAddPolicy())\n    cl.connect(\n        hostname=ip,\n        username=username,\n        password=password,\n        look_for_keys=False,\n        allow_agent=False,\n    )\n    with cl.invoke_shell() as ssh:\n        ssh.send("enable\\n")\n        ssh.send(enable + "\\n")\n        time.sleep(short_pause)\n        ssh.recv(max_bytes)\n\n        result = {}\n        for command in commands:\n            ssh.send(f"{command}\\n")\n            ssh.settimeout(5)\n\n            output = ""\n            while True:\n                try:\n                    page = ssh.recv(max_bytes).decode("utf-8")\n                    output += page\n                    time.sleep(0.5)\n                except socket.timeout:\n                    break\n                if "More" in page:\n                    ssh.send(" ")\n            output = re.sub(" +--More--| +\\x08+ +\\x08+", "\\n", output)\n            result[command] = output\n\n        return result\n\n\nif __name__ == "__main__":\n    devices = ["192.168.100.1", "192.168.100.2", "192.168.100.3"]\n    commands = ["sh run"]\n    result = send_show_command("192.168.100.1", "cisco", "cisco", "cisco", commands)\n    pprint(result, width=120)\n')))}p.isMDXComponent=!0},280:function(e,n,t){"use strict";t.d(n,"a",(function(){return u})),t.d(n,"b",(function(){return b}));var o=t(0),a=t.n(o);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=a.a.createContext({}),p=function(e){var n=a.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=p(e.components);return a.a.createElement(l.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},d=a.a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),u=p(t),d=o,b=u["".concat(s,".").concat(d)]||u[d]||m[d]||r;return t?a.a.createElement(b,i(i({ref:n},l),{},{components:t})):a.a.createElement(b,i({ref:n},l))}));function b(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,s=new Array(r);s[0]=d;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var l=2;l<r;l++)s[l]=t[l];return a.a.createElement.apply(null,s)}return a.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"}}]);