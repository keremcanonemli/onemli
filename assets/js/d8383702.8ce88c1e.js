(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{112:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return r})),t.d(n,"metadata",(function(){return u})),t.d(n,"toc",(function(){return p})),t.d(n,"default",(function(){return c}));var a=t(3),i=t(8),s=(t(0),t(120)),r={id:"netmiko_send_command",title:"\u2699\ufe0f send_command()",sidebar_label:"\u2699\ufe0f send_command()",slug:"netmiko_send_command_method",custom_edit_url:null},u={unversionedId:"netmiko/methods/netmiko_send_command",id:"netmiko/methods/netmiko_send_command",isDocsHomePage:!1,title:"\u2699\ufe0f send_command()",description:"`python",source:"@site/docs/netmiko/methods/7_netmiko_send_command.md",slug:"/netmiko/methods/netmiko_send_command_method",permalink:"/docs/netmiko/methods/netmiko_send_command_method",editUrl:null,version:"current",sidebar_label:"\u2699\ufe0f send_command()",sidebar:"someSidebar",previous:{title:"\u2699\ufe0f exit_config_mode()",permalink:"/docs/netmiko/methods/netmiko_exit_config_mode_method"},next:{title:"\u2699\ufe0f send_config_set()",permalink:"/docs/netmiko/methods/netmiko_send_config_set_method"}},p=[{value:"Example",id:"example",children:[]},{value:"Parameters",id:"parameters",children:[{value:"command_string",id:"command_string",children:[]},{value:"strip_prompt",id:"strip_prompt",children:[]},{value:"strip_command",id:"strip_command",children:[]},{value:"use_textfsm",id:"use_textfsm",children:[]},{value:"use_genie",id:"use_genie",children:[]}]}],o={toc:p};function c(e){var n=e.components,t=Object(i.a)(e,["components"]);return Object(s.b)("wrapper",Object(a.a)({},o,t,{components:n,mdxType:"MDXLayout"}),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python"},'from netmiko import ConnectHandler\ndevice = {\n    "device_type":"cisco_ios",\n    "host":"192.168.10.12",\n    "username":"keremcan",\n    "password":"onemli",\n    "verbose":"True",\n    "secret":"onemli"}\n')),Object(s.b)("p",null,"\u200b    "),Object(s.b)("h2",{id:"example"},"Example"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python"},'with ConnectHandler(**device) as connection:\n    print(connection.send_command("show ip interface brief"))\n')),Object(s.b)("p",null,"Output"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python"},"SSH connection established to 192.168.10.12:22\nInteractive SSH session established\n\nInterface              IP-Address      OK? Method Status                Protocol\nGigabitEthernet0/0     unassigned      YES unset  up                    up      \nGigabitEthernet0/1     unassigned      YES unset  up                    up      \nGigabitEthernet0/2     unassigned      YES unset  up                    up      \nGigabitEthernet0/3     unassigned      YES unset  up                    up      \nGigabitEthernet1/0     unassigned      YES unset  down                  down    \nGigabitEthernet1/1     unassigned      YES unset  up                    up      \nGigabitEthernet1/2     unassigned      YES unset  up                    up      \nGigabitEthernet1/3     unassigned      YES unset  up                    up      \nVlan1                  192.168.10.12   YES NVRAM  up                    up      \n\n")),Object(s.b)("p",null,"\u200b    "),Object(s.b)("p",null,"\u200b    "),Object(s.b)("h2",{id:"parameters"},"Parameters"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python"},"def send_command\n(self, command_string, expect_string=None, delay_factor=1, max_loops=500, auto_find_prompt=True,\nstrip_prompt=True, strip_command=True, normalize=True, use_textfsm=False, textfsm_template=None,\nuse_ttp=False, ttp_template=None, use_genie=False, cmd_verify=True)\n")),Object(s.b)("p",null,"\u200b    "),Object(s.b)("p",null,"\u200b    "),Object(s.b)("h3",{id:"command_string"},"command_string"),Object(s.b)("p",null,"It is the only parameter that does not contain a default value. So, when you enter the command to send the parameters, it is assigned to the ",Object(s.b)("inlineCode",{parentName:"p"},"command_string"),"."),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python"},'# They give the same result \nprint(connection.send_command("show ip interface brief"))\nprint(connection.send_command(command_string="show ip interface brief"))\n')),Object(s.b)("p",null,"\u200b    "),Object(s.b)("p",null,"\u200b    "),Object(s.b)("h3",{id:"strip_prompt"},"strip_prompt"),Object(s.b)("p",null,"This parameter's default value is ",Object(s.b)("inlineCode",{parentName:"p"},"strip_prompt=True"),". Remove the trailing router prompt from the output."),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python"},'# True is the default value. So you don\'t need to write. It was written here as an example.\nprint(connection.send_command("show ip interface brief",strip_prompt=True))\n')),Object(s.b)("p",null,"Output"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-javascript"},"Interface              IP-Address      OK? Method Status                Protocol\nGigabitEthernet0/0     unassigned      YES unset  up                    up      \nGigabitEthernet0/1     unassigned      YES unset  up                    up      \nGigabitEthernet0/2     unassigned      YES unset  up                    up      \nGigabitEthernet0/3     unassigned      YES unset  up                    up      \nGigabitEthernet1/0     unassigned      YES unset  down                  down    \nGigabitEthernet1/1     unassigned      YES unset  up                    up      \nGigabitEthernet1/2     unassigned      YES unset  up                    up      \nGigabitEthernet1/3     unassigned      YES unset  up                    up      \nVlan1                  192.168.10.12   YES NVRAM  up                    up      \n")),Object(s.b)("p",null,"\u200b    "),Object(s.b)("p",null,"Change value with the ",Object(s.b)("inlineCode",{parentName:"p"},"strip_prompt=False")),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python"},'print(connection.send_command("show ip interface brief",strip_prompt=False))\n')),Object(s.b)("p",null,"Output"),Object(s.b)("p",null,"Accually just last line (SW2#) added."),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-javascript"},"Interface              IP-Address      OK? Method Status                Protocol\nGigabitEthernet0/0     unassigned      YES unset  up                    up      \nGigabitEthernet0/1     unassigned      YES unset  up                    up      \nGigabitEthernet0/2     unassigned      YES unset  up                    up      \nGigabitEthernet0/3     unassigned      YES unset  up                    up      \nGigabitEthernet1/0     unassigned      YES unset  down                  down    \nGigabitEthernet1/1     unassigned      YES unset  up                    up      \nGigabitEthernet1/2     unassigned      YES unset  up                    up      \nGigabitEthernet1/3     unassigned      YES unset  up                    up      \nVlan1                  192.168.10.12   YES NVRAM  up                    up      \nSW2#\n")),Object(s.b)("p",null,"\u200b    "),Object(s.b)("p",null,"\u200b    "),Object(s.b)("h3",{id:"strip_command"},"strip_command"),Object(s.b)("p",null,"This parameter's default value is ",Object(s.b)("inlineCode",{parentName:"p"},"strip_command=True"),". Remove the echo of the command from the output."),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python"},'# True is the default value. So you don\'t need to write. It was written here as an example.\nprint(connection.send_command("show ip interface brief",strip_command=True))\n')),Object(s.b)("p",null,"Output"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-javascript"},"Interface              IP-Address      OK? Method Status                Protocol\nGigabitEthernet0/0     unassigned      YES unset  up                    up      \nGigabitEthernet0/1     unassigned      YES unset  up                    up      \nGigabitEthernet0/2     unassigned      YES unset  up                    up      \nGigabitEthernet0/3     unassigned      YES unset  up                    up      \nGigabitEthernet1/0     unassigned      YES unset  down                  down    \nGigabitEthernet1/1     unassigned      YES unset  up                    up      \nGigabitEthernet1/2     unassigned      YES unset  up                    up      \nGigabitEthernet1/3     unassigned      YES unset  up                    up      \nVlan1                  192.168.10.12   YES NVRAM  up                    up      \n")),Object(s.b)("p",null,"Change value with the ",Object(s.b)("inlineCode",{parentName:"p"},"strip_command=False")),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python"},'print(connection.send_command("show ip interface brief",strip_command=False))\n')),Object(s.b)("p",null,"Output"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-javascript"},"show ip interface brief\nInterface              IP-Address      OK? Method Status                Protocol\nGigabitEthernet0/0     unassigned      YES unset  up                    up      \nGigabitEthernet0/1     unassigned      YES unset  up                    up      \nGigabitEthernet0/2     unassigned      YES unset  up                    up      \nGigabitEthernet0/3     unassigned      YES unset  up                    up      \nGigabitEthernet1/0     unassigned      YES unset  down                  down    \nGigabitEthernet1/1     unassigned      YES unset  up                    up      \nGigabitEthernet1/2     unassigned      YES unset  up                    up      \nGigabitEthernet1/3     unassigned      YES unset  up                    up      \nVlan1                  192.168.10.12   YES NVRAM  up                    up  \n")),Object(s.b)("p",null,"\u200b    "),Object(s.b)("p",null,"\u200b    "),Object(s.b)("h3",{id:"use_textfsm"},"use_textfsm"),Object(s.b)("p",null,"This parameter's default value is ",Object(s.b)("inlineCode",{parentName:"p"},"False"),". If the command sent matches one of the ",Object(s.b)("a",{parentName:"p",href:"https://github.com/networktocode/ntc-templates/tree/master/ntc_templates/templates"},"ntc templates"),", the output is parsed."),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python"},'# False is the default value. So you don\'t need to write. It was written here as an example.\nprint(connection.send_command("show ip interface brief",use_textfsm=False))\n')),Object(s.b)("p",null,"Output"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-javascript"},"Interface              IP-Address      OK? Method Status                Protocol\nGigabitEthernet0/0     unassigned      YES unset  up                    up      \nGigabitEthernet0/1     unassigned      YES unset  up                    up      \nGigabitEthernet0/2     unassigned      YES unset  up                    up      \nGigabitEthernet0/3     unassigned      YES unset  up                    up      \nGigabitEthernet1/0     unassigned      YES unset  down                  down    \nGigabitEthernet1/1     unassigned      YES unset  up                    up      \nGigabitEthernet1/2     unassigned      YES unset  up                    up      \nGigabitEthernet1/3     unassigned      YES unset  up                    up      \nVlan1                  192.168.10.12   YES NVRAM  up                    up      \n")),Object(s.b)("p",null,"Change value with the ",Object(s.b)("inlineCode",{parentName:"p"},"strip_command=True")),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python"},'print(connection.send_command("show ip interface brief",use_textfsm=True))\n')),Object(s.b)("p",null,"Output"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-json"},'[\n    {\n        "intf": "GigabitEthernet0/0",\n        "ipaddr": "unassigned",\n        "status": "up",\n        "proto": "up"\n    },\n    {\n        "intf": "GigabitEthernet0/1",\n        "ipaddr": "unassigned",\n        "status": "up",\n        "proto": "up"\n    },\n    {\n        "intf": "GigabitEthernet0/2",\n        "ipaddr": "unassigned",\n        "status": "up",\n        "proto": "up"\n    },\n    {\n        "intf": "GigabitEthernet0/3",\n        "ipaddr": "unassigned",\n        "status": "up",\n        "proto": "up"\n    },\n    {\n        "intf": "GigabitEthernet1/0",\n        "ipaddr": "unassigned",\n        "status": "down",\n        "proto": "down"\n    },\n    {\n        "intf": "GigabitEthernet1/1",\n        "ipaddr": "unassigned",\n        "status": "up",\n        "proto": "up"\n    },\n    {\n        "intf": "GigabitEthernet1/2",\n        "ipaddr": "unassigned",\n        "status": "up",\n        "proto": "up"\n    },\n    {\n        "intf": "GigabitEthernet1/3",\n        "ipaddr": "unassigned",\n        "status": "up",\n        "proto": "up"\n    },\n    {\n        "intf": "Vlan1",\n        "ipaddr": "192.168.10.12",\n        "status": "up",\n        "proto": "up"\n    }\n]\n')),Object(s.b)("p",null,"\u200b    "),Object(s.b)("h3",{id:"use_genie"},"use_genie"),Object(s.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(s.b)("div",{parentName:"div",className:"admonition-heading"},Object(s.b)("h5",{parentName:"div"},Object(s.b)("span",{parentName:"h5",className:"admonition-icon"},Object(s.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},Object(s.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),Object(s.b)("div",{parentName:"div",className:"admonition-content"},Object(s.b)("p",{parentName:"div"},"Genie supported platforms are ",Object(s.b)("u",null,"MacOS and Linux"),". ",Object(s.b)("strong",{parentName:"p"},"Windows")," ",Object(s.b)("strong",{parentName:"p"},Object(s.b)("u",null,"doesn't"))," supported yet. For more information: ",Object(s.b)("a",{parentName:"p",href:"https://pypi.org/project/genie"},"Click Me")))),Object(s.b)("p",null,"This parameter's default value is ",Object(s.b)("inlineCode",{parentName:"p"},"False"),"."),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python"},'# False is the default value. So you don\'t need to write. It was written here as an example.\nprint(connection.send_command("show ip interface brief",use_genie=False))\n')),Object(s.b)("p",null,"Output"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-javascript"},"Interface              IP-Address      OK? Method Status                Protocol\nGigabitEthernet0/0     unassigned      YES unset  up                    up      \nGigabitEthernet0/1     unassigned      YES unset  up                    up      \nGigabitEthernet0/2     unassigned      YES unset  up                    up      \nGigabitEthernet0/3     unassigned      YES unset  up                    up      \nGigabitEthernet1/0     unassigned      YES unset  down                  down    \nGigabitEthernet1/1     unassigned      YES unset  up                    up      \nGigabitEthernet1/2     unassigned      YES unset  up                    up      \nGigabitEthernet1/3     unassigned      YES unset  up                    up      \nVlan1                  192.168.10.12   YES NVRAM  up                    up      \n")),Object(s.b)("p",null,"Change value with the ",Object(s.b)("inlineCode",{parentName:"p"},"use_genie=True")),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre"},'print(connection.send_command("show ip interface brief",use_genie=True))\n')),Object(s.b)("p",null,"Output"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre"},'{\n    "interface": {\n        "GigabitEthernet0/0": {\n            "ip_address": "unassigned",\n            "interface_is_ok": "YES",\n            "method": "unset",\n            "status": "up",\n            "protocol": "up"\n        },\n        "GigabitEthernet0/1": {\n            "ip_address": "unassigned",\n            "interface_is_ok": "YES",\n            "method": "unset",\n            "status": "up",\n            "protocol": "up"\n        },\n        "GigabitEthernet0/2": {\n            "ip_address": "unassigned",\n            "interface_is_ok": "YES",\n            "method": "unset",\n            "status": "up",\n            "protocol": "up"\n        },\n        "GigabitEthernet0/3": {\n            "ip_address": "unassigned",\n            "interface_is_ok": "YES",\n            "method": "unset",\n            "status": "up",\n            "protocol": "up"\n        },\n        "GigabitEthernet1/0": {\n            "ip_address": "unassigned",\n            "interface_is_ok": "YES",\n            "method": "unset",\n            "status": "down",\n            "protocol": "down"\n        },\n        "GigabitEthernet1/1": {\n            "ip_address": "unassigned",\n            "interface_is_ok": "YES",\n            "method": "unset",\n            "status": "up",\n            "protocol": "up"\n        },\n        "GigabitEthernet1/2": {\n            "ip_address": "unassigned",\n            "interface_is_ok": "YES",\n            "method": "unset",\n            "status": "up",\n            "protocol": "up"\n        },\n        "GigabitEthernet1/3": {\n            "ip_address": "unassigned",\n            "interface_is_ok": "YES",\n            "method": "unset",\n            "status": "up",\n            "protocol": "up"\n        },\n        "Vlan1": {\n            "ip_address": "192.168.10.12",\n            "interface_is_ok": "YES",\n            "method": "NVRAM",\n            "status": "up",\n            "protocol": "up"\n        }\n    }\n}\n')))}c.isMDXComponent=!0},120:function(e,n,t){"use strict";t.d(n,"a",(function(){return d})),t.d(n,"b",(function(){return m}));var a=t(0),i=t.n(a);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function u(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var o=i.a.createContext({}),c=function(e){var n=i.a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):u(u({},n),e)),t},d=function(e){var n=c(e.components);return i.a.createElement(o.Provider,{value:n},e.children)},l={inlineCode:"code",wrapper:function(e){var n=e.children;return i.a.createElement(i.a.Fragment,{},n)}},b=i.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,s=e.originalType,r=e.parentName,o=p(e,["components","mdxType","originalType","parentName"]),d=c(t),b=a,m=d["".concat(r,".").concat(b)]||d[b]||l[b]||s;return t?i.a.createElement(m,u(u({ref:n},o),{},{components:t})):i.a.createElement(m,u({ref:n},o))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var s=t.length,r=new Array(s);r[0]=b;var u={};for(var p in n)hasOwnProperty.call(n,p)&&(u[p]=n[p]);u.originalType=e,u.mdxType="string"==typeof e?e:a,r[1]=u;for(var o=2;o<s;o++)r[o]=t[o];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"}}]);