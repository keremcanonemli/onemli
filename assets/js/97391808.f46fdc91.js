(window.webpackJsonp=window.webpackJsonp||[]).push([[131],{203:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return p})),n.d(t,"toc",(function(){return i})),n.d(t,"default",(function(){return b}));var a=n(3),r=n(8),l=(n(0),n(280)),c={id:"strings",title:"Strings",sidebar_label:"4.2 Strings",slug:"strings",custom_edit_url:null},p={unversionedId:"python/data_structures/strings",id:"python/data_structures/strings",isDocsHomePage:!1,title:"Strings",description:"String in Python is:",source:"@site/docs/python/data_structures/2_strings.md",slug:"/python/data_structures/strings",permalink:"/docs/python/data_structures/strings",editUrl:null,version:"current",sidebar_label:"4.2 Strings",sidebar:"someSidebar",previous:{title:"Numbers",permalink:"/docs/python/data_structures/numbers"},next:{title:"Lists",permalink:"/docs/python/data_structures/lists"}},i=[{value:"Methods upper, lower, swapcase, capitalize,title",id:"methods-upper-lower-swapcase-capitalizetitle",children:[]},{value:"Method count",id:"method-count",children:[]},{value:"Method find",id:"method-find",children:[]},{value:"Methods startswith, endswith",id:"methods-startswith-endswith",children:[]},{value:"Method replace",id:"method-replace",children:[]},{value:"Method strip",id:"method-strip",children:[]},{value:"Method split",id:"method-split",children:[]},{value:"String formatting with <code>format</code> method",id:"string-formatting-with-format-method",children:[]},{value:"Strings formatting with f-Strings",id:"strings-formatting-with-f-strings",children:[{value:"Syntax",id:"syntax",children:[]}]}],s={toc:i};function b(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(l.b)("wrapper",Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(l.b)("p",null,"String in Python is:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"sequence of characters enclosed in quotes"),Object(l.b)("li",{parentName:"ul"},"immutable ordered data type")),Object(l.b)("p",null,"Examples of strings:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},'title = "Hello Strings"\n\ntunnel0 = """\ninterface Tunnel0\nip address 10.10.10.1 255.255.255.0\nip mtu 1416\nip ospf hello-interval 5\ntunnel source FastEthernet1/0\ntunnel protection ipsec profile DMVPN\n"""\n\ntunnel1=\'\\ninterface Tunnel0\\n ip address 10.10.10.1 255.255.255.0\\n ip mtu 1416\\n ip ospf hello-interval 5\\n tunnel source FastEthernet1/0\\n tunnel protection ipsec profile DMVPN\\n\'\n\nprint(tunnel0)\n\nprint(tunnel1)\n')),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"interface Tunnel0\nip address 10.10.10.1 255.255.255.0\nip mtu 1416\nip ospf hello-interval 5\ntunnel source FastEthernet1/0\ntunnel protection ipsec profile DMVPN\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"interface Tunnel1\n ip address 10.10.10.1 255.255.255.0\n ip mtu 1416\n ip ospf hello-interval 5\n tunnel source FastEthernet1/0\n tunnel protection ipsec profile DMVPN\n")),Object(l.b)("p",null,"Strings can be summed. Then they merge into one string:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"intf = 'interface '\ntun = 'Tunnel0'\n\nprint(intf+tun)\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"interface Tunnel0\n")),Object(l.b)("p",null,"You can multiply a string by a number. In this case, string repeats specified number of times:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"print(intf * 5)\n\nprint('#' * 40)\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"interface interface interface interface interface \n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"########################################\n")),Object(l.b)("p",null,"The fact that strings are an ordered data type allows to refer to characters in a string by a number starting from zero:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"string1 = 'interface FastEthernet1/0'\n\nprint(string1[0])\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"i\n")),Object(l.b)("p",null,"All characters in a string are numbered from zero. But if you need to refer to a character from the end, you can specify negative values (this time with 1)."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"print(string1[1])\n\nprint(string1[-1])\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"n\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"0\n")),Object(l.b)("p",null,"In addition to referring to a specific character you can make string slices by specifying a number range. Slicing starts with first number (included) and ends at second number (excluded):"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"print(string1[0:9])\n\nprint(string1[10:22])\n\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"interface\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"FastEthernet\n")),Object(l.b)("p",null,"If no second number is specified, slice is until the end of string:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"print(string1[10:])\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"FastEthernet1/0\n")),Object(l.b)("p",null,"Slice last three character of string:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"print(string1[-3:])\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"1/0\n")),Object(l.b)("p",null,"You can also specify a step in slice. For example, you can get odd numbers:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"a = '0123456789'\n\nprint(a[1::2])\n\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"13579\n")),Object(l.b)("p",null,"Or you can get all even numbers of string ",Object(l.b)("inlineCode",{parentName:"p"},"a"),":"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"print(a[::2])\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"02468\n")),Object(l.b)("p",null,"Slices can also be used to get a string in reverse order:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"a = '0123456789'\n\nprint(a[::])\n\nprint(a[::-1])\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"0123456789\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"9876543210\n")),Object(l.b)("div",{className:"admonition admonition-info alert alert--info"},Object(l.b)("div",{parentName:"div",className:"admonition-heading"},Object(l.b)("h5",{parentName:"div"},Object(l.b)("span",{parentName:"h5",className:"admonition-icon"},Object(l.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(l.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),Object(l.b)("div",{parentName:"div",className:"admonition-content"},Object(l.b)("p",{parentName:"div"},"Note"),Object(l.b)("p",{parentName:"div"},"Entries ",Object(l.b)("inlineCode",{parentName:"p"},"a[::]")," and ",Object(l.b)("inlineCode",{parentName:"p"},"a[:]")," give the same result but double colon makes it possible to indicate that not every element should be taken, but for example every second element."))),Object(l.b)("p",null,"The ",Object(l.b)("inlineCode",{parentName:"p"},"len")," function allows you to get number of characters in a string:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"line = 'interface Gi0/1'\n\nprint(len(line))\n\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"15\n")),Object(l.b)("p",null,"Note"),Object(l.b)("p",null,"Function and method differ in that method is tied to a particular type of object and function is generally more universal and can be applied to objects of different types. For example, ",Object(l.b)("inlineCode",{parentName:"p"},"len")," function can be applied to strings, lists, dictionaries and so on, but ",Object(l.b)("inlineCode",{parentName:"p"},"startswith")," method only applies to strings."),Object(l.b)("h1",{id:"string-methods"},"String methods"),Object(l.b)("p",null,"When automating, very often it will be necessary to work with strings, since config file, command output and commands sent - are strings. Knowledge of various methods (actions) that can be applied to strings helps to work with them more efficiently."),Object(l.b)("p",null,"Strings are immutable data type, so all methods that convert string returns a new string and the original string remains unchanged."),Object(l.b)("h2",{id:"methods-upper-lower-swapcase-capitalizetitle"},"Methods upper, lower, swapcase, capitalize,title"),Object(l.b)("p",null,"Methods ",Object(l.b)("inlineCode",{parentName:"p"},"upper"),", ",Object(l.b)("inlineCode",{parentName:"p"},"lower"),", ",Object(l.b)("inlineCode",{parentName:"p"},"swapcase"),", ",Object(l.b)("inlineCode",{parentName:"p"},"capitalize"),", ",Object(l.b)("inlineCode",{parentName:"p"},"title")," perform string case conversion:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"interface1 = 'FastEthernet'\n\nprint(interface1.upper())\nprint(interface1.lower())\nprint(interface1.swapcase())\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"FASTETHERNET\nfastethernet\nfASTeTHERNET\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"interface2 = 'tunnel 0'\nprint(interface2.capitalize())\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"Tunnel 0\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},'description = "uplink to backbone switch"\n')),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"print(description.title())\n")),Object(l.b)("div",{className:"admonition admonition-warning alert alert--danger"},Object(l.b)("div",{parentName:"div",className:"admonition-heading"},Object(l.b)("h5",{parentName:"div"},Object(l.b)("span",{parentName:"h5",className:"admonition-icon"},Object(l.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(l.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"Important")),Object(l.b)("div",{parentName:"div",className:"admonition-content"},Object(l.b)("p",{parentName:"div"},"It is very important to pay attention to the fact that methods often return the converted string. And, therefore, we must not forget to assign it to some variable (you can use the same)."))),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"interface1 = interface1.upper()\n\nprint(interface1)\n\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"FASTETHERNET\n")),Object(l.b)("h2",{id:"method-count"},"Method count"),Object(l.b)("p",null,"Method ",Object(l.b)("inlineCode",{parentName:"p"},"count")," used to count how many times a character or substring occurs in a string:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"countMe = 'Hello, hello, hello, hello'\n\nprint(countMe.count('hello'))\n\nprint(countMe.count('ello'))\n\nprint(countMe.count('l'))\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"3\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"4\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"8\n")),Object(l.b)("h2",{id:"method-find"},"Method find"),Object(l.b)("p",null,"You can pass a substring or character to ",Object(l.b)("inlineCode",{parentName:"p"},"find")," and it will return the lowest index where first character of the substring is (for the first match):"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"interface3 = 'interface FastEthernet0/1'\n\nprint(interface3.find('Fast'))\n\nprint(interface3[interface3.find('Fast')::])\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"10\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"FastEthernet0/1\n")),Object(l.b)("p",null,"If no match is found, ",Object(l.b)("inlineCode",{parentName:"p"},"find")," method returns ",Object(l.b)("inlineCode",{parentName:"p"},"-1"),"."),Object(l.b)("h2",{id:"methods-startswith-endswith"},"Methods startswith, endswith"),Object(l.b)("p",null,"Checking if a string starts or ends with certain symbols (methods ",Object(l.b)("inlineCode",{parentName:"p"},"startswith"),", ",Object(l.b)("inlineCode",{parentName:"p"},"endswith"),"):"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"interface4 = 'FastEthernet0/1'\n\nprint(interface4.startswith('Fast'))\n\nprint(interface4.startswith('fast'))\n\nprint(interface4.endswith('0/1'))\n\nprint(interface4.endswith('0/2'))\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"True\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"False\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"True\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"False\n")),Object(l.b)("h2",{id:"method-replace"},"Method replace"),Object(l.b)("p",null,"Replacing a sequence of characters in a string with another sequence (method ",Object(l.b)("inlineCode",{parentName:"p"},"replace"),"):"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"interface5 = 'FastEthernet0/1'\n\nprint(a.replace('Fast','Gigabit'))\n")),Object(l.b)("p",null,"Output:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"GigabitEthernet0/1\n")),Object(l.b)("h2",{id:"method-strip"},"Method strip"),Object(l.b)("p",null,"Often when a file is processed, the file is opened line by line. But at the end of each line, there are usually some special characters (and may be at the beginning). For example, new line character."),Object(l.b)("p",null,"To get rid of them, it is very convenient to use method ",Object(l.b)("inlineCode",{parentName:"p"},"strip"),":"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},'interface6 = \'\\n\\tinterface FastEthernet0/1\\n\'\n\nprint("**"+interface6+"**")\n')),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"**\n    interface FastEthernet0/1\n**\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},'interface6=interface6.strip()\n\nprint("**"+interface6+"**")\n')),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"**interface FastEthernet0/1**\n")),Object(l.b)("p",null,"By default, ",Object(l.b)("inlineCode",{parentName:"p"},"strip")," method removes blank characters. This character set includes: ",Object(l.b)("inlineCode",{parentName:"p"},"\\t\\n\\r\\f\\v")),Object(l.b)("p",null,"Method ",Object(l.b)("inlineCode",{parentName:"p"},"strip")," can be passed as an argument of any characters. Then at the beginning and at the end of the line all characters that were specified in the line will be removed:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},'ad_metric = "[110/1045]"\n\nprint(ad_metric.strip("[]"))\n')),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"")),Object(l.b)("p",null,"Method ",Object(l.b)("inlineCode",{parentName:"p"},"strip")," removes special characters at the beginning and at the end of the line. If you want to remove characters only on the left or only on the right, you can use ",Object(l.b)("inlineCode",{parentName:"p"},"lstrip")," and ",Object(l.b)("inlineCode",{parentName:"p"},"rstrip"),"."),Object(l.b)("h2",{id:"method-split"},"Method split"),Object(l.b)("p",null,"Method ",Object(l.b)("inlineCode",{parentName:"p"},"split")," splits the string using a symbol (or symbols) as separator and returns a list of strings:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"allowed_vlans = 'switchport trunk allowed vlan 10,20,30,100-200'\ncommand = allowed_vlans.split()\n\nprint(command)\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"['switchport', 'trunk', 'allowed', 'vlan', '10,20,30,100-200']\n")),Object(l.b)("p",null,"In example above, ",Object(l.b)("inlineCode",{parentName:"p"},"allowed_vlans.split")," splits the string by spaces and returns a list of strings. The list is saved to ",Object(l.b)("inlineCode",{parentName:"p"},"command")," variable."),Object(l.b)("p",null,"By default, separator is a space symbol (spaces, tabs, new line), but you can specify any separator in parentheses:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"vlan_ids = command[-1].split(',')\nprint(vlan_ids)\n\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"['10', '20', '30', '100-200']\n")),Object(l.b)("p",null,"In ",Object(l.b)("inlineCode",{parentName:"p"},"command")," list, the last element is a string with vlans, so the index -1 is used. Then string is split into parts using ",Object(l.b)("inlineCode",{parentName:"p"},"split")," ",Object(l.b)("inlineCode",{parentName:"p"},"command[-1].split(',')"),". Since separator is a comma, this list is received ",Object(l.b)("inlineCode",{parentName:"p"},"['10', '20', '30', '100-200']"),"."),Object(l.b)("p",null,"A useful feature of ",Object(l.b)("inlineCode",{parentName:"p"},"split")," method with default separator is that the string is not only split into a list of strings by whitespace characters, but the whitespace characters are also removed at the beginning and at the end of the line:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"string1 = '  switchport trunk allowed vlan 10,20,30,100-200\\n\\n'\nprint(string1.split())\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"['switchport', 'trunk', 'allowed', 'vlan', '10,20,30,100-200']\n")),Object(l.b)("p",null,"Method ",Object(l.b)("inlineCode",{parentName:"p"},"split")," has another good feature: by default, method splits a string not by one whitespace character, but by any number. For example, this will be very useful when processing show commands:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},'sh_ip_int_br = "FastEthernet0/0       15.0.15.1    YES manual up         up"\n\nprint(sh_ip_int_br.split())\n\n')),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"['FastEthernet0/0', '15.0.15.1', 'YES', 'manual', 'up', 'up']\n")),Object(l.b)("p",null,"And this is the same string when one space is used as the separator:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"print(sh_ip_int_br.split(' '))\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"['FastEthernet0/0', '', '', '', '', '', '', '15.0.15.1', '', '', '', 'YES', 'manual', 'up', '', '', '', '', '', '', '', '', 'up']\n")),Object(l.b)("h1",{id:"string-formatting"},"String formatting"),Object(l.b)("p",null,"When working with strings, there are often situations where different data needs to be substituted in string template. This can be done by combining string parts and data, but Python has a more convenient way - strings formatting."),Object(l.b)("p",null,"String formatting can help, for example, in such situations:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"need to set values to a string by a certain template"),Object(l.b)("li",{parentName:"ul"},"need to format output by columns"),Object(l.b)("li",{parentName:"ul"},"need to convert numbers to binary format")),Object(l.b)("p",null,"There are several options for string formatting:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"with operator ",Object(l.b)("inlineCode",{parentName:"li"},"%")," \u2014 older option"),Object(l.b)("li",{parentName:"ul"},"method ",Object(l.b)("inlineCode",{parentName:"li"},"format")," \u2014 relatively new option"),Object(l.b)("li",{parentName:"ul"},"f-\u0441\u0442\u0440\u043e\u043a\u0438 \u2014 new option that appeared in Python 3.6")),Object(l.b)("p",null,"Although ",Object(l.b)("inlineCode",{parentName:"p"},"format")," is recommended, string formatting can often be found through ",Object(l.b)("inlineCode",{parentName:"p"},"%"),"."),Object(l.b)("h2",{id:"string-formatting-with-format-method"},"String formatting with ",Object(l.b)("inlineCode",{parentName:"h2"},"format")," method"),Object(l.b)("p",null,"Example of ",Object(l.b)("inlineCode",{parentName:"p"},"format")," method use:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"print(\"interface FastEthernet0/{}\".format('1'))\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"interface FastEthernet0/1\n")),Object(l.b)("p",null,"A special symbol ",Object(l.b)("inlineCode",{parentName:"p"},"{}")," indicates that the value that is passed to ",Object(l.b)("inlineCode",{parentName:"p"},"format")," method is placed here. Each pair of curly braces represents one place for the substitution."),Object(l.b)("p",null,"Values that are placed in curly braces may be of different types. For example, it can be a string, number or list:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"print('{}'.format('10.1.1.1'))\n\nprint('{}'.format(100))\n\nprint('{}'.format([10, 1, 1,1]))\n\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"10.1.1.1\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"100\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"[10, 1, 1, 1]\n")),Object(l.b)("p",null,"You can align result in columns by formatting strings. In string formatting, you can specify how many characters are selected for the data. If number of characters in the data is less than number of characters selected, the missing characters are filled with blanks."),Object(l.b)("p",null,"For example, you can allign data in columns of equal width of 15 characters with right side alignment:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"vlan, mac, intf = '100', 'aabb.cc80.7000', 'Gi0/1'\n\nprint(\"{:>15} {:>15} {:>15}\".format(vlan, mac, intf))\n\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"            100  aabb.cc80.7000           Gi0/1\n")),Object(l.b)("p",null,"Alignment to the left:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},'print("{:15} {:15} {:15}".format(vlan, mac, intf))\n\n')),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"100             aabb.cc80.7000  Gi0/1\n")),Object(l.b)("p",null,"Output template can also be multi-string:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"ip_template = '''\n            IP address:\n            {}\n'''\n\n\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"print(ip_template.format('10.1.1.1'))\n")),Object(l.b)("p",null,"You can also use string formatting to change the display format of numbers."),Object(l.b)("p",null,"For example, you can specify how many digits after the comma to show:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},'print("{:.3f}".format(10.0/3))\n\n')),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"3.333\n")),Object(l.b)("p",null,"Using string formatting, you can convert numbers to binary format:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"print('{:b} {:b} {:b} {:b}'.format(192, 100, 1, 1))\n\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"11000000 1100100 1 1\n")),Object(l.b)("p",null,"You can still specify additional parameters such as column width:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"print('{:8b} {:8b} {:8b} {:8b}'.format(192, 100, 1, 1))\n\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"11000000  1100100        1        1\n")),Object(l.b)("p",null,"You can also specify that numbers should be supplemented with zeros instead of spaces:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"print('{:08b} {:08b} {:08b} {:08b}'.format(192, 100, 1, 1))\n\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"11000000 01100100 00000001 00000001\n")),Object(l.b)("p",null,"You can enter names in curly braces. This makes it possible to pass arguments in any order and also makes template more understandable:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"print('{ip}/{mask}'.format(mask=24, ip='10.1.1.1'))\n\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"10.1.1.1/24\n")),Object(l.b)("p",null,"Another useful feature of string formatting is argument number specification:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"print('{1}/{0}'.format(24, '10.1.1.1'))\n\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"10.1.1.1/24\n")),Object(l.b)("p",null,"For example this can prevent repetitive transmission of the same values:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"ip_template = '''\nIP address:\n{:<8} {:<8} {:<8} {:<8}\n{:08b} {:08b} {:08b} {:08b}\n'''\n\nprint(ip_template.format(192, 100, 1, 1, 192, 100, 1, 1))\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"IP address:\n192      100      1        1       \n11000000 01100100 00000001 00000001\n")),Object(l.b)("p",null,"In example above the octet address has to be passed twice - one for decimal format and other for binary."),Object(l.b)("p",null,"By specifying value indexes that are passed to ",Object(l.b)("inlineCode",{parentName:"p"},"format")," method, it is possible to avoid duplication:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"ip_template = '''\nIP address:\n{0:<8} {1:<8} {2:<8} {3:<8}\n{0:08b} {1:08b} {2:08b} {3:08b}\n'''\n\nprint(ip_template.format(192, 100, 1, 1, 192, 100, 1, 1))\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"IP address:\n192      100      1        1       \n11000000 01100100 00000001 00000001\n")),Object(l.b)("h2",{id:"strings-formatting-with-f-strings"},"Strings formatting with f-Strings"),Object(l.b)("p",null,"Python 3.6 added a new version of string formatting - f-strings or interpolation of strings. The f-strings allow not only to set values to template, but also to perform calls to functions, methods, etc."),Object(l.b)("p",null,"In many situations f-strings are easier to use than format, and f-strings work faster than format and other methods of string formatting."),Object(l.b)("h3",{id:"syntax"},"Syntax"),Object(l.b)("p",null,"F-string is a literal line with a letter f in front of it. Inside f-string, in curly braces there are names of variables that will be substituted:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"ip = '10.1.1.1'\nmask = 24\n\nprint(f\"IP: {ip}, mask: {mask}\")\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"IP: 10.1.1.1, mask: 24\n\n")),Object(l.b)("p",null,"The same result with ",Object(l.b)("inlineCode",{parentName:"p"},"format")," method you can achieve by: ",Object(l.b)("inlineCode",{parentName:"p"},'"IP: {ip}, mask: {mask}".format(ip=ip, mask=mask)'),"."),Object(l.b)("p",null,"A very important difference between f-strings and ",Object(l.b)("inlineCode",{parentName:"p"},"format"),": f-strings are expressions that are processed, not just strings. That is, in case of ipython, as soon as we wrote the expression and pressed Enter, it was performed and instead of expressions ",Object(l.b)("inlineCode",{parentName:"p"},"{ip}")," and ",Object(l.b)("inlineCode",{parentName:"p"},"{mask}")," the values of variables were substituted."),Object(l.b)("p",null,"Therefore, for example, you cannot first write a template and then define variables that are used in template:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},'print(f"IP:{ip}, mask:{mask}")\xf6\n\nip = "10.1.1.1"\nmask="24"\n---------------------------------------------------------------------------\nTraceback (most recent call last):\n  File "....py", line 136, in <module>\n    print(f"IP:{ip}, mask:{mask}")\nNameError: name \'ip\' is not defined\n')),Object(l.b)("p",null,"In addition to substituting variable values you can write expressions in curly braces:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"first_name = 'William'\nsecond_name = 'Shakespeare'\n\nprint(f\"{first_name.upper()} {second_name.upper()}\")\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"WILLIAM SHAKESPEARE\n")),Object(l.b)("p",null,"After colon in f-strings you can specify the same values as in ",Object(l.b)("inlineCode",{parentName:"p"},"format"),":"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"oct1, oct2, oct3, oct4 = [10, 1, 1, 1]\n\nprint(f'''\nIP address:\n{oct1:<8} {oct2:<8} {oct3:<8} {oct4:<8}\n{oct1:08b} {oct2:08b} {oct3:08b} {oct4:08b}''')\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"IP address:\n10       1        1        1       \n00001010 00000001 00000001 00000001\n")),Object(l.b)("div",{className:"admonition admonition-warning alert alert--danger"},Object(l.b)("div",{parentName:"div",className:"admonition-heading"},Object(l.b)("h5",{parentName:"div"},Object(l.b)("span",{parentName:"h5",className:"admonition-icon"},Object(l.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(l.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),Object(l.b)("div",{parentName:"div",className:"admonition-content"},Object(l.b)("p",{parentName:"div"},"Since for full explanation of f-strings it is necessary to show examples with loops and work with objects that have not yet been covered, this topic is also in the section ",Object(l.b)("a",{parentName:"p",href:"https://onem.li/docs/python/python_basic_examples/formatting_lines_with_f_strings"},"Formatting lines with f-strings")," with additional examples and explanations."))),Object(l.b)("h1",{id:"literal-strings-concatenation"},"Literal strings concatenation"),Object(l.b)("p",null,"Python has very convenient functionality \u2014 literal strings concatenation"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"s = ('test' 'string')\n\nprint(s)\n\ns = 'TEST' 'STRING'\n\nprint(s)\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"teststring\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"TESTSTRING\n")),Object(l.b)("p",null,"You can even wrap parts of a line on different lines, but only if they are in parentheses:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"s = ('Test'\n     'String')\nprint(s)\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"TestString\n")),Object(l.b)("p",null,"This is very convenient to use in regex:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"regex = (\n    '(\\S+) +(\\S+) +'\n    '\\w+ +\\w+ +'\n    '(up|down|administratively down) +'\n    '(\\w+)'\n)\n")),Object(l.b)("p",null,"This way, the regex can be split and made easier to understand. Plus you can add explanatory comments in strings."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"regex = (\n    '(\\S+) +(\\S+) +' # interface and IP\n    '\\w+ +\\w+ +'\n    '(up|down|administratively down) +' # Status\n    '(\\w+)' # Protocol\n)\n")),Object(l.b)("p",null,"It is also convenient to use this technique when writing a long message:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"message = ('During command execution \"{}\" '\n'such error occured \"{}\".\\n'\n'Exclude this command from the list? [y/n]')\n\nprint(message)\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},'During command execution "{}" such error occured "{}".\nExclude this command from the list? [y/n]\n')))}b.isMDXComponent=!0},280:function(e,t,n){"use strict";n.d(t,"a",(function(){return o})),n.d(t,"b",(function(){return d}));var a=n(0),r=n.n(a);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=r.a.createContext({}),b=function(e){var t=r.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},o=function(e){var t=b(e.components);return r.a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,c=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),o=b(n),m=a,d=o["".concat(c,".").concat(m)]||o[m]||u[m]||l;return n?r.a.createElement(d,p(p({ref:t},s),{},{components:n})):r.a.createElement(d,p({ref:t},s))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,c=new Array(l);c[0]=m;var p={};for(var i in t)hasOwnProperty.call(t,i)&&(p[i]=t[i]);p.originalType=e,p.mdxType="string"==typeof e?e:a,c[1]=p;for(var s=2;s<l;s++)c[s]=n[s];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);