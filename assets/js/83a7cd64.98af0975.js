(window.webpackJsonp=window.webpackJsonp||[]).push([[122],{194:function(e,n,o){"use strict";o.r(n),o.d(n,"frontMatter",(function(){return l})),o.d(n,"metadata",(function(){return i})),o.d(n,"toc",(function(){return c})),o.d(n,"default",(function(){return s}));var t=o(3),a=o(8),r=(o(0),o(281)),l={id:"dictionary",title:"Dictionary",sidebar_label:"Dictionary",slug:"dictionary",custom_edit_url:null},i={unversionedId:"python/04_data_structures/dictionary",id:"python/04_data_structures/dictionary",isDocsHomePage:!1,title:"Dictionary",description:"Dictionaries are mutable ordered data type:",source:"@site/docs/python/04_data_structures/4_dictionary.md",slug:"/python/04_data_structures/dictionary",permalink:"/docs/python/04_data_structures/dictionary",editUrl:null,version:"current",sidebar_label:"Dictionary",sidebar:"someSidebar",previous:{title:"Lists",permalink:"/docs/python/04_data_structures/lists"},next:{title:"Tuple",permalink:"/docs/python/04_data_structures/tuple"}},c=[{value:"<code>clear</code>",id:"clear",children:[]},{value:"<code>copy</code>",id:"copy",children:[]},{value:"<code>get</code>",id:"get",children:[]},{value:"<code>setdefault</code>",id:"setdefault",children:[]},{value:"<code>keys, values, items</code>",id:"keys-values-items",children:[]},{value:"<code>del</code>",id:"del",children:[]},{value:"<code>update</code>",id:"update",children:[]},{value:"Literal",id:"literal",children:[]},{value:"dict",id:"dict",children:[]},{value:"dict.fromkeys",id:"dictfromkeys",children:[]}],d={toc:c};function s(e){var n=e.components,o=Object(a.a)(e,["components"]);return Object(r.b)("wrapper",Object(t.a)({},d,o,{components:n,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Dictionaries are mutable ordered data type:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"data in dictionary are pairs ",Object(r.b)("inlineCode",{parentName:"li"},"key: value")),Object(r.b)("li",{parentName:"ul"},"values are accessible by key, not by number as in lists"),Object(r.b)("li",{parentName:"ul"},"entries in dictionary stored in order they were added"),Object(r.b)("li",{parentName:"ul"},"since dictionaries are mutable, dictionary items can be changed, added, removed"),Object(r.b)("li",{parentName:"ul"},"key must be an immutable object: number, string, tuple"),Object(r.b)("li",{parentName:"ul"},"value can be data of any type")),Object(r.b)("p",null,"Note"),Object(r.b)("p",null,"In other programming languages a similar dictionary can be called an associative array, hash, or hash table."),Object(r.b)("p",null,"Example of dictionary:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"london = {'name': 'London1', 'location': 'London Str', 'vendor': 'Cisco'}\n")),Object(r.b)("p",null,"You can write it down like this:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"london = {\n    'id': 1,\n    'name': 'London',\n    'it_vlan': 320,\n    'user_vlan': 1010,\n    'mngmt_vlan': 99,\n    'to_name': None,\n    'to_id': None,\n    'port': 'G1/0/11'\n}\n")),Object(r.b)("p",null,"In order to get a value from dictionary you have to refer to key in the same way as in lists, only key will be used instead of number:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"In [1]: london = {'name': 'London1', 'location': 'London Str'}\n\nIn [2]: london['name']\nOut[2]: 'London1'\n\nIn [3]: london['location']\nOut[3]: 'London Str'\n")),Object(r.b)("p",null,"Similarly, a new key-value pair could be added:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"In [4]: london['vendor'] = 'Cisco'\n\nIn [5]: print(london)\n{'vendor': 'Cisco', 'name': 'London1', 'location': 'London Str'}\n")),Object(r.b)("p",null,"Or rewritten:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"In [6]: london['vendor'] = 'cisco ios'\n\nIn [7]: print(london)\n{'vendor': 'cisco ios', 'name': 'London1', 'location': 'London Str'}\n")),Object(r.b)("p",null,"In dictionary you can use a dictionary as a value:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"london_co = {\n    'r1': {\n        'hostname': 'london_r1',\n        'location': '21 New Globe Walk',\n        'vendor': 'Cisco',\n        'model': '4451',\n        'ios': '15.4',\n        'ip': '10.255.0.1'\n    },\n    'r2': {\n        'hostname': 'london_r2',\n        'location': '21 New Globe Walk',\n        'vendor': 'Cisco',\n        'model': '4451',\n        'ios': '15.4',\n        'ip': '10.255.0.2'\n    },\n    'sw1': {\n        'hostname': 'london_sw1',\n        'location': '21 New Globe Walk',\n        'vendor': 'Cisco',\n        'model': '3850',\n        'ios': '3.6.XE',\n        'ip': '10.255.0.101'\n    }\n}\n")),Object(r.b)("p",null,"You can get values from nested dictionary by:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"In [7]: london_co['r1']['ios']\nOut[7]: '15.4'\n\nIn [8]: london_co['r1']['model']\nOut[8]: '4451'\n\nIn [9]: london_co['sw1']['ip']\nOut[9]: '10.255.0.101'\n")),Object(r.b)("p",null,"Function ",Object(r.b)("inlineCode",{parentName:"p"},"sorted")," sorts dictionary keys in ascending order and returns a new list with sorted keys:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"In [1]: london = {'name': 'London1', 'location': 'London Str', 'vendor': 'Cisco'}\n\nIn [2]: sorted(london)\nOut[2]: ['location', 'name', 'vendor']\n")),Object(r.b)("h1",{id:"dictionary-methods"},"Dictionary methods"),Object(r.b)("h2",{id:"clear"},Object(r.b)("inlineCode",{parentName:"h2"},"clear")),Object(r.b)("p",null,"Method ",Object(r.b)("inlineCode",{parentName:"p"},"clear")," allows to clear dictionary:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"In [1]: london = {'name': 'London1', 'location': 'London Str'}\n\nIn [2]: london.clear()\n\nIn [3]: london\nOut[3]: {}\n")),Object(r.b)("h2",{id:"copy"},Object(r.b)("inlineCode",{parentName:"h2"},"copy")),Object(r.b)("p",null,"Method ",Object(r.b)("inlineCode",{parentName:"p"},"copy")," allows to create a full copy of dictionary."),Object(r.b)("p",null,"If one dictionary is equal to other:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"In [4]: london = {'name': 'London1', 'location': 'London Str', 'vendor': 'Cisco'}\n\nIn [5]: london2 = london\n\nIn [6]: id(london)\nOut[6]: 25489072\n\nIn [7]: id(london2)\nOut[7]: 25489072\n\nIn [8]: london['vendor'] = 'Juniper'\n\nIn [9]: london2['vendor']\nOut[9]: 'Juniper'\n")),Object(r.b)("p",null,"In this case ",Object(r.b)("inlineCode",{parentName:"p"},"london2")," is another name that refers to dictionary ",Object(r.b)("inlineCode",{parentName:"p"},"london"),". And when you change ",Object(r.b)("inlineCode",{parentName:"p"},"london")," dictionary, ",Object(r.b)("inlineCode",{parentName:"p"},"london2")," dictionary changes as well because it\u2019s a link to the same object."),Object(r.b)("p",null,"Therefore, if you want to make a copy of dictionary, use ",Object(r.b)("inlineCode",{parentName:"p"},"copy")," method:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"In [10]: london = {'name': 'London1', 'location': 'London Str', 'vendor': 'Cisco'}\n\nIn [11]: london2 = london.copy()\n\nIn [12]: id(london)\nOut[12]: 25524512\n\nIn [13]: id(london2)\nOut[13]: 25563296\n\nIn [14]: london['vendor'] = 'Juniper'\n\nIn [15]: london2['vendor']\nOut[15]: 'Cisco'\n")),Object(r.b)("h2",{id:"get"},Object(r.b)("inlineCode",{parentName:"h2"},"get")),Object(r.b)("p",null,"If you query a key that is not present in dictionary, an error occurs:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"In [16]: london = {'name': 'London1', 'location': 'London Str', 'vendor': 'Cisco'}\n\nIn [17]: london['ios']\n---------------------------------------------------------------------------\nKeyError                                  Traceback (most recent call last)\n<ipython-input-17-b4fae8480b21> in <module>()\n----\x3e 1 london['ios']\n\nKeyError: 'ios'\n")),Object(r.b)("p",null,"Method ",Object(r.b)("inlineCode",{parentName:"p"},"get")," queries for key and if there is no key, returns ",Object(r.b)("inlineCode",{parentName:"p"},"None")," instead."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"In [18]: london = {'name': 'London1', 'location': 'London Str', 'vendor': 'Cisco'}\n\nIn [19]: print(london.get('ios'))\nNone\n")),Object(r.b)("p",null,"Method get() also allows you to specify another value instead of ",Object(r.b)("inlineCode",{parentName:"p"},"None"),":"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"In [20]: print(london.get('ios', 'Ooops'))\nOoops\n")),Object(r.b)("h2",{id:"setdefault"},Object(r.b)("inlineCode",{parentName:"h2"},"setdefault")),Object(r.b)("p",null,"Method ",Object(r.b)("inlineCode",{parentName:"p"},"setdefault")," searches for key and if there is no key, instead of error it creates a key with ",Object(r.b)("inlineCode",{parentName:"p"},"None")," value."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"In [21]: london = {'name': 'London1', 'location': 'London Str', 'vendor': 'Cisco'}\n\nIn [22]: ios = london.setdefault('ios')\n\nIn [23]: print(ios)\nNone\n\nIn [24]: london\nOut[24]: {'name': 'London1', 'location': 'London Str', 'vendor': 'Cisco', 'ios': None}\n")),Object(r.b)("p",null,"If key is present, ",Object(r.b)("inlineCode",{parentName:"p"},"setdefault")," returns value that corresponds to it:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"In [25]: london.setdefault('name')\nOut[25]: 'London1'\n")),Object(r.b)("p",null,"The second argument allows to specify which value should correspond to key:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"In [26]: model = london.setdefault('model', 'Cisco3580')\n\nIn [27]: print(model)\nCisco3580\n\nIn [28]: london\nOut[28]:\n{'name': 'London1',\n 'location': 'London Str',\n 'vendor': 'Cisco',\n 'ios': None,\n 'model': 'Cisco3580'}\n")),Object(r.b)("p",null,"Method ",Object(r.b)("inlineCode",{parentName:"p"},"setdefault")," replaces this expression:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"In [30]: if key in london:\n    ...:     value = london[key]\n    ...: else:\n    ...:     london[key] = 'somevalue'\n    ...:     value = london[key]\n    ...:\n")),Object(r.b)("h2",{id:"keys-values-items"},Object(r.b)("inlineCode",{parentName:"h2"},"keys, values, items")),Object(r.b)("p",null,"Methods ",Object(r.b)("inlineCode",{parentName:"p"},"keys"),", ",Object(r.b)("inlineCode",{parentName:"p"},"values"),", ",Object(r.b)("inlineCode",{parentName:"p"},"items"),":"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"In [24]: london = {'name': 'London1', 'location': 'London Str', 'vendor': 'Cisco'}\n\nIn [25]: london.keys()\nOut[25]: dict_keys(['name', 'location', 'vendor'])\n\nIn [26]: london.values()\nOut[26]: dict_values(['London1', 'London Str', 'Cisco'])\n\nIn [27]: london.items()\nOut[27]: dict_items([('name', 'London1'), ('location', 'London Str'), ('vendor', 'Cisco')])\n")),Object(r.b)("p",null,"All three methods return special view objects that contains keys, values, and key-value pairs of dictionary, respectively."),Object(r.b)("p",null,"A very important feature of view is that they change together with dictionary. And in fact, they just give you a way to look at objects, but they don\u2019t make a copy of them."),Object(r.b)("p",null,"Example of uning ",Object(r.b)("inlineCode",{parentName:"p"},"keys"),":"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"In [28]: london = {'name': 'London1', 'location': 'London Str', 'vendor': 'Cisco'}\n\nIn [29]: keys = london.keys()\n\nIn [30]: print(keys)\ndict_keys(['name', 'location', 'vendor'])\n")),Object(r.b)("p",null,"Now keys variable corresponds to view ",Object(r.b)("inlineCode",{parentName:"p"},"dict_keys"),", in which three keys: name, location and vendor."),Object(r.b)("p",null,"But if we add another key-value pair to dictionary, keys object will also change:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"In [31]: london['ip'] = '10.1.1.1'\n\nIn [32]: keys\nOut[32]: dict_keys(['name', 'location', 'vendor', 'ip'])\n")),Object(r.b)("p",null,"If you want to get a simple list of keys that will not be changed with dictionary changes, it is enough to convert view to list:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"In [33]: list_keys = list(london.keys())\n\nIn [34]: list_keys\nOut[34]: ['name', 'location', 'vendor', 'ip']\n")),Object(r.b)("h2",{id:"del"},Object(r.b)("inlineCode",{parentName:"h2"},"del")),Object(r.b)("p",null,"Remove key and value:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"In [35]: london = {'name': 'London1', 'location': 'London Str', 'vendor': 'Cisco'}\n\nIn [36]: del london['name']\n\nIn [37]: london\nOut[37]: {'location': 'London Str', 'vendor': 'Cisco'}\n")),Object(r.b)("h2",{id:"update"},Object(r.b)("inlineCode",{parentName:"h2"},"update")),Object(r.b)("p",null,"Method ",Object(r.b)("inlineCode",{parentName:"p"},"update")," allows you to add contents of one dictionary to another dictionary:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"In [38]: r1 = {'name': 'London1', 'location': 'London Str'}\n\nIn [39]: r1.update({'vendor': 'Cisco', 'ios':'15.2'})\n\nIn [40]: r1\nOut[40]: {'name': 'London1', 'location': 'London Str', 'vendor': 'Cisco', 'ios': '15.2'}\n")),Object(r.b)("p",null,"Values can be updated in the same way:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"In [41]: r1.update({'name': 'london-r1', 'ios':'15.4'})\n\nIn [42]: r1\nOut[42]:\n{'name': 'london-r1',\n 'location': 'London Str',\n 'vendor': 'Cisco',\n 'ios': '15.4'}\n")),Object(r.b)("h1",{id:"dictionary-creation-options"},"Dictionary creation options"),Object(r.b)("h2",{id:"literal"},"Literal"),Object(r.b)("p",null,"A dictionary can be created with help of a literal:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"In [1]: r1 = {'model': '4451', 'ios': '15.4'}\n")),Object(r.b)("h2",{id:"dict"},"dict"),Object(r.b)("p",null,"Construction ",Object(r.b)("inlineCode",{parentName:"p"},"dict")," allows you to create a dictionary in several ways."),Object(r.b)("p",null,"If you use strings as keys you can use this option to create a dictionary:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"In [2]: r1 = dict(model='4451', ios='15.4')\n\nIn [3]: r1\nOut[3]: {'model': '4451', 'ios': '15.4'}\n")),Object(r.b)("p",null,"The second option of creating a dictionary with dict():"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"In [4]: r1 = dict([('model','4451'), ('ios','15.4')])\n\nIn [5]: r1\nOut[5]: {'model': '4451', 'ios': '15.4'}\n")),Object(r.b)("h2",{id:"dictfromkeys"},"dict.fromkeys"),Object(r.b)("p",null,"In a situation where you need to create a dictionary with known keys but so far empty values (or identical values), ",Object(r.b)("inlineCode",{parentName:"p"},"fromkeys")," method is very convenient:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"In [5]: d_keys = ['hostname', 'location', 'vendor', 'model', 'ios', 'ip']\n\nIn [6]: r1 = dict.fromkeys(d_keys)\n\nIn [7]: r1\nOut[7]:\n{'hostname': None,\n 'location': None,\n 'vendor': None,\n 'model': None,\n 'ios': None,\n 'ip': None}\n")),Object(r.b)("p",null,"By default ",Object(r.b)("inlineCode",{parentName:"p"},"fromkeys")," sets ",Object(r.b)("inlineCode",{parentName:"p"},"None")," value. But you can also pass your own value:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"In [8]: router_models = ['ISR2811', 'ISR2911', 'ISR2921', 'ASR9002']\n\nIn [9]: models_count = dict.fromkeys(router_models, 0)\n\nIn [10]: models_count\nOut[10]: {'ISR2811': 0, 'ISR2911': 0, 'ISR2921': 0, 'ASR9002': 0}\n")),Object(r.b)("p",null,"This option of creating a dictionary is not suitable for all cases. For example, if you use a mutable data type in value, a reference to the same object will be created:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"In [10]: router_models = ['ISR2811', 'ISR2911', 'ISR2921', 'ASR9002']\n\nIn [11]: routers = dict.fromkeys(router_models, [])\n    ...:\n\nIn [12]: routers\nOut[12]: {'ISR2811': [], 'ISR2911': [], 'ISR2921': [], 'ASR9002': []}\n\nIn [13]: routers['ASR9002'].append('london_r1')\n\nIn [14]: routers\nOut[14]:\n{'ISR2811': ['london_r1'],\n 'ISR2911': ['london_r1'],\n 'ISR2921': ['london_r1'],\n 'ASR9002': ['london_r1']}\n")),Object(r.b)("p",null,"In this case, each key refers to the same list. Therefore, when a value is added to one of lists, others are updated."),Object(r.b)("p",null,"Note"),Object(r.b)("p",null,"A dictionary comprehension is better for this task. See section ",Object(r.b)("a",{parentName:"p",href:"https://pyneng.readthedocs.io/en/latest/book/08_python_basic_examples/x_comprehensions.html#x-comprehensions"},"List, dict, set comprehensions")))}s.isMDXComponent=!0},281:function(e,n,o){"use strict";o.d(n,"a",(function(){return b})),o.d(n,"b",(function(){return m}));var t=o(0),a=o.n(t);function r(e,n,o){return n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o,e}function l(e,n){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),o.push.apply(o,t)}return o}function i(e){for(var n=1;n<arguments.length;n++){var o=null!=arguments[n]?arguments[n]:{};n%2?l(Object(o),!0).forEach((function(n){r(e,n,o[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):l(Object(o)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(o,n))}))}return e}function c(e,n){if(null==e)return{};var o,t,a=function(e,n){if(null==e)return{};var o,t,a={},r=Object.keys(e);for(t=0;t<r.length;t++)o=r[t],n.indexOf(o)>=0||(a[o]=e[o]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)o=r[t],n.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(a[o]=e[o])}return a}var d=a.a.createContext({}),s=function(e){var n=a.a.useContext(d),o=n;return e&&(o="function"==typeof e?e(n):i(i({},n),e)),o},b=function(e){var n=s(e.components);return a.a.createElement(d.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},u=a.a.forwardRef((function(e,n){var o=e.components,t=e.mdxType,r=e.originalType,l=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),b=s(o),u=t,m=b["".concat(l,".").concat(u)]||b[u]||p[u]||r;return o?a.a.createElement(m,i(i({ref:n},d),{},{components:o})):a.a.createElement(m,i({ref:n},d))}));function m(e,n){var o=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var r=o.length,l=new Array(r);l[0]=u;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:t,l[1]=i;for(var d=2;d<r;d++)l[d]=o[d];return a.a.createElement.apply(null,l)}return a.a.createElement.apply(null,o)}u.displayName="MDXCreateElement"}}]);