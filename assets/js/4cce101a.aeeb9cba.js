(window.webpackJsonp=window.webpackJsonp||[]).push([[80],{152:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return r})),t.d(n,"metadata",(function(){return i})),t.d(n,"toc",(function(){return a})),t.d(n,"default",(function(){return l}));var o=t(3),p=t(8),s=(t(0),t(281)),r={id:"example_of_pexpect_use",title:"Example Of Pexpect Use",sidebar_label:"Example Of Pexpect Use",slug:"example_of_pexpect_use",custom_edit_url:null},i={unversionedId:"python/ssh_telnet/example_of_pexpect_use",id:"python/ssh_telnet/example_of_pexpect_use",isDocsHomePage:!1,title:"Example Of Pexpect Use",description:"Example of using pexpect when connecting to equipment and passing show command (file 1_pexpect.py):",source:"@site/docs/python/ssh_telnet/3_example_of_pexpect.md",slug:"/python/ssh_telnet/example_of_pexpect_use",permalink:"/docs/python/ssh_telnet/example_of_pexpect_use",editUrl:null,version:"current",sidebar_label:"Example Of Pexpect Use",sidebar:"someSidebar",previous:{title:"Module Pexpect",permalink:"/docs/python/ssh_telnet/module_pexpect"},next:{title:"Module Telnetlib",permalink:"/docs/python/ssh_telnet/module_telnetlib"}},a=[{value:"Working with pexpect without disabling commands pagination",id:"working-with-pexpect-without-disabling-commands-pagination",children:[]}],c={toc:a};function l(e){var n=e.components,t=Object(p.a)(e,["components"]);return Object(s.b)("wrapper",Object(o.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(s.b)("p",null,"Example of using pexpect when connecting to equipment and passing show command (file 1_pexpect.py):"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre"},'import pexpect\nimport re\nfrom pprint import pprint\n\n\ndef send_show_command(ip, username, password, enable, commands, prompt="#"):\n    with pexpect.spawn(f"ssh {username}@{ip}", timeout=10, encoding="utf-8") as ssh:\n        ssh.expect("[Pp]assword")\n        ssh.sendline(password)\n        enable_status = ssh.expect([">", "#"])\n        if enable_status == 0:\n            ssh.sendline("enable")\n            ssh.expect("[Pp]assword")\n            ssh.sendline(enable)\n            ssh.expect(prompt)\n\n        ssh.sendline("terminal length 0")\n        ssh.expect(prompt)\n\n        result = {}\n        for command in commands:\n            ssh.sendline(command)\n            match = ssh.expect([prompt, pexpect.TIMEOUT, pexpect.EOF])\n            if match == 1:\n                print(\n                    f"Symbol {prompt} is not found in output. Resulting output is written to\n                    dictionary")\n            if match == 2:\n                print("Connection was terminated by server")\n                return result\n            else:\n                output = ssh.before\n                result[command] = output.replace("\\r\\n", "\\n")\n        return result\n\n\nif __name__ == "__main__":\n    devices = ["192.168.100.1", "192.168.100.2", "192.168.100.3"]\n    commands = ["sh clock", "sh int desc"]\n    for ip in devices:\n        result = send_show_command(ip, "cisco", "cisco", "cisco", commands)\n        pprint(result, width=120)\n')),Object(s.b)("p",null,"This part of function is responsible for switching to enable mode:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre"},'enable_status = ssh.expect([">", "#"])\nif enable_status == 0:\n    ssh.sendline("enable")\n    ssh.expect("[Pp]assword")\n    ssh.sendline(enable)\n    ssh.expect(prompt)\n')),Object(s.b)("p",null,"If ",Object(s.b)("inlineCode",{parentName:"p"},'ssh.expect([">", "#"])')," does not return index 0, it means that connection was not switched to enable mode automaticaly and it should be done separately. If index 1 is returned, then we are already in enable mode, for example, because device is configured with privilege 15."),Object(s.b)("p",null,"Another interesting point about this function:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre"},'for command in commands:\n    ssh.sendline(command)\n    match = ssh.expect([prompt, pexpect.TIMEOUT, pexpect.EOF])\n    if match == 1:\n        print(\n            f"Symbol {prompt} is not found in output. Resulting output is written to dictionary"\n        )\n    if match == 2:\n        print("Connection was terminated by server")\n        return result\n    else:\n        output = ssh.before\n        result[command] = output.replace("\\r\\n", "\\n")\nreturn result\n')),Object(s.b)("p",null,"Here commands are sent in turn and ",Object(s.b)("inlineCode",{parentName:"p"},"expect")," waits for three options: prompt, timeout or EOF. If ",Object(s.b)("inlineCode",{parentName:"p"},"expect")," method didn\u2019t catch ",Object(s.b)("inlineCode",{parentName:"p"},"#"),", value 1 will be returned and in this case a message is displayed, that symbol was not found. But in both cases, when a match is found or timeout the resulting output is written to dictionary. Thus, you can see what was received from device, even if prompt is not found."),Object(s.b)("p",null,"Output after script execution:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre"},"{'sh clock': 'sh clock\\n*13:13:47.525 UTC Sun Jul 19 2020\\n',\n 'sh int desc': 'sh int desc\\n'\n                'Interface          Status         Protocol Description\\n'\n                'Et0/0              up             up       \\n'\n                'Et0/1              up             up       \\n'\n                'Et0/2              up             up       \\n'\n                'Et0/3              up             up       \\n'\n                'Lo22               up             up       \\n'\n                'Lo33               up             up       \\n'\n                'Lo45               up             up       \\n'\n                'Lo55               up             up       \\n'}\n{'sh clock': 'sh clock\\n*13:13:50.450 UTC Sun Jul 19 2020\\n',\n 'sh int desc': 'sh int desc\\n'\n                'Interface          Status         Protocol Description\\n'\n                'Et0/0              up             up       \\n'\n                'Et0/1              up             up       \\n'\n                'Et0/2              admin down     down     \\n'\n                'Et0/3              admin down     down     \\n'\n                'Lo0                up             up       \\n'\n                'Lo9                up             up       \\n'\n                'Lo19               up             up       \\n'\n                'Lo33               up             up       \\n'\n                'Lo100              up             up       \\n'}\n{'sh clock': 'sh clock\\n*13:13:53.360 UTC Sun Jul 19 2020\\n',\n 'sh int desc': 'sh int desc\\n'\n                'Interface          Status         Protocol Description\\n'\n                'Et0/0              up             up       \\n'\n                'Et0/1              up             up       \\n'\n                'Et0/2              admin down     down     \\n'\n                'Et0/3              admin down     down     \\n'\n                'Lo33               up             up       \\n'}\n")),Object(s.b)("h2",{id:"working-with-pexpect-without-disabling-commands-pagination"},"Working with pexpect without disabling commands pagination"),Object(s.b)("p",null,"Sometimes the output of a command is very large and cannot be read completely or device is not makes it possible to disable pagination. In this case, a slightly different approach is needed."),Object(s.b)("p",null,"Note"),Object(s.b)("p",null,"The same task will be repeated for other modules in this section."),Object(s.b)("p",null,"Example of using pexpect to work with paginated output of show command (1_pexpect_more.py file):"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre"},'import pexpect\nimport re\nfrom pprint import pprint\n\n\ndef send_show_command(ip, username, password, enable, command, prompt="#"):\n    with pexpect.spawn(f"ssh {username}@{ip}", timeout=10, encoding="utf-8") as ssh:\n        ssh.expect("[Pp]assword")\n        ssh.sendline(password)\n        enable_status = ssh.expect([">", "#"])\n        if enable_status == 0:\n            ssh.sendline("enable")\n            ssh.expect("[Pp]assword")\n            ssh.sendline(enable)\n            ssh.expect(prompt)\n\n        ssh.sendline(command)\n        output = ""\n\n        while True:\n            match = ssh.expect([prompt, "--More--", pexpect.TIMEOUT])\n            page = ssh.before.replace("\\r\\n", "\\n")\n            page = re.sub(" +\\x08+ +\\x08+", "\\n", page)\n            output += page\n            if match == 0:\n                break\n            elif match == 1:\n                ssh.send(" ")\n            else:\n                print("Error: timeout")\n                break\n        output = re.sub("\\n +\\n", "\\n", output)\n        return output\n\n\nif __name__ == "__main__":\n    devices = ["192.168.100.1", "192.168.100.2", "192.168.100.3"]\n    for ip in devices:\n        result = send_show_command(ip, "cisco", "cisco", "cisco", "sh run")\n        with open(f"{ip}_result.txt", "w") as f:\n            f.write(result)\n')),Object(s.b)("p",null,"Now after sending the command, ",Object(s.b)("inlineCode",{parentName:"p"},"expect")," method waits for another option ",Object(s.b)("inlineCode",{parentName:"p"},"--More--")," - sign, that there will be one more page further. Since it\u2019s not known in advance how many pages will be in the output, reading is performed in a loop ",Object(s.b)("inlineCode",{parentName:"p"},"while True"),". Loop is interrupted if prompt is met ",Object(s.b)("inlineCode",{parentName:"p"},"#")," or no prompt appears within 10 seconds or ",Object(s.b)("inlineCode",{parentName:"p"},"--More--"),"."),Object(s.b)("p",null,"If ",Object(s.b)("inlineCode",{parentName:"p"},"--More--")," is met, pages are not over yet and you have to scroll through the next one. In Cisco, you need to press space bar to do this (without new line). Therefore, ",Object(s.b)("inlineCode",{parentName:"p"},"send")," method is used here, not ",Object(s.b)("inlineCode",{parentName:"p"},"sendline")," - sendline automatically adds a new line character."),Object(s.b)("p",null,"This string ",Object(s.b)("inlineCode",{parentName:"p"},'page = re.sub(" +\\x08+ +\\x08+", "\\n", page)')," removes backspace symbols which are around ",Object(s.b)("inlineCode",{parentName:"p"},"--More--")," so they don\u2019t end up in the final output."),Object(s.b)("p",null,Object(s.b)("a",{parentName:"p",href:"https://pyneng.readthedocs.io/en/latest/book/18_ssh_telnet/telnetlib.html"},"Next "),Object(s.b)("a",{parentName:"p",href:"https://pyneng.readthedocs.io/en/latest/book/18_ssh_telnet/password.html"}," Previous")))}l.isMDXComponent=!0},281:function(e,n,t){"use strict";t.d(n,"a",(function(){return u})),t.d(n,"b",(function(){return b}));var o=t(0),p=t.n(o);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,o,p=function(e,n){if(null==e)return{};var t,o,p={},s=Object.keys(e);for(o=0;o<s.length;o++)t=s[o],n.indexOf(t)>=0||(p[t]=e[t]);return p}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)t=s[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(p[t]=e[t])}return p}var c=p.a.createContext({}),l=function(e){var n=p.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=l(e.components);return p.a.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return p.a.createElement(p.a.Fragment,{},n)}},m=p.a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,s=e.originalType,r=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),u=l(t),m=o,b=u["".concat(r,".").concat(m)]||u[m]||d[m]||s;return t?p.a.createElement(b,i(i({ref:n},c),{},{components:t})):p.a.createElement(b,i({ref:n},c))}));function b(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var s=t.length,r=new Array(s);r[0]=m;var i={};for(var a in n)hasOwnProperty.call(n,a)&&(i[a]=n[a]);i.originalType=e,i.mdxType="string"==typeof e?e:o,r[1]=i;for(var c=2;c<s;c++)r[c]=t[c];return p.a.createElement.apply(null,r)}return p.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"}}]);