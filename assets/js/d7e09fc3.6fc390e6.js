(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{112:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return c})),t.d(n,"toc",(function(){return s})),t.d(n,"default",(function(){return p}));var r=t(3),o=t(8),a=(t(0),t(121)),i={id:"script",title:"Script",sidebar_label:"3.1 Script",slug:"script",custom_edit_url:null},c={unversionedId:"python/program_organization/script",id:"python/program_organization/script",isDocsHomePage:!1,title:"Script",description:"Overview",source:"@site/docs/python/program_organization/01_Script.md",slug:"/python/program_organization/script",permalink:"/docs/python/program_organization/script",editUrl:null,version:"current",sidebar_label:"3.1 Script",sidebar:"someSidebar",previous:{title:"Objects",permalink:"/docs/python/working_with_data/objects"},next:{title:"More on Functions",permalink:"/docs/python/program_organization/more_on_functions"}},s=[{value:"Overview",id:"overview",children:[]},{value:"What is a Script?",id:"what-is-a-script",children:[]},{value:"A Problem",id:"a-problem",children:[]},{value:"Defining Things",id:"defining-things",children:[]},{value:"Defining Functions",id:"defining-functions",children:[]},{value:"What is a Function?",id:"what-is-a-function",children:[]},{value:"Function Definition",id:"function-definition",children:[]},{value:"Bottom-up Style",id:"bottom-up-style",children:[]},{value:"Function Design",id:"function-design",children:[]},{value:"Doc Strings",id:"doc-strings",children:[]},{value:"Type Annotations",id:"type-annotations",children:[]},{value:"Exercises",id:"exercises",children:[{value:"Exercise 3.1: Structuring a program as a collection of functions",id:"exercise-31-structuring-a-program-as-a-collection-of-functions",children:[]},{value:"Exercise 3.2: Creating a top-level function for program execution",id:"exercise-32-creating-a-top-level-function-for-program-execution",children:[]},{value:"Commentary",id:"commentary",children:[]}]}],l={toc:s};function p(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("h3",{id:"overview"},"Overview"),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"So far, we've learned some Python basics and have written some short scripts.\nHowever, as you start to write larger programs, you'll want to get organized.\nThis section dives into greater details on writing functions, handling errors,\nand introduces modules.  By the end you should be able to write programs\nthat are subdivided into functions across multiple files. We'll also give\nsome useful code templates for writing more useful scripts.")),Object(a.b)("p",null,"\u200b    "),Object(a.b)("p",null,"In this part we look more closely at the practice of writing Python\nscripts."),Object(a.b)("h3",{id:"what-is-a-script"},"What is a Script?"),Object(a.b)("p",null,"A ",Object(a.b)("em",{parentName:"p"},"script")," is a program that runs a series of statements and stops."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"# program.py\n\nstatement1\nstatement2\nstatement3\n...\n")),Object(a.b)("p",null,"We have mostly been writing scripts to this point."),Object(a.b)("h3",{id:"a-problem"},"A Problem"),Object(a.b)("p",null,"If you write a useful script, it will grow in features and\nfunctionality.  You may want to apply it to other related problems.\nOver time, it might become a critical application.  And if you don't\ntake care, it might turn into a huge tangled mess.  So, let's get\norganized."),Object(a.b)("h3",{id:"defining-things"},"Defining Things"),Object(a.b)("p",null,"Names must always be defined before they get used later."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"def square(x):\n    return x*x\n\na = 42\nb = a + 2     # Requires that `a` is defined\n\nz = square(b) # Requires `square` and `b` to be defined\n")),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"The order is important."),"\nYou almost always put the definitions of variables and functions near the top."),Object(a.b)("h3",{id:"defining-functions"},"Defining Functions"),Object(a.b)("p",null,"It is a good idea to put all of the code related to a single ",Object(a.b)("em",{parentName:"p"},"task")," all in one place.\nUse a function."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"def read_prices(filename):\n    prices = {}\n    with open(filename) as f:\n        f_csv = csv.reader(f)\n        for row in f_csv:\n            prices[row[0]] = float(row[1])\n    return prices\n")),Object(a.b)("p",null,"A function also simplifies repeated operations."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"oldprices = read_prices('oldprices.csv')\nnewprices = read_prices('newprices.csv')\n")),Object(a.b)("h3",{id:"what-is-a-function"},"What is a Function?"),Object(a.b)("p",null,"A function is a named sequence of statements."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"def funcname(args):\n  statement\n  statement\n  ...\n  return result\n")),Object(a.b)("p",null,Object(a.b)("em",{parentName:"p"},"Any")," Python statement can be used inside."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"def foo():\n    import math\n    print(math.sqrt(2))\n    help(math)\n")),Object(a.b)("p",null,"There are no ",Object(a.b)("em",{parentName:"p"},"special")," statements in Python (which makes it easy to remember)."),Object(a.b)("h3",{id:"function-definition"},"Function Definition"),Object(a.b)("p",null,"Functions can be ",Object(a.b)("em",{parentName:"p"},"defined")," in any order."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"def foo(x):\n    bar(x)\n\ndef bar(x):\n    statements\n\n# OR\ndef bar(x):\n    statements\n\ndef foo(x):\n    bar(x)\n")),Object(a.b)("p",null,"Functions must only be defined prior to actually being ",Object(a.b)("em",{parentName:"p"},"used")," (or called) during program execution."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"foo(3)        # foo must be defined already\n")),Object(a.b)("p",null,"Stylistically, it is probably more common to see functions defined in\na ",Object(a.b)("em",{parentName:"p"},"bottom-up")," fashion."),Object(a.b)("h3",{id:"bottom-up-style"},"Bottom-up Style"),Object(a.b)("p",null,"Functions are treated as building blocks.\nThe smaller/simpler blocks go first."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"# myprogram.py\ndef foo(x):\n    ...\n\ndef bar(x):\n    ...\n    foo(x)          # Defined above\n    ...\n\ndef spam(x):\n    ...\n    bar(x)          # Defined above\n    ...\n\nspam(42)            # Code that uses the functions appears at the end\n")),Object(a.b)("p",null,"Later functions build upon earlier functions.  Again, this is only\na point of style.  The only thing that matters in the above program\nis that the call to ",Object(a.b)("inlineCode",{parentName:"p"},"spam(42)")," go last."),Object(a.b)("h3",{id:"function-design"},"Function Design"),Object(a.b)("p",null,"Ideally, functions should be a ",Object(a.b)("em",{parentName:"p"},"black box"),".\nThey should only operate on passed inputs and avoid global variables\nand mysterious side-effects.  Your main goals: ",Object(a.b)("em",{parentName:"p"},"Modularity")," and ",Object(a.b)("em",{parentName:"p"},"Predictability"),"."),Object(a.b)("h3",{id:"doc-strings"},"Doc Strings"),Object(a.b)("p",null,"It's good practice to include documentation in the form of a\ndoc-string.  Doc-strings are strings written immediately after the\nname of the function. They feed ",Object(a.b)("inlineCode",{parentName:"p"},"help()"),", IDEs and other tools."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"def read_prices(filename):\n    '''\n    Read prices from a CSV file of name,price data\n    '''\n    prices = {}\n    with open(filename) as f:\n        f_csv = csv.reader(f)\n        for row in f_csv:\n            prices[row[0]] = float(row[1])\n    return prices\n")),Object(a.b)("p",null,"A good practice for doc strings is to write a short one sentence\nsummary of what the function does.  If more information is needed,\ninclude a short example of usage along with a more detailed\ndescription of the arguments."),Object(a.b)("h3",{id:"type-annotations"},"Type Annotations"),Object(a.b)("p",null,"You can also add optional type hints to function definitions."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"def read_prices(filename: str) -> dict:\n    '''\n    Read prices from a CSV file of name,price data\n    '''\n    prices = {}\n    with open(filename) as f:\n        f_csv = csv.reader(f)\n        for row in f_csv:\n            prices[row[0]] = float(row[1])\n    return prices\n")),Object(a.b)("p",null,"The hints do nothing operationally. They are purely informational.\nHowever, they may be used by IDEs, code checkers, and other tools\nto do more."),Object(a.b)("h2",{id:"exercises"},"Exercises"),Object(a.b)("p",null,"In section 2, you wrote a program called ",Object(a.b)("inlineCode",{parentName:"p"},"report.py")," that printed out\na report showing the performance of a stock portfolio.  This program\nconsisted of some functions. For example:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"# report.py\nimport csv\n\ndef read_portfolio(filename):\n    '''\n    Read a stock portfolio file into a list of dictionaries with keys\n    name, shares, and price.\n    '''\n    portfolio = []\n    with open(filename) as f:\n        rows = csv.reader(f)\n        headers = next(rows)\n\n        for row in rows:\n            record = dict(zip(headers, row))\n            stock = {\n                'name' : record['name'],\n                'shares' : int(record['shares']),\n                'price' : float(record['price'])\n            }\n            portfolio.append(stock)\n    return portfolio\n...\n")),Object(a.b)("p",null,"However, there were also portions of the program that just performed a\nseries of scripted calculations.  This code appeared near the end of\nthe program. For example:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"...\n\n# Output the report\n\nheaders = ('Name', 'Shares', 'Price', 'Change')\nprint('%10s %10s %10s %10s'  % headers)\nprint(('-' * 10 + ' ') * len(headers))\nfor row in report:\n    print('%10s %10d %10.2f %10.2f' % row)\n...\n")),Object(a.b)("p",null,"In this exercise, we\u2019re going take this program and organize it a\nlittle more strongly around the use of functions."),Object(a.b)("h3",{id:"exercise-31-structuring-a-program-as-a-collection-of-functions"},"Exercise 3.1: Structuring a program as a collection of functions"),Object(a.b)("p",null,"Modify your ",Object(a.b)("inlineCode",{parentName:"p"},"report.py")," program so that all major operations,\nincluding calculations and output, are carried out by a collection of\nfunctions. Specifically:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Create a function ",Object(a.b)("inlineCode",{parentName:"li"},"print_report(report)")," that prints out the report."),Object(a.b)("li",{parentName:"ul"},"Change the last part of the program so that it is nothing more than a series of function calls and no other computation.")),Object(a.b)("h3",{id:"exercise-32-creating-a-top-level-function-for-program-execution"},"Exercise 3.2: Creating a top-level function for program execution"),Object(a.b)("p",null,"Take the last part of your program and package it into a single\nfunction ",Object(a.b)("inlineCode",{parentName:"p"},"portfolio_report(portfolio_filename, prices_filename)"),".\nHave the function work so that the following function call creates the\nreport as before:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"portfolio_report('Data/portfolio.csv', 'Data/prices.csv')\n")),Object(a.b)("p",null,"In this final version, your program will be nothing more than a series\nof function definitions followed by a single function call to\n",Object(a.b)("inlineCode",{parentName:"p"},"portfolio_report()")," at the very end (which executes all of the steps\ninvolved in the program)."),Object(a.b)("p",null,"By turning your program into a single function, it becomes easy to run\nit on different inputs.  For example, try these statements\ninteractively after running your program:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},">>> portfolio_report('Data/portfolio2.csv', 'Data/prices.csv')\n... look at the output ...\n>>> files = ['Data/portfolio.csv', 'Data/portfolio2.csv']\n>>> for name in files:\n        print(f'{name:-^43s}')\n        portfolio_report(name, 'Data/prices.csv')\n        print()\n\n... look at the output ...\n>>>\n")),Object(a.b)("h3",{id:"commentary"},"Commentary"),Object(a.b)("p",null,"Python makes it very easy to write relatively unstructured scripting code\nwhere you just have a file with a sequence of statements in it. In the\nbig picture, it's almost always better to utilize functions whenever\nyou can.  At some point, that script is going to grow and you'll wish\nyou had a bit more organization.  Also, a little known fact is that Python\nruns a bit faster if you use functions."))}p.isMDXComponent=!0},121:function(e,n,t){"use strict";t.d(n,"a",(function(){return u})),t.d(n,"b",(function(){return f}));var r=t(0),o=t.n(r);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=o.a.createContext({}),p=function(e){var n=o.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},u=function(e){var n=p(e.components);return o.a.createElement(l.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},d=o.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=p(t),d=r,f=u["".concat(i,".").concat(d)]||u[d]||b[d]||a;return t?o.a.createElement(f,c(c({ref:n},l),{},{components:t})):o.a.createElement(f,c({ref:n},l))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=d;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var l=2;l<a;l++)i[l]=t[l];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"}}]);