(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{106:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return p})),t.d(n,"metadata",(function(){return c})),t.d(n,"toc",(function(){return s})),t.d(n,"default",(function(){return i}));var a=t(3),r=t(8),o=(t(0),t(280)),p={id:"for",title:"For",sidebar_label:"6.2 For",slug:"for",custom_edit_url:null},c={unversionedId:"python/control_structures/for",id:"python/control_structures/for",isDocsHomePage:!1,title:"For",description:"Very often the same step should be performed for a set of the same data type. For example, convert all strings in list to uppercase. Python uses for loop for such purposes.",source:"@site/docs/python/control_structures/2_for.md",slug:"/python/control_structures/for",permalink:"/docs/python/control_structures/for",editUrl:null,version:"current",sidebar_label:"6.2 For",sidebar:"someSidebar",previous:{title:"If/Elif/Else",permalink:"/docs/python/control_structures/if_elif_else"},next:{title:"While",permalink:"/docs/python/control_structures/while"}},s=[],l={toc:s};function i(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Very often the same step should be performed for a set of the same data type. For example, convert all strings in list to uppercase. Python uses ",Object(o.b)("inlineCode",{parentName:"p"},"for")," loop for such purposes."),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"For")," loop iterates elements of specified sequence and performs actions specified for each element."),Object(o.b)("p",null,"Examples of sequences of elements that can be iterated by ",Object(o.b)("inlineCode",{parentName:"p"},"for"),":"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"string"),Object(o.b)("li",{parentName:"ul"},"list"),Object(o.b)("li",{parentName:"ul"},"dictionary"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"https://pyneng.readthedocs.io/en/latest/book/10_useful_functions/range.html#range"},"range")),Object(o.b)("li",{parentName:"ul"},"Any ",Object(o.b)("a",{parentName:"li",href:"https://pyneng.readthedocs.io/en/latest/book/13_iterator_generator/iterable.html#iterable"},"Iterable"))),Object(o.b)("p",null,"An example of converting strings in a list to uppercase without ",Object(o.b)("inlineCode",{parentName:"p"},"for")," loop:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"words = ['list', 'dict', 'tuple']\n\nupper_words = []\n\nprint(words[0])\n\nprint(words[0].upper()) # converting word to uppercase\n\nupper_words.append(words[0].upper()) # converting and adding to new list\n\nprint(upper_words)\n\nupper_words.append(words[1].upper())\n\nupper_words.append(words[2].upper())\n\nprint(upper_words)\n\n")),Object(o.b)("p",null,"Output"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"list\n")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"LIST\n")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"['LIST']\n")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"['LIST', 'DICT', 'TUPLE']\n")),Object(o.b)("p",null,"This solution has several nuances:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"the same action need to be repeated several times"),Object(o.b)("li",{parentName:"ul"},"code is tied to a certain number of elements in ",Object(o.b)("em",{parentName:"li"},"words")," list")),Object(o.b)("p",null,"The same steps with the ",Object(o.b)("inlineCode",{parentName:"p"},"for")," loop:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"words = ['list', 'dict', 'tuple']\n\nupper_words = []\n\nfor word in words:\n    upper_words.append(word.upper())\n\nprint(upper_words)\n\n")),Object(o.b)("p",null,"Output"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"['LIST', 'DICT', 'TUPLE']\n")),Object(o.b)("p",null,"Expression ",Object(o.b)("inlineCode",{parentName:"p"},"for word in words: upper_words.append(word.upper())")," means \u201cfor each word in ",Object(o.b)("inlineCode",{parentName:"p"},"words")," list to perform actions in block ",Object(o.b)("inlineCode",{parentName:"p"},"for"),"\u201d. In this case, ",Object(o.b)("inlineCode",{parentName:"p"},"word")," is the name of the variable, which refers to different values each iteration of the loop."),Object(o.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"Note")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"The ",Object(o.b)("a",{parentName:"p",href:"http://www.pythontutor.com/"},"pythontutor")," project can be very helpful in understanding loops. The project visualize code execution and allows you to see what happens at every stage of code execution, which is especially useful in first steps of learning loops. The ",Object(o.b)("a",{parentName:"p",href:"http://www.pythontutor.com/visualize.html#mode=edit"},"pythontutor")," allows you to upload your code, for instance, see ",Object(o.b)("a",{parentName:"p",href:"http://www.pythontutor.com/visualize.html#code=words%20%3D%20%5B'list',%20'dict',%20'tuple'%5D%0Aupper_words%20%3D%20%5B%5D%0A%0Afor%20word%20in%20words%3A%0A%20%20%20%20upper_words.append%28word.upper%28%29%29%0A&cumulative=false&curInstr=0&heapPrimitives=nevernest&mode=display&origin=opt-frontend.js&py=3&rawInputLstJSON=%5B%5D&textReferences=false"},"example above")))),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"For")," loop can work with any sequence of elements. For example, the above code used a list and the loop iterated over the elements of the list. The for loop works in a similar way with tuples."),Object(o.b)("p",null,"When working with strings ",Object(o.b)("inlineCode",{parentName:"p"},"for")," loop iterates through string characters, for example:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"for letter in 'Test string':\n    print(letter)\n\n")),Object(o.b)("p",null,"Output"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"T\ne\ns\nt\n\ns\nt\nr\ni\nn\ng\n")),Object(o.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"Note")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"Loop uses a variable named ",Object(o.b)("em",{parentName:"p"},"letter"),". Although, it could be any name, it is better when name tells you which objects go through a loop."))),Object(o.b)("p",null,"Sometimes it is necessary to use sequence of numbers in loop. In this case, it is best to use ",Object(o.b)("a",{parentName:"p",href:"https://pyneng.readthedocs.io/en/latest/book/10_useful_functions/range.html#range"},"range")),Object(o.b)("p",null,"Example of loop ",Object(o.b)("inlineCode",{parentName:"p"},"for")," with range() function:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"for i in range(10):\n    print('interface FastEthernet0/{}'.format(i))\n\n")),Object(o.b)("p",null,"Output"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"interface FastEthernet0/0\ninterface FastEthernet0/1\ninterface FastEthernet0/2\ninterface FastEthernet0/3\ninterface FastEthernet0/4\ninterface FastEthernet0/5\ninterface FastEthernet0/6\ninterface FastEthernet0/7\ninterface FastEthernet0/8\ninterface FastEthernet0/9\n")),Object(o.b)("p",null,"This loop uses ",Object(o.b)("inlineCode",{parentName:"p"},"range(10)"),". Function range() generates numbers in range from zero to specified number (in this example, up to 10) not including it."),Object(o.b)("p",null,"In this example, loop runs through ",Object(o.b)("em",{parentName:"p"},"vlans")," list, so variable can be called ",Object(o.b)("em",{parentName:"p"},"vlan"),":"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"vlans = [10, 20, 30, 40, 100]\nfor vlan in vlans:\n    print('vlan {}'.format(vlan))\n    print(' name VLAN_{}'.format(vlan))\n    \n")),Object(o.b)("p",null,"Output"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"vlan 10\n name VLAN_10\nvlan 20\n name VLAN_20\nvlan 30\n name VLAN_30\nvlan 40\n name VLAN_40\nvlan 100\n name VLAN_100\n")),Object(o.b)("p",null,"When a loop runs through dictionary, it actually goes through keys:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"r1 = {\n    'ios': '15.4',\n    'ip': '10.255.0.1',\n    'hostname': 'london_r1',\n    'location': '21 New Globe Walk',\n    'model': '4451',\n    'vendor': 'Cisco'}\n\nfor k in r1:\n    print(k)\n")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"ios\nip\nhostname\nlocation\nmodel\nvendor\n")),Object(o.b)("p",null,"If you want to print key-value pairs in loop, you can do this:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"for key in r1:\n    print(key + ' => ' + r1[key])\n\n")),Object(o.b)("p",null,"Output"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"ios => 15.4\nip => 10.255.0.1\nhostname => london_r1\nlocation => 21 New Globe Walk\nmodel => 4451\nvendor => Cisco\n")),Object(o.b)("p",null,"Or use items() method which allows you to run loop over a key-value pair:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"for key, value in r1.items():\n    print(key + ' => ' + value)\n    \n")),Object(o.b)("p",null,"Output"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"ios => 15.4\nip => 10.255.0.1\nhostname => london_r1\nlocation => 21 New Globe Walk\nmodel => 4451\nvendor => Cisco\n")),Object(o.b)("p",null,"Method items() returns a special view object that displays key-value pairs:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"print(r1.items())\n\n")),Object(o.b)("p",null,"Output"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"dict_items([('ios', '15.4'), ('ip', '10.255.0.1'), ('hostname', 'london_r1'), ('location', '21 New Globe Walk'), ('model', '4451'), ('vendor', 'Cisco')])\n")),Object(o.b)("h1",{id:"nested-for"},"Nested for"),Object(o.b)("p",null,"Loops ",Object(o.b)("inlineCode",{parentName:"p"},"for")," can be nested in each other."),Object(o.b)("p",null,"In this example, ",Object(o.b)("em",{parentName:"p"},"commands")," is a list of commands to execute on each interface in the ",Object(o.b)("em",{parentName:"p"},"fast_int")," list:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"commands = ['switchport mode access', 'spanning-tree portfast', 'spanning-tree bpduguard enable']\nfast_int = ['0/1', '0/3', '0/4', '0/7', '0/9', '0/10', '0/11']\n\nfor intf in fast_int:\n    print('interface FastEthernet {}'.format(intf))\n    for command in commands:\n        print(' {}'.format(command))\n")),Object(o.b)("p",null,"Output"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"interface FastEthernet 0/1\n switchport mode access\n spanning-tree portfast\n spanning-tree bpduguard enable\ninterface FastEthernet 0/3\n switchport mode access\n spanning-tree portfast\n spanning-tree bpduguard enable\ninterface FastEthernet 0/4\n switchport mode access\n spanning-tree portfast\n spanning-tree bpduguard enable\ninterface FastEthernet 0/7\n switchport mode access\n spanning-tree portfast\n spanning-tree bpduguard enable\ninterface FastEthernet 0/9\n switchport mode access\n spanning-tree portfast\n spanning-tree bpduguard enable\ninterface FastEthernet 0/10\n switchport mode access\n spanning-tree portfast\n spanning-tree bpduguard enable\ninterface FastEthernet 0/11\n switchport mode access\n spanning-tree portfast\n spanning-tree bpduguard enable\n\n")),Object(o.b)("p",null,"The first ",Object(o.b)("inlineCode",{parentName:"p"},"for")," loop passes through interfaces in the ",Object(o.b)("em",{parentName:"p"},"fast_int")," list and the second through commands in ",Object(o.b)("em",{parentName:"p"},"commands")," list."),Object(o.b)("h1",{id:"combination-for-and-if"},"Combination for and if"),Object(o.b)("p",null,"Consider example of combining ",Object(o.b)("inlineCode",{parentName:"p"},"for")," and ",Object(o.b)("inlineCode",{parentName:"p"},"if"),"."),Object(o.b)("p",null,"Generate_access_port_config.py file:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"}," access_template = ['switchport mode access',\n                    'switchport access vlan',\n                    'spanning-tree portfast',\n                    'spanning-tree bpduguard enable']\n\n fast_int = {'access': {'0/12':10,\n                        '0/14':11,\n                        '0/16':17,\n                        '0/17':150}}\n\n for intf, vlan in fast_int['access'].items():\n     print('interface FastEthernet' + intf)\n     for command in access_template:\n         if command.endswith('access vlan'):\n             print(' {} {}'.format(command, vlan))\n         else:\n             print(' {}'.format(command))\n")),Object(o.b)("p",null,"Comments to the code:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"The first ",Object(o.b)("inlineCode",{parentName:"p"},"for")," loop iterates keys and values in nested fast_int","[\u2018access\u2019]"," dictionary")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"At this moment of loop the current key is stored in ",Object(o.b)("em",{parentName:"p"},"intf")," variable")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"At this moment of loop the current value is stored in ",Object(o.b)("em",{parentName:"p"},"vlan")," variable")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"String \u201cinterface Fastethernet\u201d is displayed with interface number added")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"The second loop ",Object(o.b)("inlineCode",{parentName:"p"},"for")," iterates commands from ",Object(o.b)("em",{parentName:"p"},"access_template")," list")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Since ",Object(o.b)("em",{parentName:"p"},"switchport access")," to vlan"))),Object(o.b)("p",null,"  command requires a VLAN number:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"within second loop ",Object(o.b)("inlineCode",{parentName:"li"},"for")," commands are checked"),Object(o.b)("li",{parentName:"ul"},"if command ends with \u201caccess vlan\u201d",Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},"command is displayed and VLAN number is added to it"))),Object(o.b)("li",{parentName:"ul"},"in all other cases, command is simply displayed")),Object(o.b)("p",null,"Result of script execution:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"$ python generate_access_port_config.py\ninterface FastEthernet0/12\n switchport mode access\n switchport access vlan 10\n spanning-tree portfast\n spanning-tree bpduguard enable\ninterface FastEthernet0/14\n switchport mode access\n switchport access vlan 11\n spanning-tree portfast\n spanning-tree bpduguard enable\ninterface FastEthernet0/16\n switchport mode access\n switchport access vlan 17\n spanning-tree portfast\n spanning-tree bpduguard enable\ninterface FastEthernet0/17\n switchport mode access\n switchport access vlan 150\n spanning-tree portfast\n spanning-tree bpduguard enable\n")))}i.isMDXComponent=!0},280:function(e,n,t){"use strict";t.d(n,"a",(function(){return b})),t.d(n,"b",(function(){return d}));var a=t(0),r=t.n(a);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function p(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?p(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):p(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=r.a.createContext({}),i=function(e){var n=r.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},b=function(e){var n=i(e.components);return r.a.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},m=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),b=i(t),m=a,d=b["".concat(p,".").concat(m)]||b[m]||u[m]||o;return t?r.a.createElement(d,c(c({ref:n},l),{},{components:t})):r.a.createElement(d,c({ref:n},l))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,p=new Array(o);p[0]=m;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,p[1]=c;for(var l=2;l<o;l++)p[l]=t[l];return r.a.createElement.apply(null,p)}return r.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"}}]);