(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{121:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return h}));var r=n(0),a=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=a.a.createContext({}),p=function(e){var t=a.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},b=function(e){var t=p(e.components);return a.a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),b=p(n),d=r,h=b["".concat(s,".").concat(d)]||b[d]||u[d]||i;return n?a.a.createElement(h,o(o({ref:t},c),{},{components:n})):a.a.createElement(h,o({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var c=2;c<i;c++)s[c]=n[c];return a.a.createElement.apply(null,s)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},71:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return o})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return p}));var r=n(3),a=n(8),i=(n(0),n(121)),s={id:"strings",title:"Strings",sidebar_label:"1.4 Strings",slug:"strings",custom_edit_url:null},o={unversionedId:"python/introduction/strings",id:"python/introduction/strings",isDocsHomePage:!1,title:"Strings",description:"\u200b",source:"@site/docs/python/introduction/04_Strings.md",slug:"/python/introduction/strings",permalink:"/docs/python/introduction/strings",editUrl:null,version:"current",sidebar_label:"1.4 Strings",sidebar:"someSidebar",previous:{title:"Numbers",permalink:"/docs/python/introduction/numbers"},next:{title:"Lists",permalink:"/docs/python/introduction/lists"}},l=[{value:"Representing Literal Text",id:"representing-literal-text",children:[]},{value:"String escape codes",id:"string-escape-codes",children:[]},{value:"String Representation",id:"string-representation",children:[]},{value:"String Indexing",id:"string-indexing",children:[]},{value:"String operations",id:"string-operations",children:[]},{value:"String methods",id:"string-methods",children:[]},{value:"String Mutability",id:"string-mutability",children:[]},{value:"String Conversions",id:"string-conversions",children:[]},{value:"Byte Strings",id:"byte-strings",children:[]},{value:"Raw Strings",id:"raw-strings",children:[]},{value:"f-Strings",id:"f-strings",children:[]},{value:"Exercises",id:"exercises",children:[{value:"Exercise 1.13: Extracting individual characters and substrings",id:"exercise-113-extracting-individual-characters-and-substrings",children:[]},{value:"Exercise 1.14: String concatenation",id:"exercise-114-string-concatenation",children:[]},{value:"Exercise 1.15: Membership testing (substring testing)",id:"exercise-115-membership-testing-substring-testing",children:[]},{value:"Exercise 1.16: String Methods",id:"exercise-116-string-methods",children:[]},{value:"Exercise 1.17: f-strings",id:"exercise-117-f-strings",children:[]},{value:"Exercise 1.18: Regular Expressions",id:"exercise-118-regular-expressions",children:[]},{value:"Commentary",id:"commentary",children:[]}]}],c={toc:l};function p(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"\u200b    "),Object(i.b)("p",null,"This section introduces ways to work with text."),Object(i.b)("h3",{id:"representing-literal-text"},"Representing Literal Text"),Object(i.b)("p",null,"String literals are written in programs with quotes."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"# Single quote\na = 'Yeah but no but yeah but...'\n\n# Double quote\nb = \"computer says no\"\n\n# Triple quotes\nc = '''\nLook into my eyes, look into my eyes, the eyes, the eyes, the eyes,\nnot around the eyes,\ndon't look around the eyes,\nlook into my eyes, you're under.\n'''\n")),Object(i.b)("p",null,"Normally strings may only span a single line. Triple quotes capture all text enclosed across multiple lines\nincluding all formatting."),Object(i.b)("p",null,"There is no difference between using single (') versus double (\")\nquotes. ",Object(i.b)("em",{parentName:"p"},"However, the same type of quote used to start a string must be used to\nterminate it"),"."),Object(i.b)("h3",{id:"string-escape-codes"},"String escape codes"),Object(i.b)("p",null,"Escape codes are used to represent control characters and characters that can't be easily typed\ndirectly at the keyboard.  Here are some common escape codes:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"'\\n'      Line feed\n'\\r'      Carriage return\n'\\t'      Tab\n'\\''      Literal single quote\n'\\\"'      Literal double quote\n'\\\\'      Literal backslash\n")),Object(i.b)("h3",{id:"string-representation"},"String Representation"),Object(i.b)("p",null,'Each character in a string is stored internally as a so-called Unicode "code-point" which is\nan integer.  You can specify an exact code-point value using the following escape sequences:'),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"a = '\\xf1'          # a = '\xf1'\nb = '\\u2200'        # b = '\u2200'\nc = '\\U0001D122'    # c = '\ud834\udd22'\nd = '\\N{FOR ALL}'   # d = '\u2200'\n")),Object(i.b)("p",null,"The ",Object(i.b)("a",{parentName:"p",href:"https://unicode.org/charts"},"Unicode Character Database")," is a reference for all\navailable character codes."),Object(i.b)("h3",{id:"string-indexing"},"String Indexing"),Object(i.b)("p",null,"Strings work like an array for accessing individual characters. You use an integer index, starting at 0.\nNegative indices specify a position relative to the end of the string."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"a = 'Hello world'\nb = a[0]          # 'H'\nc = a[4]          # 'o'\nd = a[-1]         # 'd' (end of string)\n")),Object(i.b)("p",null,"You can also slice or select substrings specifying a range of indices with ",Object(i.b)("inlineCode",{parentName:"p"},":"),"."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"d = a[:5]     # 'Hello'\ne = a[6:]     # 'world'\nf = a[3:8]    # 'lo wo'\ng = a[-5:]    # 'world'\n")),Object(i.b)("p",null,"The character at the ending index is not included.  Missing indices assume the beginning or ending of the string."),Object(i.b)("h3",{id:"string-operations"},"String operations"),Object(i.b)("p",null,"Concatenation, length, membership and replication."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"# Concatenation (+)\na = 'Hello' + 'World'   # 'HelloWorld'\nb = 'Say ' + a          # 'Say HelloWorld'\n\n# Length (len)\ns = 'Hello'\nlen(s)                  # 5\n\n# Membership test (`in`, `not in`)\nt = 'e' in s            # True\nf = 'x' in s            # False\ng = 'hi' not in s       # True\n\n# Replication (s * n)\nrep = s * 5             # 'HelloHelloHelloHelloHello'\n")),Object(i.b)("h3",{id:"string-methods"},"String methods"),Object(i.b)("p",null,"Strings have methods that perform various operations with the string data."),Object(i.b)("p",null,"Example: stripping any leading / trailing white space."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"s = '  Hello '\nt = s.strip()     # 'Hello'\n")),Object(i.b)("p",null,"Example: Case conversion."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"s = 'Hello'\nl = s.lower()     # 'hello'\nu = s.upper()     # 'HELLO'\n")),Object(i.b)("p",null,"Example: Replacing text."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"s = 'Hello world'\nt = s.replace('Hello' , 'Hallo')   # 'Hallo world'\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"More string methods:")),Object(i.b)("p",null,"Strings have a wide variety of other methods for testing and manipulating the text data.\nThis is a small sample of methods:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"s.endswith(suffix)     # Check if string ends with suffix\ns.find(t)              # First occurrence of t in s\ns.index(t)             # First occurrence of t in s\ns.isalpha()            # Check if characters are alphabetic\ns.isdigit()            # Check if characters are numeric\ns.islower()            # Check if characters are lower-case\ns.isupper()            # Check if characters are upper-case\ns.join(slist)          # Join a list of strings using s as delimiter\ns.lower()              # Convert to lower case\ns.replace(old,new)     # Replace text\ns.rfind(t)             # Search for t from end of string\ns.rindex(t)            # Search for t from end of string\ns.split([delim])       # Split string into list of substrings\ns.startswith(prefix)   # Check if string starts with prefix\ns.strip()              # Strip leading/trailing space\ns.upper()              # Convert to upper case\n")),Object(i.b)("h3",{id:"string-mutability"},"String Mutability"),Object(i.b)("p",null,'Strings are "immutable" or read-only.\nOnce created, the value can\'t be changed.'),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},">>> s = 'Hello World'\n>>> s[1] = 'a'\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\nTypeError: 'str' object does not support item assignment\n>>>\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"All operations and methods that manipulate string data, always create new strings.")),Object(i.b)("h3",{id:"string-conversions"},"String Conversions"),Object(i.b)("p",null,"Use ",Object(i.b)("inlineCode",{parentName:"p"},"str()")," to convert any value to a string. The result is a string holding the\nsame text that would have been produced by the ",Object(i.b)("inlineCode",{parentName:"p"},"print()")," statement."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},">>> x = 42\n>>> str(x)\n'42'\n>>>\n")),Object(i.b)("h3",{id:"byte-strings"},"Byte Strings"),Object(i.b)("p",null,"A string of 8-bit bytes, commonly encountered with low-level I/O, is written as follows:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"data = b'Hello World\\r\\n'\n")),Object(i.b)("p",null,"By putting a little b before the first quotation, you specify that it is a byte string as opposed to a text string."),Object(i.b)("p",null,"Most of the usual string operations work."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"len(data)                         # 13\ndata[0:5]                         # b'Hello'\ndata.replace(b'Hello', b'Cruel')  # b'Cruel World\\r\\n'\n")),Object(i.b)("p",null,"Indexing is a bit different because it returns byte values as integers."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"data[0]   # 72 (ASCII code for 'H')\n")),Object(i.b)("p",null,"Conversion to/from text strings."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"text = data.decode('utf-8') # bytes -> text\ndata = text.encode('utf-8') # text -> bytes\n")),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"'utf-8'")," argument specifies a character encoding.  Other common\nvalues include ",Object(i.b)("inlineCode",{parentName:"p"},"'ascii'")," and ",Object(i.b)("inlineCode",{parentName:"p"},"'latin1'"),"."),Object(i.b)("h3",{id:"raw-strings"},"Raw Strings"),Object(i.b)("p",null,'Raw strings are string literals with an uninterpreted backslash. They\nare specified by prefixing the initial quote with a lowercase "r".'),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},">>> rs = r'c:\\newdata\\test' # Raw (uninterpreted backslash)\n>>> rs\n'c:\\\\newdata\\\\test'\n")),Object(i.b)("p",null,"The string is the literal text enclosed inside, exactly as typed.\nThis is useful in situations where the backslash has special\nsignificance. Example: filename, regular expressions, etc."),Object(i.b)("h3",{id:"f-strings"},"f-Strings"),Object(i.b)("p",null,"A string with formatted expression substitution."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},">>> name = 'IBM'\n>>> shares = 100\n>>> price = 91.1\n>>> a = f'{name:>10s} {shares:10d} {price:10.2f}'\n>>> a\n'       IBM        100      91.10'\n>>> b = f'Cost = ${shares*price:0.2f}'\n>>> b\n'Cost = $9110.00'\n>>>\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Note: This requires Python 3.6 or newer."),"  The meaning of the format codes\nis covered later."),Object(i.b)("h2",{id:"exercises"},"Exercises"),Object(i.b)("p",null,"In these exercises, you'll experiment with operations on Python's\nstring type.  You should do this at the Python interactive prompt\nwhere you can easily see the results.  Important note:"),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"In exercises where you are supposed to interact with the interpreter,\n",Object(i.b)("inlineCode",{parentName:"p"},">>>")," is the interpreter prompt that you get when Python wants\nyou to type a new statement.  Some statements in the exercise span\nmultiple lines--to get these statements to run, you may have to hit\n'return' a few times.  Just a reminder that you ",Object(i.b)("em",{parentName:"p"},"DO NOT")," type\nthe ",Object(i.b)("inlineCode",{parentName:"p"},">>>")," when working these examples.")),Object(i.b)("p",null,"Start by defining a string containing a series of stock ticker symbols like this:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},">>> symbols = 'AAPL,IBM,MSFT,YHOO,SCO'\n>>>\n")),Object(i.b)("h3",{id:"exercise-113-extracting-individual-characters-and-substrings"},"Exercise 1.13: Extracting individual characters and substrings"),Object(i.b)("p",null,"Strings are arrays of characters. Try extracting a few characters:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},">>> symbols[0]\n?\n>>> symbols[1]\n?\n>>> symbols[2]\n?\n>>> symbols[-1]        # Last character\n?\n>>> symbols[-2]        # Negative indices are from end of string\n?\n>>>\n")),Object(i.b)("p",null,"In Python, strings are read-only."),Object(i.b)("p",null,"Verify this by trying to change the first character of ",Object(i.b)("inlineCode",{parentName:"p"},"symbols")," to a lower-case 'a'."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},">>> symbols[0] = 'a'\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: 'str' object does not support item assignment\n>>>\n")),Object(i.b)("h3",{id:"exercise-114-string-concatenation"},"Exercise 1.14: String concatenation"),Object(i.b)("p",null,"Although string data is read-only, you can always reassign a variable\nto a newly created string."),Object(i.b)("p",null,'Try the following statement which concatenates a new symbol "GOOG" to\nthe end of ',Object(i.b)("inlineCode",{parentName:"p"},"symbols"),":"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},">>> symbols = symbols + 'GOOG'\n>>> symbols\n'AAPL,IBM,MSFT,YHOO,SCOGOOG'\n>>>\n")),Object(i.b)("p",null,"Oops!  That's not what you wanted. Fix it so that the ",Object(i.b)("inlineCode",{parentName:"p"},"symbols")," variable holds the value ",Object(i.b)("inlineCode",{parentName:"p"},"'AAPL,IBM,MSFT,YHOO,SCO,GOOG'"),"."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},">>> symbols = ?\n>>> symbols\n'AAPL,IBM,MSFT,YHOO,SCO,GOOG'\n>>>\n")),Object(i.b)("p",null,"Add ",Object(i.b)("inlineCode",{parentName:"p"},"'HPQ'")," to the front the string:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},">>> symbols = ?\n>>> symbols\n'HPQ,AAPL,IBM,MSFT,YHOO,SCO,GOOG'\n>>>\n")),Object(i.b)("p",null,"In these examples, it might look like the original string is being\nmodified, in an apparent violation of strings being read only.  Not\nso. Operations on strings create an entirely new string each\ntime. When the variable name ",Object(i.b)("inlineCode",{parentName:"p"},"symbols")," is reassigned, it points to the\nnewly created string.  Afterwards, the old string is destroyed since\nit's not being used anymore."),Object(i.b)("h3",{id:"exercise-115-membership-testing-substring-testing"},"Exercise 1.15: Membership testing (substring testing)"),Object(i.b)("p",null,"Experiment with the ",Object(i.b)("inlineCode",{parentName:"p"},"in")," operator to check for substrings.  At the\ninteractive prompt, try these operations:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},">>> 'IBM' in symbols\n?\n>>> 'AA' in symbols\nTrue\n>>> 'CAT' in symbols\n?\n>>>\n")),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"Why did the check for ",Object(i.b)("inlineCode",{parentName:"em"},"'AA'")," return ",Object(i.b)("inlineCode",{parentName:"em"},"True"),"?")),Object(i.b)("h3",{id:"exercise-116-string-methods"},"Exercise 1.16: String Methods"),Object(i.b)("p",null,"At the Python interactive prompt, try experimenting with some of the string methods."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},">>> symbols.lower()\n?\n>>> symbols\n?\n>>>\n")),Object(i.b)("p",null,"Remember, strings are always read-only.  If you want to save the result of an operation, you need to place it in a variable:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},">>> lowersyms = symbols.lower()\n>>>\n")),Object(i.b)("p",null,"Try some more operations:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},">>> symbols.find('MSFT')\n?\n>>> symbols[13:17]\n?\n>>> symbols = symbols.replace('SCO','DOA')\n>>> symbols\n?\n>>> name = '   IBM   \\n'\n>>> name = name.strip()    # Remove surrounding whitespace\n>>> name\n?\n>>>\n")),Object(i.b)("h3",{id:"exercise-117-f-strings"},"Exercise 1.17: f-strings"),Object(i.b)("p",null,"Sometimes you want to create a string and embed the values of\nvariables into it."),Object(i.b)("p",null,"To do that, use an f-string. For example:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},">>> name = 'IBM'\n>>> shares = 100\n>>> price = 91.1\n>>> f'{shares} shares of {name} at ${price:0.2f}'\n'100 shares of IBM at $91.10'\n>>>\n")),Object(i.b)("p",null,"Modify the ",Object(i.b)("inlineCode",{parentName:"p"},"mortgage.py")," program from ",Object(i.b)("a",{parentName:"p",href:"/docs/python/introduction/numbers"},"Exercise 1.10")," to create its output using f-strings.\nTry to make it so that output is nicely aligned."),Object(i.b)("h3",{id:"exercise-118-regular-expressions"},"Exercise 1.18: Regular Expressions"),Object(i.b)("p",null,"One limitation of the basic string operations is that they don't\nsupport any kind of advanced pattern matching.  For that, you\nneed to turn to Python's ",Object(i.b)("inlineCode",{parentName:"p"},"re")," module and regular expressions.\nRegular expression handling is a big topic, but here is a short\nexample:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},">>> text = 'Today is 3/27/2018. Tomorrow is 3/28/2018.'\n>>> # Find all occurrences of a date\n>>> import re\n>>> re.findall(r'\\d+/\\d+/\\d+', text)\n['3/27/2018', '3/28/2018']\n>>> # Replace all occurrences of a date with replacement text\n>>> re.sub(r'(\\d+)/(\\d+)/(\\d+)', r'\\3-\\1-\\2', text)\n'Today is 2018-3-27. Tomorrow is 2018-3-28.'\n>>>\n")),Object(i.b)("p",null,"For more information about the ",Object(i.b)("inlineCode",{parentName:"p"},"re")," module, see the official documentation at\n",Object(i.b)("a",{parentName:"p",href:"https://docs.python.org/3/library/re.html"},"https://docs.python.org/library/re.html"),"."),Object(i.b)("h3",{id:"commentary"},"Commentary"),Object(i.b)("p",null,"As you start to experiment with the interpreter, you often want to\nknow more about the operations supported by different objects.  For\nexample, how do you find out what operations are available on a\nstring?"),Object(i.b)("p",null,"Depending on your Python environment, you might be able to see a list\nof available methods via tab-completion.  For example, try typing\nthis:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},">>> s = 'hello world'\n>>> s.<tab key>\n>>>\n")),Object(i.b)("p",null,"If hitting tab doesn't do anything, you can fall back to the\nbuiltin-in ",Object(i.b)("inlineCode",{parentName:"p"},"dir()")," function.  For example:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},">>> s = 'hello'\n>>> dir(s)\n['__add__', '__class__', '__contains__', ..., 'find', 'format',\n'index', 'isalnum', 'isalpha', 'isdigit', 'islower', 'isspace',\n'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'partition',\n'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit',\n'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase',\n'title', 'translate', 'upper', 'zfill']\n>>>\n")),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"dir()")," produces a list of all operations that can appear after the ",Object(i.b)("inlineCode",{parentName:"p"},"(.)"),".\nUse the ",Object(i.b)("inlineCode",{parentName:"p"},"help()")," command to get more information about a specific operation:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},">>> help(s.upper)\nHelp on built-in function upper:\n\nupper(...)\n    S.upper() -> string\n\n    Return a copy of the string S converted to uppercase.\n>>>\n")))}p.isMDXComponent=!0}}]);