(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{82:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return r})),n.d(t,"toc",(function(){return p})),n.d(t,"default",(function(){return l}));var i=n(3),o=n(8),a=(n(0),n(92)),c={id:"netmiko3",title:"Export the Configuration Backup with Netmiko",sidebar_label:"Export Configuration Backup",slug:"/Export-the-Configuration-Backup-with-Netmiko"},r={unversionedId:"netmiko3",id:"netmiko3",isDocsHomePage:!1,title:"Export the Configuration Backup with Netmiko",description:"In the previous post, we send the configuration to devices from the list and file. In this post, we will create a configuration backup file.",source:"@site/docs/Export-the-Configuration_Backup_with_Netmiko.md",slug:"/Export-the-Configuration-Backup-with-Netmiko",permalink:"/docs/Export-the-Configuration-Backup-with-Netmiko",editUrl:"https://github.com/keremcanonemli/onemli/docs/Export-the-Configuration_Backup_with_Netmiko.md",version:"current",sidebar_label:"Export Configuration Backup",sidebar:"someSidebar",previous:{title:"Configure the Devices with Netmiko",permalink:"/docs/configure-the-devices-with-netmiko"},next:{title:"Powered by MDX",permalink:"/docs/mdx"}},p=[{value:"Device Definitions",id:"device-definitions",children:[]},{value:"Get Configurations",id:"get-configurations",children:[]},{value:"File Operations",id:"file-operations",children:[{value:"Writing",id:"writing",children:[]}]},{value:"Date Stamp",id:"date-stamp",children:[{value:"Stamp Format",id:"stamp-format",children:[]},{value:"Edit The Backup Files Names",id:"edit-the-backup-files-names",children:[]}]},{value:"Hostname In Stamp",id:"hostname-in-stamp",children:[]}],s={toc:p};function l(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(i.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"In the ",Object(a.b)("a",{parentName:"p",href:"https://onem.li/docs/configure-the-devices-with-netmiko/"},"previous post"),", we send the configuration to devices from the list and file. In this post, we will create a configuration backup file."),Object(a.b)("h3",{id:"device-definitions"},"Device Definitions"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},'from netmiko import ConnectHandler\n\ndevice1 = {\n    "device_type":"cisco_ios",\n    "host":"10.0.191.10",\n    "username":"admin",\n    "password":"C1SC0.."\n}\n\ndevice2 = {\n    "device_type":"cisco_ios",\n    "host":"10.0.192.20",\n    "username":"admin",\n    "password":"C1SC0.."\n}\n')),Object(a.b)("h2",{id:"get-configurations"},"Get Configurations"),Object(a.b)("p",null,"If we want to send the command to a device, the method we will use : ",Object(a.b)("inlineCode",{parentName:"p"},"send_command().")," In cisco ios devices has two configuration files. The first one ",Object(a.b)("inlineCode",{parentName:"p"},"startup-config")," and the second one ",Object(a.b)("inlineCode",{parentName:"p"},"running-config"),". Let\u2019s get them."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},'for device in (device1,device2):\n    with ConnectHandler(**device) as connection:\n        try:\n            running_config = connection.send_command("show running-config")\n            startup_config = connection.send_command("show startup-config")\n')),Object(a.b)("h2",{id:"file-operations"},"File Operations"),Object(a.b)("h3",{id:"writing"},"Writing"),Object(a.b)("p",null,"To create a new file in Python, we use the ",Object(a.b)("inlineCode",{parentName:"p"},"open()")," method. It takes two parameters. The first one is a file name and the second one is \u201c",Object(a.b)("inlineCode",{parentName:"p"},"w"),"\u201d parameter. \u201c",Object(a.b)("inlineCode",{parentName:"p"},"w"),"\u201d parameter will create a file if the specified file doesn\u2019t exist. If it exists, python will overwrite the file with the \u201c",Object(a.b)("inlineCode",{parentName:"p"},"w"),"\u201d parameter. If you want to append the existing file use \u201c",Object(a.b)("inlineCode",{parentName:"p"},"a"),"\u201d parameter."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},'            try:\n                with open("running_config.txt", "w") as file:\n                    file.write(running_config)\n')),Object(a.b)("p",null,"Same operation for ",Object(a.b)("inlineCode",{parentName:"p"},"startup_config.txt")," file"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},'                with open("startup_config.txt", "w") as file:\n                    file.write(startup_config)\n')),Object(a.b)("p",null,"Before the end we need to close except blocks"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},'            except Exception as e:\n                print("Houston We Have File Operation Problem")\n        except Exception as e:\n            print("Houston We Have A Connection Problem")\n')),Object(a.b)("h2",{id:"date-stamp"},"Date Stamp"),Object(a.b)("p",null,"When we need to store configuration backup files with timestamp we need to import a new library:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"from datetime import datetime \n")),Object(a.b)("h3",{id:"stamp-format"},"Stamp Format"),Object(a.b)("p",null,"Get the current date and time information"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"NOW = datetime.now()\n")),Object(a.b)("p",null,"Format the date time information(",Object(a.b)("a",{parentName:"p",href:"https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior"},"More format codes"),")"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},'STAMP=NOW.strftime("%Y_%m_%d")\n')),Object(a.b)("h3",{id:"edit-the-backup-files-names"},"Edit The Backup Files Names"),Object(a.b)("p",null,"Edit ",Object(a.b)("inlineCode",{parentName:"p"},"startup_config.txt")," file name"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},'                with open(f"{STAMP}_running.txt", "w") as file:\n                    file.write(startup_config)\n')),Object(a.b)("p",null,"Edit ",Object(a.b)("inlineCode",{parentName:"p"},"running_config.txt")," file name"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},'                with open(f"{STAMP}_startup.txt", "w") as file:\n                    file.write(startup_config)\n')),Object(a.b)("h2",{id:"hostname-in-stamp"},"Hostname In Stamp"),Object(a.b)("p",null,"If we want to add hostname information to our ",Object(a.b)("inlineCode",{parentName:"p"},"STAMP")," we need to access each device\u2019s ",Object(a.b)("inlineCode",{parentName:"p"},'"host"')," key\u2019s value. Actually, for-loop iterating all devices for us."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},'NOW = datetime.now()\nSTAMP = NOW.strftime("%Y_%m_%d")\n\nfor device in (device1,device2):\n    with ConnectHandler(**device) as connection:\n        try:\n            running_config = connection.send_command("show running-config")\n            startup_config = connection.send_command("show startup-config")\n            try:\n                with open(f"{STAMP}_running.txt", "w") as file:\n                    file.write(startup_config)\n\n                with open(f"{STAMP}_startup.txt", "w") as file:\n                    file.write(startup_config)\n\n            except Exception as e:\n                print("Houston We Have File Operation Problem")\n        except Exception as e:\n            print("Houston We Have A Connection Problem")\n')),Object(a.b)("p",null,"Change the 11th line with the following command:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},'                with open(f"{device["host"]}_{STAMP}_running.txt", "w") as file:\n')),Object(a.b)("p",null,"And change the 13th line with the following command:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},'                with open(f"{device["host"]}_{STAMP}_startup.txt", "w") as file:\n')))}l.isMDXComponent=!0}}]);