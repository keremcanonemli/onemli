(window.webpackJsonp=window.webpackJsonp||[]).push([[67],{139:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return l})),t.d(n,"toc",(function(){return s})),t.d(n,"default",(function(){return p}));var r=t(3),a=t(8),o=(t(0),t(281)),i={id:"if_elif_else",title:"If/Elif/Else",sidebar_label:"If/Elif/Else",slug:"if_elif_else",custom_edit_url:null},l={unversionedId:"python/control_structures/if_elif_else",id:"python/control_structures/if_elif_else",isDocsHomePage:!1,title:"If/Elif/Else",description:"The if/elif/else statement allows make branches during program execution. The program goes into branch when a certain condition is met.",source:"@site/docs/python/control_structures/1_if_elif_else.md",slug:"/python/control_structures/if_elif_else",permalink:"/docs/python/control_structures/if_elif_else",editUrl:null,version:"current",sidebar_label:"If/Elif/Else",sidebar:"someSidebar",previous:{title:"Control Structures",permalink:"/docs/python/control_structures/control_structures"},next:{title:"For",permalink:"/docs/python/control_structures/for"}},s=[{value:"Condition",id:"condition",children:[{value:"True and False",id:"true-and-false",children:[]},{value:"Comparison operators",id:"comparison-operators",children:[]},{value:"Operator in",id:"operator-in",children:[]},{value:"Operators and, or, not",id:"operators-and-or-not",children:[]}]},{value:"Example of if/elif/else statement",id:"example-of-ifelifelse-statement",children:[]},{value:"Ternary expression",id:"ternary-expression",children:[]}],c={toc:s};function p(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"if/elif/else")," statement allows make branches during program execution. The program goes into branch when a certain condition is met."),Object(o.b)("p",null,"In this statement only ",Object(o.b)("inlineCode",{parentName:"p"},"if")," is mandatory, ",Object(o.b)("inlineCode",{parentName:"p"},"elif")," and ",Object(o.b)("inlineCode",{parentName:"p"},"else")," are optional:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"if")," condition is always checked first."),Object(o.b)("li",{parentName:"ul"},"After ",Object(o.b)("inlineCode",{parentName:"li"},"if")," statement there must be some condition: if this condition is met (returns True), then actions in block ",Object(o.b)("inlineCode",{parentName:"li"},"if")," are executed."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"elif")," can be used to make multiple branches, that is, to check incoming data for different conditions."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"elif")," block is the same as ",Object(o.b)("inlineCode",{parentName:"li"},"if")," but it checked next. Roughly speaking, it is \u201cotherwise if \u2026\u201d"),Object(o.b)("li",{parentName:"ul"},"There can be many ",Object(o.b)("inlineCode",{parentName:"li"},"elif")," blocks."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"else")," block is executed if none of conditions ",Object(o.b)("inlineCode",{parentName:"li"},"if")," or ",Object(o.b)("inlineCode",{parentName:"li"},"elif")," were true.")),Object(o.b)("p",null,"Example of if statement:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"In [1]: a = 9\n\nIn [2]: if a == 10:\n   ...:     print('a equal to 10')\n   ...: elif a < 10:\n   ...:     print('a less than 10')\n   ...: else:\n   ...:     print('a less than 10')\n   ...:\na less than 10\n")),Object(o.b)("h2",{id:"condition"},"Condition"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"If")," expression is based on conditions: conditions are always written after ",Object(o.b)("inlineCode",{parentName:"p"},"if")," and ",Object(o.b)("inlineCode",{parentName:"p"},"elif"),". Blocks if/elif are executed only when condition returns True, so the first thing to deal with is what is true and what is false in Python."),Object(o.b)("h3",{id:"true-and-false"},"True and False"),Object(o.b)("p",null,"In Python, apart from obvious True and False values, all other objects also have false or true value:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"True value:",Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},"any non-zero number"),Object(o.b)("li",{parentName:"ul"},"any non-empty string"),Object(o.b)("li",{parentName:"ul"},"any non-empty object"))),Object(o.b)("li",{parentName:"ul"},"False value:",Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},"0"),Object(o.b)("li",{parentName:"ul"},"None"),Object(o.b)("li",{parentName:"ul"},"empty string"),Object(o.b)("li",{parentName:"ul"},"empty object")))),Object(o.b)("p",null,"For example, since an empty list is a false value, it is possible to check whether list is empty:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},'In [12]: list_to_test = [1, 2, 3]\n\nIn [13]: if list_to_test:\n   ....:     print("The list has objects")\n   ....:\nList has objects\n')),Object(o.b)("p",null,"The same result could have been achieved somewhat differently:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},'In [14]: if len(list_to_test) != 0:\n   ....:     print("The list has objects")\n   ....:\nList has objects\n')),Object(o.b)("h3",{id:"comparison-operators"},"Comparison operators"),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"Comparison operators")," can be used in conditions like:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"In [3]: 5 > 6\nOut[3]: False\n\nIn [4]: 5 > 2\nOut[4]: True\n\nIn [5]: 5 < 2\nOut[5]: False\n\nIn [6]: 5 == 2\nOut[6]: False\n\nIn [7]: 5 == 5\nOut[7]: True\n\nIn [8]: 5 >= 5\nOut[8]: True\n\nIn [9]: 5 <= 10\nOut[9]: True\n\nIn [10]: 8 != 10\nOut[10]: True\n")),Object(o.b)("p",null,"Note"),Object(o.b)("p",null,"Note that equality is checked by double ",Object(o.b)("inlineCode",{parentName:"p"},"=="),"."),Object(o.b)("p",null,"Example of use of comparison operators:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"In [1]: a = 9\n\nIn [2]: if a == 10:\n   ...:     print('a equal to 10')\n   ...: elif a < 10:\n   ...:     print('a less than 10')\n   ...: else:\n   ...:     print('a greater than 10')\n   ...:\na less than 10\n")),Object(o.b)("h3",{id:"operator-in"},"Operator in"),Object(o.b)("p",null,"Operator ",Object(o.b)("inlineCode",{parentName:"p"},"in")," allows checking for the presence of element in a sequence (for example, element in a list or substrings in a string):"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"In [8]: 'Fast' in 'FastEthernet'\nOut[8]: True\n\nIn [9]: 'Gigabit' in 'FastEthernet'\nOut[9]: False\n\nIn [10]: vlan = [10, 20, 30, 40]\n\nIn [11]: 10 in vlan\nOut[11]: True\n\nIn [12]: 50 in vlan\nOut[12]: False\n")),Object(o.b)("p",null,"When used with dictionaries, ",Object(o.b)("inlineCode",{parentName:"p"},"in")," condition performs check by dictionary keys:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"In [15]: r1 = {\n   ....:  'IOS': '15.4',\n   ....:  'IP': '10.255.0.1',\n   ....:  'hostname': 'london_r1',\n   ....:  'location': '21 New Globe Walk',\n   ....:  'model': '4451',\n   ....:  'vendor': 'Cisco'}\n\nIn [16]: 'IOS' in r1\nOut[16]: True\n\nIn [17]: '4451' in r1\nOut[17]: False\n")),Object(o.b)("h3",{id:"operators-and-or-not"},"Operators and, or, not"),Object(o.b)("p",null,"Conditions can also use ",Object(o.b)("em",{parentName:"p"},"logical operators")," ",Object(o.b)("inlineCode",{parentName:"p"},"and"),", ",Object(o.b)("inlineCode",{parentName:"p"},"or"),", ",Object(o.b)("inlineCode",{parentName:"p"},"not"),":"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"In [15]: r1 = {\n   ....:  'IOS': '15.4',\n   ....:  'IP': '10.255.0.1',\n   ....:  'hostname': 'london_r1',\n   ....:  'location': '21 New Globe Walk',\n   ....:  'model': '4451',\n   ....:  'vendor': 'Cisco'}\n\nIn [18]: vlan = [10, 20, 30, 40]\n\nIn [19]: 'IOS' in r1 and 10 in vlan\nOut[19]: True\n\nIn [20]: '4451' in r1 and 10 in vlan\nOut[20]: False\n\nIn [21]: '4451' in r1 or 10 in vlan\nOut[21]: True\n\nIn [22]: not '4451' in r1\nOut[22]: True\n\nIn [23]: '4451' not in r1\nOut[23]: True\n")),Object(o.b)("h4",{id:"operator-and"},"Operator and"),Object(o.b)("p",null,"In Python ",Object(o.b)("inlineCode",{parentName:"p"},"and")," operator returns not a boolean value but a value of one of operands."),Object(o.b)("p",null,"If both operands are true, result is the last value:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"In [24]: 'string1' and 'string2'\nOut[24]: 'string2'\n\nIn [25]: 'string1' and 'string2' and 'string3'\nOut[25]: 'string3'\n")),Object(o.b)("p",null,"If one of operators is a false, result of expression will be the first false value:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"In [26]: '' and 'string1'\nOut[26]: ''\n\nIn [27]: '' and [] and 'string1'\nOut[27]: ''\n")),Object(o.b)("h4",{id:"operator-or"},"Operator or"),Object(o.b)("p",null,"Operator ",Object(o.b)("inlineCode",{parentName:"p"},"or"),", like operator ",Object(o.b)("inlineCode",{parentName:"p"},"and"),", returns one of operands value."),Object(o.b)("p",null,"When checking operands, the first true operand is returned:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"In [28]: '' or 'string1'\nOut[28]: 'string1'\n\nIn [29]: '' or [] or 'string1'\nOut[29]: 'string1'\n\nIn [30]: 'string1' or 'string2'\nOut[30]: 'string1'\n")),Object(o.b)("p",null,"If all values are false, the last value is returned:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"In [31]: '' or [] or {}\nOut[31]: {}\n")),Object(o.b)("p",null,"An important feature of ",Object(o.b)("inlineCode",{parentName:"p"},"or")," operator - operands, which are after the true operand, are not calculated:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"In [33]: '' or sorted([44, 1, 67])\nOut[33]: [1, 44, 67]\n\nIn [34]: '' or 'string1' or sorted([44, 1, 67])\nOut[34]: 'string1'\n")),Object(o.b)("h2",{id:"example-of-ifelifelse-statement"},"Example of if/elif/else statement"),Object(o.b)("p",null,"An example of a check_password.py script that checks length of password and whether password contains username:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"# -*- coding: utf-8 -*-\n\nusername = input('Enter username: ')\npassword = input('Enter password: ')\n\nif len(password) < 8:\n    print('Password is too short')\nelif username in password:\n    print('Password contains username')\nelse:\n    print('Password for user {} is set'.format(username))\n")),Object(o.b)("p",null,"Script check:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"$ python check_password.py\nEnter username: nata\nEnter password: nata1234\nPassword contains username\n\n$ python check_password.py\nEnter username: nata\nEnter password: 123nata123\nPassword contains username\n\n$ python check_password.py\nEnter username: nata\nEnter password: 1234\nPassword is too short\n\n$ python check_password.py\nEnter username: nata\nEnter password: 123456789\nPassword for user nata is set\n")),Object(o.b)("h2",{id:"ternary-expression"},"Ternary expression"),Object(o.b)("p",null,"It is sometimes more convenient to use a ternary operator than an extended form:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"s = [1, 2, 3, 4]\nresult = True if len(s) > 5 else False\n")),Object(o.b)("p",null,"It is best not to abuse it but in simple terms such a record can be useful."))}p.isMDXComponent=!0},281:function(e,n,t){"use strict";t.d(n,"a",(function(){return b})),t.d(n,"b",(function(){return m}));var r=t(0),a=t.n(r);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=a.a.createContext({}),p=function(e){var n=a.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},b=function(e){var n=p(e.components);return a.a.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},d=a.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),b=p(t),d=r,m=b["".concat(i,".").concat(d)]||b[d]||u[d]||o;return t?a.a.createElement(m,l(l({ref:n},c),{},{components:t})):a.a.createElement(m,l({ref:n},c))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=t[c];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"}}]);