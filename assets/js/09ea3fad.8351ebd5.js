(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{280:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return d}));var a=t(0),r=t.n(a);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=r.a.createContext({}),b=function(e){var n=r.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=b(e.components);return r.a.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},m=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),p=b(t),m=a,d=p["".concat(l,".").concat(m)]||p[m]||u[m]||i;return t?r.a.createElement(d,o(o({ref:n},s),{},{components:t})):r.a.createElement(d,o({ref:n},s))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,l=new Array(i);l[0]=m;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var s=2;s<i;s++)l[s]=t[s];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},76:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return l})),t.d(n,"metadata",(function(){return o})),t.d(n,"toc",(function(){return c})),t.d(n,"default",(function(){return b}));var a=t(3),r=t(8),i=(t(0),t(280)),l={id:"variables",title:"Variables",sidebar_label:"3.4 Variables",slug:"variables",custom_edit_url:null},o={unversionedId:"python/start/variables",id:"python/start/variables",isDocsHomePage:!1,title:"Variables",description:"Variables in Python do not require variable type declaration (since Python is a language with dynamic typing) and they are references to a memory area. Variable naming rules:",source:"@site/docs/python/start/4_variables.md",slug:"/python/start/variables",permalink:"/docs/python/start/variables",editUrl:null,version:"current",sidebar_label:"3.4 Variables",sidebar:"someSidebar",previous:{title:"Ipython Special Commands",permalink:"/docs/python/start/ipython_special_commands"},next:{title:"Tasks",permalink:"/docs/python/start/tasks"}},c=[{value:"Variable names",id:"variable-names",children:[]}],s={toc:c};function b(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Variables in Python do not require variable type declaration (since Python is a language with dynamic typing) and they are references to a memory area. Variable naming rules:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Name of variable can consist only of letters, digits and an underscore"),Object(i.b)("li",{parentName:"ul"},"Name cannot start with a digit"),Object(i.b)("li",{parentName:"ul"},"Name cannot contain special characters @, $, %")),Object(i.b)("p",null,"An example of creating variables in Python:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},'x = 5\nmessage = "Hello"\nname, lastname, date = "Kerem Can", "ONEMLI", 2021\n\nprint(x, message, name, lastname, date)\n\n\n\n')),Object(i.b)("p",null,"Output"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"5 Hello Kerem Can ONEMLI 2021\n\n")),Object(i.b)("p",null,"Note that Python does not need to specify that \u201cx\u201d is a number, and \u201cmessage\u201d is a string."),Object(i.b)("p",null,"Variables are references to memory area. This can be demonstrated by using ",Object(i.b)("inlineCode",{parentName:"p"},"id()")," which shows object ID:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"a = b = c = 32\n\nprint(id(a))\n\nprint(id(b))\n\nprint(id(c))\n\n")),Object(i.b)("p",null,"Output"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"140703441160848\n\n140703441160848\n\n140703441160848\n")),Object(i.b)("p",null,"In this example you can see that all three names refer to the same identifier, so it is the same object to which three references \u201ca\u201d, \u201cb\u201d and \u201cc\u201d point. Python numbers has one feature that can be slightly misleading: numbers from -5 to 256 are pre-created and stored in an array (list). Therefore, when you create a number from this range you actually create a reference to number in generated array."),Object(i.b)("div",{className:"admonition admonition-info alert alert--info"},Object(i.b)("div",{parentName:"div",className:"admonition-heading"},Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",{parentName:"h5",className:"admonition-icon"},Object(i.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(i.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Note")),Object(i.b)("div",{parentName:"div",className:"admonition-content"},Object(i.b)("p",{parentName:"div"},"This feature is specific to implementation of CPython which is discussed in documentation"))),Object(i.b)("p",null,"This can be verified as follows:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"a = 10\n\nb = 10\n\nprint(id(a))\n\n\nprint(id(b))\n\n\nprint(id(10))\n\n\n")),Object(i.b)("p",null,"Output"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"140703371036624\n\n140703371036624\n\n140703371036624\n")),Object(i.b)("p",null,"Note that ",Object(i.b)("inlineCode",{parentName:"p"},"a"),", ",Object(i.b)("inlineCode",{parentName:"p"},"b")," and number ",Object(i.b)("inlineCode",{parentName:"p"},"10")," have identical identifiers. They are all references to an existing number in the list."),Object(i.b)("p",null,"If you do the same with number more than 256, all identifiers will be different:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"a = 500\n\nb = 500\n\nprint(id(a))\n\nprint(id(b))\n\nprint(id(500))\n\n")),Object(i.b)("p",null,"Output"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"140239990503056\n\n140239990503032\n\n140239990502960\n")),Object(i.b)("p",null,"However, if you assign variables to each other, identifiers are all the same (in this version ",Object(i.b)("inlineCode",{parentName:"p"},"a"),", ",Object(i.b)("inlineCode",{parentName:"p"},"b")," and ",Object(i.b)("inlineCode",{parentName:"p"},"c")," are referring to the same object):"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"a = b = c = 500\n\nprint(id(a))\n\nprint(id(b))\n\nprint(id(c))\n\n")),Object(i.b)("p",null,"Output"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"140239990503080\n\n140239990503080\n\n140239990503080\n")),Object(i.b)("h2",{id:"variable-names"},"Variable names"),Object(i.b)("p",null,"Variable names should not overlap with names of operators and modules or other reserved words. Python has recommendations for naming functions, classes and variables:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"variable names are usually written in lowercase or in uppercase (e.g., DB_NAME, db_name)"),Object(i.b)("li",{parentName:"ul"},"function names are written in lowercase, with underline between words (for example get_names)"),Object(i.b)("li",{parentName:"ul"},"class names are given with capital letters without spaces, it is called CamelCase (for example, CiscoSwitch)")))}b.isMDXComponent=!0}}]);