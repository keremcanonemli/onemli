(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{112:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return c})),t.d(n,"toc",(function(){return l})),t.d(n,"default",(function(){return b}));var a=t(3),s=t(8),i=(t(0),t(122)),o={id:"dictionaries_revisited",title:"Dicts Revisited",sidebar_label:"5.1 Dicts Revisited",slug:"dictionaries_revisited",custom_edit_url:null},c={unversionedId:"python/objects_model/dictionaries_revisited",id:"python/objects_model/dictionaries_revisited",isDocsHomePage:!1,title:"Dicts Revisited",description:"Overview",source:"@site/docs/python/objects_model/01_Dicts_revisited.md",slug:"/python/objects_model/dictionaries_revisited",permalink:"/docs/python/objects_model/dictionaries_revisited",editUrl:null,version:"current",sidebar_label:"5.1 Dicts Revisited",sidebar:"someSidebar",previous:{title:"Defining Exceptions",permalink:"/docs/python/classes_objects/defining_exceptions"},next:{title:"Classes and Encapsulation",permalink:"/docs/python/objects_model/classes_and_encapsulation"}},l=[{value:"Overview",id:"overview",children:[]},{value:"Dictionaries, Revisited",id:"dictionaries-revisited",children:[]},{value:"Dicts and Modules",id:"dicts-and-modules",children:[]},{value:"Dicts and Objects",id:"dicts-and-objects",children:[]},{value:"Class Members",id:"class-members",children:[]},{value:"Instances and Classes",id:"instances-and-classes",children:[]},{value:"Attribute Access",id:"attribute-access",children:[]},{value:"Modifying Instances",id:"modifying-instances",children:[]},{value:"Reading Attributes",id:"reading-attributes",children:[]},{value:"How inheritance works",id:"how-inheritance-works",children:[]},{value:"Reading Attributes with Inheritance",id:"reading-attributes-with-inheritance",children:[]},{value:"Reading Attributes with Single Inheritance",id:"reading-attributes-with-single-inheritance",children:[]},{value:"Method Resolution Order or MRO",id:"method-resolution-order-or-mro",children:[]},{value:"MRO in Multiple Inheritance",id:"mro-in-multiple-inheritance",children:[]},{value:"An Odd Code Reuse (Involving Multiple Inheritance)",id:"an-odd-code-reuse-involving-multiple-inheritance",children:[]},{value:"The &quot;Mixin&quot; Pattern",id:"the-mixin-pattern",children:[]},{value:"Why <code>super()</code>",id:"why-super",children:[]},{value:"Some Cautions",id:"some-cautions",children:[]},{value:"Exercises",id:"exercises",children:[{value:"Exercise 5.1: Representation of Instances",id:"exercise-51-representation-of-instances",children:[]},{value:"Exercise 5.2: Modification of Instance Data",id:"exercise-52-modification-of-instance-data",children:[]},{value:"Exercise 5.3: The role of classes",id:"exercise-53-the-role-of-classes",children:[]},{value:"Exercise 5.4: Bound methods",id:"exercise-54-bound-methods",children:[]},{value:"Exercise 5.5: Inheritance",id:"exercise-55-inheritance",children:[]}]}],r={toc:l};function b(e){var n=e.components,t=Object(s.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},r,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("h3",{id:"overview"},"Overview"),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"This section covers some of the inner workings of Python objects.\nProgrammers coming from other programming languages often find\nPython's notion of classes lacking in features.  For example, there is\nno notion of access-control (e.g., private, protected), the whole\n",Object(i.b)("inlineCode",{parentName:"p"},"self")," argument feels weird, and frankly, working with objects\nsometimes feel like a \"free for all.\"  Maybe that's true, but we'll\nfind out how it all works as well as some common programming idioms to\nbetter encapsulate the internals of objects.")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"It's not necessary to worry about the inner details to be productive.\nHowever, most Python coders have a basic awareness of how classes\nwork.  So, that's why we're covering it.")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"The Python object system is largely based on an implementation\ninvolving dictionaries.  This section discusses that.")),Object(i.b)("h3",{id:"dictionaries-revisited"},"Dictionaries, Revisited"),Object(i.b)("p",null,"Remember that a dictionary is a collection of named values."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"stock = {\n    'name' : 'GOOG',\n    'shares' : 100,\n    'price' : 490.1\n}\n")),Object(i.b)("p",null,"Dictionaries are commonly used for simple data structures.  However,\nthey are used for critical parts of the interpreter and may be the\n",Object(i.b)("em",{parentName:"p"},"most important type of data in Python"),"."),Object(i.b)("h3",{id:"dicts-and-modules"},"Dicts and Modules"),Object(i.b)("p",null,"Within a module, a dictionary holds all of the global variables and\nfunctions."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"# foo.py\n\nx = 42\ndef bar():\n    ...\n\ndef spam():\n    ...\n")),Object(i.b)("p",null,"If you inspect ",Object(i.b)("inlineCode",{parentName:"p"},"foo.__dict__")," or ",Object(i.b)("inlineCode",{parentName:"p"},"globals()"),", you'll see the dictionary."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"{\n    'x' : 42,\n    'bar' : <function bar>,\n    'spam' : <function spam>\n}\n")),Object(i.b)("h3",{id:"dicts-and-objects"},"Dicts and Objects"),Object(i.b)("p",null,"User defined objects also use dictionaries for both instance data and\nclasses.  In fact, the entire object system is mostly an extra layer\nthat's put on top of dictionaries."),Object(i.b)("p",null,"A dictionary holds the instance data, ",Object(i.b)("inlineCode",{parentName:"p"},"__dict__"),"."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},">>> s = Stock('GOOG', 100, 490.1)\n>>> s.__dict__\n{'name' : 'GOOG', 'shares' : 100, 'price': 490.1 }\n")),Object(i.b)("p",null,"You populate this dict (and instance) when assigning to ",Object(i.b)("inlineCode",{parentName:"p"},"self"),"."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"class Stock:\n    def __init__(self, name, shares, price):\n        self.name = name\n        self.shares = shares\n        self.price = price\n")),Object(i.b)("p",null,"The instance data, ",Object(i.b)("inlineCode",{parentName:"p"},"self.__dict__"),", looks like this:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"{\n    'name': 'GOOG',\n    'shares': 100,\n    'price': 490.1\n}\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Each instance gets its own private dictionary.")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"s = Stock('GOOG', 100, 490.1)     # {'name' : 'GOOG','shares' : 100, 'price': 490.1 }\nt = Stock('AAPL', 50, 123.45)     # {'name' : 'AAPL','shares' : 50, 'price': 123.45 }\n")),Object(i.b)("p",null,"If you created 100 instances of some class, there are 100 dictionaries\nsitting around holding data."),Object(i.b)("h3",{id:"class-members"},"Class Members"),Object(i.b)("p",null,"A separate dictionary also holds the methods."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"class Stock:\n    def __init__(self, name, shares, price):\n        self.name = name\n        self.shares = shares\n        self.price = price\n\n    def cost(self):\n        return self.shares * self.price\n\n    def sell(self, nshares):\n        self.shares -= nshares\n")),Object(i.b)("p",null,"The dictionary is in ",Object(i.b)("inlineCode",{parentName:"p"},"Stock.__dict__"),"."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"{\n    'cost': <function>,\n    'sell': <function>,\n    '__init__': <function>\n}\n")),Object(i.b)("h3",{id:"instances-and-classes"},"Instances and Classes"),Object(i.b)("p",null,"Instances and classes are linked together.  The ",Object(i.b)("inlineCode",{parentName:"p"},"__class__")," attribute\nrefers back to the class."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},">>> s = Stock('GOOG', 100, 490.1)\n>>> s.__dict__\n{ 'name': 'GOOG', 'shares': 100, 'price': 490.1 }\n>>> s.__class__\n<class '__main__.Stock'>\n>>>\n")),Object(i.b)("p",null,"The instance dictionary holds data unique to each instance, whereas\nthe class dictionary holds data collectively shared by ",Object(i.b)("em",{parentName:"p"},"all"),"\ninstances."),Object(i.b)("h3",{id:"attribute-access"},"Attribute Access"),Object(i.b)("p",null,"When you work with objects, you access data and methods using the ",Object(i.b)("inlineCode",{parentName:"p"},".")," operator."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"x = obj.name          # Getting\nobj.name = value      # Setting\ndel obj.name          # Deleting\n")),Object(i.b)("p",null,"These operations are directly tied to the dictionaries sitting underneath the covers."),Object(i.b)("h3",{id:"modifying-instances"},"Modifying Instances"),Object(i.b)("p",null,"Operations that modify an object update the underlying dictionary."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},">>> s = Stock('GOOG', 100, 490.1)\n>>> s.__dict__\n{ 'name':'GOOG', 'shares': 100, 'price': 490.1 }\n>>> s.shares = 50       # Setting\n>>> s.date = '6/7/2007' # Setting\n>>> s.__dict__\n{ 'name': 'GOOG', 'shares': 50, 'price': 490.1, 'date': '6/7/2007' }\n>>> del s.shares        # Deleting\n>>> s.__dict__\n{ 'name': 'GOOG', 'price': 490.1, 'date': '6/7/2007' }\n>>>\n")),Object(i.b)("h3",{id:"reading-attributes"},"Reading Attributes"),Object(i.b)("p",null,"Suppose you read an attribute on an instance."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"x = obj.name\n")),Object(i.b)("p",null,"The attribute may exist in two places:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Local instance dictionary."),Object(i.b)("li",{parentName:"ul"},"Class dictionary.")),Object(i.b)("p",null,"Both dictionaries must be checked.  First, check in local ",Object(i.b)("inlineCode",{parentName:"p"},"__dict__"),".\nIf not found, look in ",Object(i.b)("inlineCode",{parentName:"p"},"__dict__")," of class through ",Object(i.b)("inlineCode",{parentName:"p"},"__class__"),"."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},">>> s = Stock(...)\n>>> s.name\n'GOOG'\n>>> s.cost()\n49010.0\n>>>\n")),Object(i.b)("p",null,"This lookup scheme is how the members of a ",Object(i.b)("em",{parentName:"p"},"class")," get shared by all instances."),Object(i.b)("h3",{id:"how-inheritance-works"},"How inheritance works"),Object(i.b)("p",null,"Classes may inherit from other classes."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"class A(B, C):\n    ...\n")),Object(i.b)("p",null,"The base classes are stored in a tuple in each class."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},">>> A.__bases__\n(<class '__main__.B'>, <class '__main__.C'>)\n>>>\n")),Object(i.b)("p",null,"This provides a link to parent classes."),Object(i.b)("h3",{id:"reading-attributes-with-inheritance"},"Reading Attributes with Inheritance"),Object(i.b)("p",null,"Logically, the process of finding an attribute is as follows. First,\ncheck in local ",Object(i.b)("inlineCode",{parentName:"p"},"__dict__"),".  If not found, look in ",Object(i.b)("inlineCode",{parentName:"p"},"__dict__")," of the\nclass.  If not found in class, look in the base classes through\n",Object(i.b)("inlineCode",{parentName:"p"},"__bases__"),".   However, there are some subtle aspects of this discussed next."),Object(i.b)("h3",{id:"reading-attributes-with-single-inheritance"},"Reading Attributes with Single Inheritance"),Object(i.b)("p",null,"In inheritance hierarchies, attributes are found by walking up the\ninheritance tree in order."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"class A: pass\nclass B(A): pass\nclass C(A): pass\nclass D(B): pass\nclass E(D): pass\n")),Object(i.b)("p",null,"With single inheritance, there is single path to the top.\nYou stop with the first match."),Object(i.b)("h3",{id:"method-resolution-order-or-mro"},"Method Resolution Order or MRO"),Object(i.b)("p",null,"Python precomputes an inheritance chain and stores it in the ",Object(i.b)("em",{parentName:"p"},"MRO")," attribute on the class.\nYou can view it."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},">>> E.__mro__\n(<class '__main__.E'>, <class '__main__.D'>,\n <class '__main__.B'>, <class '__main__.A'>,\n <type 'object'>)\n>>>\n")),Object(i.b)("p",null,"This chain is called the ",Object(i.b)("strong",{parentName:"p"},"Method Resolution Order"),".  To find an\nattribute, Python walks the MRO in order. The first match wins."),Object(i.b)("h3",{id:"mro-in-multiple-inheritance"},"MRO in Multiple Inheritance"),Object(i.b)("p",null,"With multiple inheritance, there is no single path to the top.\nLet's take a look at an example."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"class A: pass\nclass B: pass\nclass C(A, B): pass\nclass D(B): pass\nclass E(C, D): pass\n")),Object(i.b)("p",null,"What happens when you access an attribute?"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"e = E()\ne.attr\n")),Object(i.b)("p",null,"An attribute search process is carried out, but what is the order? That's a problem."),Object(i.b)("p",null,"Python uses ",Object(i.b)("em",{parentName:"p"},"cooperative multiple inheritance")," which obeys some rules\nabout class ordering."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Children are always checked before parents"),Object(i.b)("li",{parentName:"ul"},"Parents (if multiple) are always checked in the order listed.")),Object(i.b)("p",null,"The MRO is computed by sorting all of the classes in a hierarchy\naccording to those rules."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},">>> E.__mro__\n(\n  <class 'E'>,\n  <class 'C'>,\n  <class 'A'>,\n  <class 'D'>,\n  <class 'B'>,\n  <class 'object'>)\n>>>\n")),Object(i.b)("p",null,'The underlying algorithm is called the "C3 Linearization Algorithm."\nThe precise details aren\'t important as long as you remember that a\nclass hierarchy obeys the same ordering rules you might follow if your\nhouse was on fire and you had to evacuate--children first, followed by\nparents.'),Object(i.b)("h3",{id:"an-odd-code-reuse-involving-multiple-inheritance"},"An Odd Code Reuse (Involving Multiple Inheritance)"),Object(i.b)("p",null,"Consider two completely unrelated objects:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"class Dog:\n    def noise(self):\n        return 'Bark'\n\n    def chase(self):\n        return 'Chasing!'\n\nclass LoudDog(Dog):\n    def noise(self):\n        # Code commonality with LoudBike (below)\n        return super().noise().upper()\n")),Object(i.b)("p",null,"And"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"class Bike:\n    def noise(self):\n        return 'On Your Left'\n\n    def pedal(self):\n        return 'Pedaling!'\n\nclass LoudBike(Bike):\n    def noise(self):\n        # Code commonality with LoudDog (above)\n        return super().noise().upper()\n")),Object(i.b)("p",null,"There is a code commonality in the implementation of ",Object(i.b)("inlineCode",{parentName:"p"},"LoudDog.noise()")," and\n",Object(i.b)("inlineCode",{parentName:"p"},"LoudBike.noise()"),".  In fact, the code is exactly the same.  Naturally,\ncode like that is bound to attract software engineers."),Object(i.b)("h3",{id:"the-mixin-pattern"},'The "Mixin" Pattern'),Object(i.b)("p",null,"The ",Object(i.b)("em",{parentName:"p"},"Mixin")," pattern is a class with a fragment of code."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"class Loud:\n    def noise(self):\n        return super().noise().upper()\n")),Object(i.b)("p",null,"This class is not usable in isolation.\nIt mixes with other classes via inheritance."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"class LoudDog(Loud, Dog):\n    pass\n\nclass LoudBike(Loud, Bike):\n    pass\n")),Object(i.b)("p",null,"Miraculously, loudness was now implemented just once and reused\nin two completely unrelated classes.  This sort of trick is one\nof the primary uses of multiple inheritance in Python."),Object(i.b)("h3",{id:"why-super"},"Why ",Object(i.b)("inlineCode",{parentName:"h3"},"super()")),Object(i.b)("p",null,"Always use ",Object(i.b)("inlineCode",{parentName:"p"},"super()")," when overriding methods."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"class Loud:\n    def noise(self):\n        return super().noise().upper()\n")),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"super()")," delegates to the ",Object(i.b)("em",{parentName:"p"},"next class")," on the MRO."),Object(i.b)("p",null,"The tricky bit is that you don't know what it is.  You especially don't\nknow what it is if multiple inheritance is being used."),Object(i.b)("h3",{id:"some-cautions"},"Some Cautions"),Object(i.b)("p",null,"Multiple inheritance is a powerful tool. Remember that with power\ncomes responsibility.  Frameworks / libraries sometimes use it for\nadvanced features involving composition of components.  Now, forget\nthat you saw that."),Object(i.b)("h2",{id:"exercises"},"Exercises"),Object(i.b)("p",null,"In Section 4, you defined a class ",Object(i.b)("inlineCode",{parentName:"p"},"Stock")," that represented a holding of stock.\nIn this exercise, we will use that class.  Restart the interpreter and make a\nfew instances:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},">>> ================================ RESTART ================================\n>>> from stock import Stock\n>>> goog = Stock('GOOG',100,490.10)\n>>> ibm  = Stock('IBM',50, 91.23)\n>>>\n")),Object(i.b)("h3",{id:"exercise-51-representation-of-instances"},"Exercise 5.1: Representation of Instances"),Object(i.b)("p",null,"At the interactive shell, inspect the underlying dictionaries of the\ntwo instances you created:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},">>> goog.__dict__\n... look at the output ...\n>>> ibm.__dict__\n... look at the output ...\n>>>\n")),Object(i.b)("h3",{id:"exercise-52-modification-of-instance-data"},"Exercise 5.2: Modification of Instance Data"),Object(i.b)("p",null,"Try setting a new attribute on one of the above instances:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},">>> goog.date = '6/11/2007'\n>>> goog.__dict__\n... look at output ...\n>>> ibm.__dict__\n... look at output ...\n>>>\n")),Object(i.b)("p",null,"In the above output, you'll notice that the ",Object(i.b)("inlineCode",{parentName:"p"},"goog")," instance has a\nattribute ",Object(i.b)("inlineCode",{parentName:"p"},"date")," whereas the ",Object(i.b)("inlineCode",{parentName:"p"},"ibm")," instance does not.  It is important\nto note that Python really doesn't place any restrictions on\nattributes.  For example, the attributes of an instance are not\nlimited to those set up in the ",Object(i.b)("inlineCode",{parentName:"p"},"__init__()")," method."),Object(i.b)("p",null,"Instead of setting an attribute, try placing a new value directly into\nthe ",Object(i.b)("inlineCode",{parentName:"p"},"__dict__")," object:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},">>> goog.__dict__['time'] = '9:45am'\n>>> goog.time\n'9:45am'\n>>>\n")),Object(i.b)("p",null,"Here, you really notice the fact that an instance is just a layer on\ntop of a dictionary.  Note: it should be emphasized that direct\nmanipulation of the dictionary is uncommon--you should always write\nyour code to use the (.) syntax."),Object(i.b)("h3",{id:"exercise-53-the-role-of-classes"},"Exercise 5.3: The role of classes"),Object(i.b)("p",null,"The definitions that make up a class definition are shared by all\ninstances of that class.  Notice, that all instances have a link back\nto their associated class:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},">>> goog.__class__\n... look at output ...\n>>> ibm.__class__\n... look at output ...\n>>>\n")),Object(i.b)("p",null,"Try calling a method on the instances:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},">>> goog.cost()\n49010.0\n>>> ibm.cost()\n4561.5\n>>>\n")),Object(i.b)("p",null,"Notice that the name 'cost' is not defined in either ",Object(i.b)("inlineCode",{parentName:"p"},"goog.__dict__"),"\nor ",Object(i.b)("inlineCode",{parentName:"p"},"ibm.__dict__"),".  Instead, it is being supplied by the class\ndictionary.  Try this:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},">>> Stock.__dict__['cost']\n... look at output ...\n>>>\n")),Object(i.b)("p",null,"Try calling the ",Object(i.b)("inlineCode",{parentName:"p"},"cost()")," method directly through the dictionary:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},">>> Stock.__dict__['cost'](goog)\n49010.0\n>>> Stock.__dict__['cost'](ibm)\n4561.5\n>>>\n")),Object(i.b)("p",null,"Notice how you are calling the function defined in the class\ndefinition and how the ",Object(i.b)("inlineCode",{parentName:"p"},"self")," argument gets the instance."),Object(i.b)("p",null,"Try adding a new attribute to the ",Object(i.b)("inlineCode",{parentName:"p"},"Stock")," class:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},">>> Stock.foo = 42\n>>>\n")),Object(i.b)("p",null,"Notice how this new attribute now shows up on all of the instances:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},">>> goog.foo\n42\n>>> ibm.foo\n42\n>>>\n")),Object(i.b)("p",null,"However, notice that it is not part of the instance dictionary:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},">>> goog.__dict__\n... look at output and notice there is no 'foo' attribute ...\n>>>\n")),Object(i.b)("p",null,"The reason you can access the ",Object(i.b)("inlineCode",{parentName:"p"},"foo")," attribute on instances is that\nPython always checks the class dictionary if it can't find something\non the instance itself."),Object(i.b)("p",null,"Note: This part of the exercise illustrates something known as a class\nvariable.  Suppose, for instance, you have a class like this:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"class Foo(object):\n     a = 13                  # Class variable\n     def __init__(self,b):\n         self.b = b          # Instance variable\n")),Object(i.b)("p",null,"In this class, the variable ",Object(i.b)("inlineCode",{parentName:"p"},"a"),', assigned in the body of the\nclass itself, is a "class variable."  It is shared by all of the\ninstances that get created.  For example:'),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},">>> f = Foo(10)\n>>> g = Foo(20)\n>>> f.a          # Inspect the class variable (same for both instances)\n13\n>>> g.a\n13\n>>> f.b          # Inspect the instance variable (differs)\n10\n>>> g.b\n20\n>>> Foo.a = 42   # Change the value of the class variable\n>>> f.a\n42\n>>> g.a\n42\n>>>\n")),Object(i.b)("h3",{id:"exercise-54-bound-methods"},"Exercise 5.4: Bound methods"),Object(i.b)("p",null,"A subtle feature of Python is that invoking a method actually involves\ntwo steps and something known as a bound method.   For example:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},">>> s = goog.sell\n>>> s\n<bound method Stock.sell of Stock('GOOG', 100, 490.1)>\n>>> s(25)\n>>> goog.shares\n75\n>>>\n")),Object(i.b)("p",null,"Bound methods actually contain all of the pieces needed to call a\nmethod.  For instance, they keep a record of the function implementing\nthe method:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},">>> s.__func__\n<function sell at 0x10049af50>\n>>>\n")),Object(i.b)("p",null,"This is the same value as found in the ",Object(i.b)("inlineCode",{parentName:"p"},"Stock")," dictionary."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},">>> Stock.__dict__['sell']\n<function sell at 0x10049af50>\n>>>\n")),Object(i.b)("p",null,"Bound methods also record the instance, which is the ",Object(i.b)("inlineCode",{parentName:"p"},"self"),"\nargument."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},">>> s.__self__\nStock('GOOG',75,490.1)\n>>>\n")),Object(i.b)("p",null,"When you invoke the function using ",Object(i.b)("inlineCode",{parentName:"p"},"()")," all of the pieces come\ntogether.  For example, calling ",Object(i.b)("inlineCode",{parentName:"p"},"s(25)")," actually does this:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},">>> s.__func__(s.__self__, 25)    # Same as s(25)\n>>> goog.shares\n50\n>>>\n")),Object(i.b)("h3",{id:"exercise-55-inheritance"},"Exercise 5.5: Inheritance"),Object(i.b)("p",null,"Make a new class that inherits from ",Object(i.b)("inlineCode",{parentName:"p"},"Stock"),"."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},">>> class NewStock(Stock):\n        def yow(self):\n            print('Yow!')\n\n>>> n = NewStock('ACME', 50, 123.45)\n>>> n.cost()\n6172.50\n>>> n.yow()\nYow!\n>>>\n")),Object(i.b)("p",null,"Inheritance is implemented by extending the search process for attributes.\nThe ",Object(i.b)("inlineCode",{parentName:"p"},"__bases__")," attribute has a tuple of the immediate parents:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},">>> NewStock.__bases__\n(<class 'stock.Stock'>,)\n>>>\n")),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"__mro__")," attribute has a tuple of all parents, in the order that\nthey will be searched for attributes."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},">>> NewStock.__mro__\n(<class '__main__.NewStock'>, <class 'stock.Stock'>, <class 'object'>)\n>>>\n")),Object(i.b)("p",null,"Here's how the ",Object(i.b)("inlineCode",{parentName:"p"},"cost()")," method of instance ",Object(i.b)("inlineCode",{parentName:"p"},"n")," above would be found:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},">>> for cls in n.__class__.__mro__:\n        if 'cost' in cls.__dict__:\n            break\n\n>>> cls\n<class '__main__.Stock'>\n>>> cls.__dict__['cost']\n<function cost at 0x101aed598>\n>>>\n")))}b.isMDXComponent=!0},122:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return h}));var a=t(0),s=t.n(a);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,s=function(e,n){if(null==e)return{};var t,a,s={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var r=s.a.createContext({}),b=function(e){var n=s.a.useContext(r),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},p=function(e){var n=b(e.components);return s.a.createElement(r.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return s.a.createElement(s.a.Fragment,{},n)}},u=s.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,r=l(e,["components","mdxType","originalType","parentName"]),p=b(t),u=a,h=p["".concat(o,".").concat(u)]||p[u]||d[u]||i;return t?s.a.createElement(h,c(c({ref:n},r),{},{components:t})):s.a.createElement(h,c({ref:n},r))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=u;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var r=2;r<i;r++)o[r]=t[r];return s.a.createElement.apply(null,o)}return s.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"}}]);