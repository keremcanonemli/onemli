(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{108:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return l})),t.d(n,"metadata",(function(){return i})),t.d(n,"toc",(function(){return s})),t.d(n,"default",(function(){return p}));var o=t(3),a=t(8),r=(t(0),t(121)),l={id:"collections",title:"Collections",sidebar_label:"2.5 Collections",slug:"collections",custom_edit_url:null},i={unversionedId:"python/working_with_data/collections",id:"python/working_with_data/collections",isDocsHomePage:!1,title:"Collections",description:"\u200b",source:"@site/docs/python/working_with_data/05_Collections.md",slug:"/python/working_with_data/collections",permalink:"/docs/python/working_with_data/collections",editUrl:null,version:"current",sidebar_label:"2.5 Collections",sidebar:"someSidebar",previous:{title:"Sequences",permalink:"/docs/python/working_with_data/sequences"},next:{title:"List Comprehension",permalink:"/docs/python/working_with_data/list_comprehension"}},s=[{value:"Example: Counting Things",id:"example-counting-things",children:[]},{value:"Counters",id:"counters",children:[]},{value:"Example: One-Many Mappings",id:"example-one-many-mappings",children:[]},{value:"Example: Keeping a History",id:"example-keeping-a-history",children:[]},{value:"Exercises",id:"exercises",children:[{value:"Exercise 2.18: Tabulating with Counters",id:"exercise-218-tabulating-with-counters",children:[]},{value:"Commentary: collections module",id:"commentary-collections-module",children:[]}]}],c={toc:s};function p(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(r.b)("wrapper",Object(o.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("p",null,"\u200b    "),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"collections")," module provides a number of useful objects for data handling.\nThis part briefly introduces some of these features."),Object(r.b)("h3",{id:"example-counting-things"},"Example: Counting Things"),Object(r.b)("p",null,"Let's say you want to tabulate the total shares of each stock."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"portfolio = [\n    ('GOOG', 100, 490.1),\n    ('IBM', 50, 91.1),\n    ('CAT', 150, 83.44),\n    ('IBM', 100, 45.23),\n    ('GOOG', 75, 572.45),\n    ('AA', 50, 23.15)\n]\n")),Object(r.b)("p",null,"There are two ",Object(r.b)("inlineCode",{parentName:"p"},"IBM")," entries and two ",Object(r.b)("inlineCode",{parentName:"p"},"GOOG")," entries in this list. The shares need to be combined together somehow."),Object(r.b)("h3",{id:"counters"},"Counters"),Object(r.b)("p",null,"Solution: Use a ",Object(r.b)("inlineCode",{parentName:"p"},"Counter"),"."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"from collections import Counter\ntotal_shares = Counter()\nfor name, shares, price in portfolio:\n    total_shares[name] += shares\n\ntotal_shares['IBM']     # 150\n")),Object(r.b)("h3",{id:"example-one-many-mappings"},"Example: One-Many Mappings"),Object(r.b)("p",null,"Problem: You want to map a key to multiple values."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"portfolio = [\n    ('GOOG', 100, 490.1),\n    ('IBM', 50, 91.1),\n    ('CAT', 150, 83.44),\n    ('IBM', 100, 45.23),\n    ('GOOG', 75, 572.45),\n    ('AA', 50, 23.15)\n]\n")),Object(r.b)("p",null,"Like in the previous example, the key ",Object(r.b)("inlineCode",{parentName:"p"},"IBM")," should have two different tuples instead."),Object(r.b)("p",null,"Solution: Use a ",Object(r.b)("inlineCode",{parentName:"p"},"defaultdict"),"."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"from collections import defaultdict\nholdings = defaultdict(list)\nfor name, shares, price in portfolio:\n    holdings[name].append((shares, price))\nholdings['IBM'] # [ (50, 91.1), (100, 45.23) ]\n")),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"defaultdict")," ensures that every time you access a key you get a default value."),Object(r.b)("h3",{id:"example-keeping-a-history"},"Example: Keeping a History"),Object(r.b)("p",null,"Problem: We want a history of the last N things.\nSolution: Use a ",Object(r.b)("inlineCode",{parentName:"p"},"deque"),"."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"from collections import deque\n\nhistory = deque(maxlen=N)\nwith open(filename) as f:\n    for line in f:\n        history.append(line)\n        ...\n")),Object(r.b)("h2",{id:"exercises"},"Exercises"),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"collections")," module might be one of the most useful library\nmodules for dealing with special purpose kinds of data handling\nproblems such as tabulating and indexing."),Object(r.b)("p",null,"In this exercise, we\u2019ll look at a few simple examples.  Start by\nrunning your ",Object(r.b)("inlineCode",{parentName:"p"},"report.py")," program so that you have the portfolio of\nstocks loaded in the interactive mode."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-bash"},"bash % python3 -i report.py\n")),Object(r.b)("h3",{id:"exercise-218-tabulating-with-counters"},"Exercise 2.18: Tabulating with Counters"),Object(r.b)("p",null,"Suppose you wanted to tabulate the total number of shares of each stock.\nThis is easy using ",Object(r.b)("inlineCode",{parentName:"p"},"Counter")," objects. Try it:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},">>> portfolio = read_portfolio('Data/portfolio.csv')\n>>> from collections import Counter\n>>> holdings = Counter()\n>>> for s in portfolio:\n        holdings[s['name']] += s['shares']\n\n>>> holdings\nCounter({'MSFT': 250, 'IBM': 150, 'CAT': 150, 'AA': 100, 'GE': 95})\n>>>\n")),Object(r.b)("p",null,"Carefully observe how the multiple entries for ",Object(r.b)("inlineCode",{parentName:"p"},"MSFT")," and ",Object(r.b)("inlineCode",{parentName:"p"},"IBM")," in ",Object(r.b)("inlineCode",{parentName:"p"},"portfolio")," get combined into a single entry here."),Object(r.b)("p",null,"You can use a Counter just like a dictionary to retrieve individual values:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},">>> holdings['IBM']\n150\n>>> holdings['MSFT']\n250\n>>>\n")),Object(r.b)("p",null,"If you want to rank the values, do this:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},">>> # Get three most held stocks\n>>> holdings.most_common(3)\n[('MSFT', 250), ('IBM', 150), ('CAT', 150)]\n>>>\n")),Object(r.b)("p",null,"Let\u2019s grab another portfolio of stocks and make a new Counter:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},">>> portfolio2 = read_portfolio('Data/portfolio2.csv')\n>>> holdings2 = Counter()\n>>> for s in portfolio2:\n          holdings2[s['name']] += s['shares']\n\n>>> holdings2\nCounter({'HPQ': 250, 'GE': 125, 'AA': 50, 'MSFT': 25})\n>>>\n")),Object(r.b)("p",null,"Finally, let\u2019s combine all of the holdings doing one simple operation:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},">>> holdings\nCounter({'MSFT': 250, 'IBM': 150, 'CAT': 150, 'AA': 100, 'GE': 95})\n>>> holdings2\nCounter({'HPQ': 250, 'GE': 125, 'AA': 50, 'MSFT': 25})\n>>> combined = holdings + holdings2\n>>> combined\nCounter({'MSFT': 275, 'HPQ': 250, 'GE': 220, 'AA': 150, 'IBM': 150, 'CAT': 150})\n>>>\n")),Object(r.b)("p",null,"This is only a small taste of what counters provide. However, if you\never find yourself needing to tabulate values, you should consider\nusing one."),Object(r.b)("h3",{id:"commentary-collections-module"},"Commentary: collections module"),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"collections")," module is one of the most useful library modules\nin all of Python.  In fact, we could do an extended tutorial on just\nthat.  However, doing so now would also be a distraction.  For now,\nput ",Object(r.b)("inlineCode",{parentName:"p"},"collections")," on your list of bedtime reading for later."))}p.isMDXComponent=!0},121:function(e,n,t){"use strict";t.d(n,"a",(function(){return u})),t.d(n,"b",(function(){return m}));var o=t(0),a=t.n(o);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=a.a.createContext({}),p=function(e){var n=a.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=p(e.components);return a.a.createElement(c.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},d=a.a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(t),d=o,m=u["".concat(l,".").concat(d)]||u[d]||b[d]||r;return t?a.a.createElement(m,i(i({ref:n},c),{},{components:t})):a.a.createElement(m,i({ref:n},c))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,l=new Array(r);l[0]=d;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var c=2;c<r;c++)l[c]=t[c];return a.a.createElement.apply(null,l)}return a.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"}}]);