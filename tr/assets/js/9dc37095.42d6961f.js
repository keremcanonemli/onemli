(window.webpackJsonp=window.webpackJsonp||[]).push([[131],{203:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return p}));var r=n(3),a=n(8),i=(n(0),n(280)),o={id:"flags",title:"Flags",sidebar_label:"15.8 Flags",slug:"flags",custom_edit_url:null},c={unversionedId:"python/module_re/flags",id:"python/module_re/flags",isDocsHomePage:!1,title:"Flags",description:"When using re functions or creating a compiled regex you can specify additional flags that affect the behavior of regex.",source:"@site/i18n/tr/docusaurus-plugin-content-docs/current/python/module_re/8_flags.md",slug:"/python/module_re/flags",permalink:"/tr/docs/python/module_re/flags",editUrl:null,version:"current",sidebar_label:"15.8 Flags",sidebar:"someSidebar",previous:{title:"Compile Function",permalink:"/tr/docs/python/module_re/compile_function"},next:{title:"Function Re.Split",permalink:"/tr/docs/python/module_re/function_re.split"}},l=[{value:"re.DOTALL",id:"redotall",children:[]}],s={toc:l};function p(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"When using re functions or creating a compiled regex you can specify additional flags that affect the behavior of regex."),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"re")," module supports flags (in parentheses - a short version of flag):"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"re.ASCII")," (",Object(i.b)("inlineCode",{parentName:"li"},"re.A"),")"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"re.IGNORECASE")," (",Object(i.b)("inlineCode",{parentName:"li"},"re.I"),")"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"re.MULTILINE")," (",Object(i.b)("inlineCode",{parentName:"li"},"re.M"),")"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"re.DOTALL")," (",Object(i.b)("inlineCode",{parentName:"li"},"re.S"),")"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"re.VERBOSE")," (",Object(i.b)("inlineCode",{parentName:"li"},"re.X"),")"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"re.LOCALE")," (",Object(i.b)("inlineCode",{parentName:"li"},"re.L"),")"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"re.DEBUG"))),Object(i.b)("p",null,"In this subsection the ",Object(i.b)("inlineCode",{parentName:"p"},"re.DOTALL")," flag is covered. Information about other flags is available in ",Object(i.b)("a",{parentName:"p",href:"https://docs.python.org/3/library/re.html#re.A"},"documentation"),"."),Object(i.b)("h2",{id:"redotall"},"re.DOTALL"),Object(i.b)("p",null,"Regex can also be used for multiline string."),Object(i.b)("p",null,"For example, from ",Object(i.b)("inlineCode",{parentName:"p"},"sh_cdp")," string you need to get a device name, platform and IOS:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"In [2]: sh_cdp = '''\n   ...: Device ID: SW2\n   ...: Entry address(es):\n   ...:   IP address: 10.1.1.2\n   ...: Platform: cisco WS-C2960-8TC-L,  Capabilities: Switch IGMP\n   ...: Interface: GigabitEthernet1/0/16,  Port ID (outgoing port): GigabitEthernet0/1\n   ...: Holdtime : 164 sec\n   ...:\n   ...: Version :\n   ...: Cisco IOS Software, C2960 Software (C2960-LANBASEK9-M), Version 12.2(55)SE9, RELEASE SOFTWARE (fc1)\n   ...: Technical Support: http://www.cisco.com/techsupport\n   ...: Copyright (c) 1986-2014 by Cisco Systems, Inc.\n   ...: Compiled Mon 03-Mar-14 22:53 by prod_rel_team\n   ...:\n   ...: advertisement version: 2\n   ...: VTP Management Domain: ''\n   ...: Native VLAN: 1\n   ...: Duplex: full\n   ...: Management address(es):\n   ...:   IP address: 10.1.1.2\n   ...: '''\n")),Object(i.b)("p",null,"Of course, in this case it is possible to divide a string into parts and work with each string separately, but you can get necessary data without splitting."),Object(i.b)("p",null,"In this expression, strings with required data are described:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"In [3]: regex = r'Device ID: (\\S+).+Platform: \\w+ (\\S+),.+Cisco IOS Software.+ Version (\\S+),'\n")),Object(i.b)("p",null,"In this case, there will be no match because by default a dot means any character other than a new line character:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"In [4]: print(re.search(regex, sh_cdp))\nNone\n")),Object(i.b)("p",null,"You can change default behavior by using ",Object(i.b)("inlineCode",{parentName:"p"},"re.DOTALL")," flag:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"In [5]: match = re.search(regex, sh_cdp, re.DOTALL)\n\nIn [6]: match.groups()\nOut[6]: ('SW2', 'WS-C2960-8TC-L', '12.2(55)SE9')\n")),Object(i.b)("p",null,"Since new line character is now included, combination ",Object(i.b)("inlineCode",{parentName:"p"},".+")," captures everything between data."),Object(i.b)("p",null,"Now try to use this regex to get information about all neighbors from sh_cdp_neighbors_sw1.txt file."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"SW1#show cdp neighbors detail\n-------------------------\nDevice ID: SW2\nEntry address(es):\n  IP address: 10.1.1.2\nPlatform: cisco WS-C2960-8TC-L,  Capabilities: Switch IGMP\nInterface: GigabitEthernet1/0/16,  Port ID (outgoing port): GigabitEthernet0/1\nHoldtime : 164 sec\n\nVersion :\nCisco IOS Software, C2960 Software (C2960-LANBASEK9-M), Version 12.2(55)SE9, RELEASE SOFTWARE (fc1)\nTechnical Support: http://www.cisco.com/techsupport\n\n-------------------------\nDevice ID: R1\nEntry address(es):\n  IP address: 10.1.1.1\nPlatform: Cisco 3825,  Capabilities: Router Switch IGMP\nInterface: GigabitEthernet1/0/22,  Port ID (outgoing port): GigabitEthernet0/0\nHoldtime : 156 sec\n\nVersion :\nCisco IOS Software, 3800 Software (C3825-ADVENTERPRISEK9-M), Version 12.4(24)T1, RELEASE SOFTWARE (fc3)\nTechnical Support: http://www.cisco.com/techsupport\n\n-------------------------\nDevice ID: R2\nEntry address(es):\n  IP address: 10.2.2.2\nPlatform: Cisco 2911,  Capabilities: Router Switch IGMP\nInterface: GigabitEthernet1/0/21,  Port ID (outgoing port): GigabitEthernet0/0\nHoldtime : 156 sec\n\nVersion :\nCisco IOS Software, 2900 Software (C3825-ADVENTERPRISEK9-M), Version 15.2(2)T1, RELEASE SOFTWARE (fc3)\nTechnical Support: http://www.cisco.com/techsupport\n")),Object(i.b)("p",null,"Search for all regex matches:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"In [7]: with open('sh_cdp_neighbors_sw1.txt') as f:\n   ...:     sh_cdp = f.read()\n   ...:\n\nIn [8]: regex = r'Device ID: (\\S+).+Platform: \\w+ (\\S+),.+Cisco IOS Software.+ Version (\\S+),'\n\nIn [9]: match = re.finditer(regex, sh_cdp, re.DOTALL)\n\nIn [10]: for m in match:\n    ...:     print(m.groups())\n    ...:\n('SW2', '2911', '15.2(2)T1')\n")),Object(i.b)("p",null,"At first glance, it seems that instead of three devices there was only one device in output. However, if you look at the results the tuple has Device ID from the first neighbor and platform and IOS from the last neighbor."),Object(i.b)("p",null,"A short output to ease understanding of result:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"Device ID        Local Intrfce     Holdtme    Capability  Platform  Port ID\nSW2              Gi 1/0/16         171              R S   C2960     Gi 0/1\nR1               Gi 1/0/22         158              R     C3825     Gi 0/0\nR2               Gi 1/0/21         177              R     C2911     Gi 0/0\n")),Object(i.b)("p",null,"This is because there is a ",Object(i.b)("inlineCode",{parentName:"p"},".+")," combination between desired parts of the output. Without ",Object(i.b)("inlineCode",{parentName:"p"},"re.DOTALL")," flag, such an expression would capture everything before new line character, but with a flag it captures the longest possible piece of text because ",Object(i.b)("inlineCode",{parentName:"p"},"+")," is greedy. As a result, regex describes a string from the first Device ID to the last place where ",Object(i.b)("inlineCode",{parentName:"p"},"Cisco IOS Software.+ Version")," match occurs."),Object(i.b)("p",null,"This situation occurs very often when using ",Object(i.b)("inlineCode",{parentName:"p"},"re.DOTALL")," and in order to correct it remember to disable greedy behavior:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"In [10]: regex = r'Device ID: (\\S+).+?Platform: \\w+ (\\S+),.+?Cisco IOS Software.+? Version (\\S+),'\n\nIn [11]: match = re.finditer(regex, sh_cdp, re.DOTALL)\n\nIn [12]: for m in match:\n    ...:     print(m.groups())\n    ...:\n('SW2', 'WS-C2960-8TC-L', '12.2(55)SE9')\n('R1', '3825', '12.4(24)T1')\n('R2', '2911', '15.2(2)T1')\n")))}p.isMDXComponent=!0},280:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=a.a.createContext({}),p=function(e){var t=a.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},b=function(e){var t=p(e.components);return a.a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),b=p(n),d=r,m=b["".concat(o,".").concat(d)]||b[d]||u[d]||i;return n?a.a.createElement(m,c(c({ref:t},s),{},{components:n})):a.a.createElement(m,c({ref:t},s))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,o[1]=c;for(var s=2;s<i;s++)o[s]=n[s];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);