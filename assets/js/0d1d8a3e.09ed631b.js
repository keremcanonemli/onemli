(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{121:function(e,n,t){"use strict";t.d(n,"a",(function(){return b})),t.d(n,"b",(function(){return d}));var a=t(0),i=t.n(a);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=i.a.createContext({}),p=function(e){var n=i.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},b=function(e){var n=p(e.components);return i.a.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.a.createElement(i.a.Fragment,{},n)}},m=i.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),b=p(t),m=a,d=b["".concat(o,".").concat(m)]||b[m]||u[m]||r;return t?i.a.createElement(d,l(l({ref:n},s),{},{components:t})):i.a.createElement(d,l({ref:n},s))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,o=new Array(r);o[0]=m;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var s=2;s<r;s++)o[s]=t[s];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},72:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return l})),t.d(n,"toc",(function(){return c})),t.d(n,"default",(function(){return p}));var a=t(3),i=t(8),r=(t(0),t(121)),o={id:"sequences",title:"Sequences",sidebar_label:"2.4 Sequences",slug:"sequences",custom_edit_url:null},l={unversionedId:"python/working_with_data/sequences",id:"python/working_with_data/sequences",isDocsHomePage:!1,title:"Sequences",description:"\u200b",source:"@site/docs/python/working_with_data/04_Sequences.md",slug:"/python/working_with_data/sequences",permalink:"/docs/python/working_with_data/sequences",editUrl:null,version:"current",sidebar_label:"2.4 Sequences",sidebar:"someSidebar",previous:{title:"Formatting",permalink:"/docs/python/working_with_data/formatting"},next:{title:"Collections",permalink:"/docs/python/working_with_data/collections"}},c=[{value:"Sequence Datatypes",id:"sequence-datatypes",children:[]},{value:"Slicing",id:"slicing",children:[]},{value:"Slice re-assignment",id:"slice-re-assignment",children:[]},{value:"Sequence Reductions",id:"sequence-reductions",children:[]},{value:"Iteration over a sequence",id:"iteration-over-a-sequence",children:[]},{value:"break statement",id:"break-statement",children:[]},{value:"continue statement",id:"continue-statement",children:[]},{value:"Looping over integers",id:"looping-over-integers",children:[]},{value:"enumerate() function",id:"enumerate-function",children:[]},{value:"For and tuples",id:"for-and-tuples",children:[]},{value:"zip() function",id:"zip-function",children:[]},{value:"Exercises",id:"exercises",children:[{value:"Exercise 2.13: Counting",id:"exercise-213-counting",children:[]},{value:"Exercise 2.14: More sequence operations",id:"exercise-214-more-sequence-operations",children:[]},{value:"Exercise 2.15: A practical enumerate() example",id:"exercise-215-a-practical-enumerate-example",children:[]},{value:"Exercise 2.16: Using the zip() function",id:"exercise-216-using-the-zip-function",children:[]},{value:"Exercise 2.17: Inverting a dictionary",id:"exercise-217-inverting-a-dictionary",children:[]}]}],s={toc:c};function p(e){var n=e.components,t=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("p",null,"\u200b    "),Object(r.b)("h3",{id:"sequence-datatypes"},"Sequence Datatypes"),Object(r.b)("p",null,"Python has three ",Object(r.b)("em",{parentName:"p"},"sequence")," datatypes."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"String: ",Object(r.b)("inlineCode",{parentName:"li"},"'Hello'"),". A string is a sequence of characters."),Object(r.b)("li",{parentName:"ul"},"List: ",Object(r.b)("inlineCode",{parentName:"li"},"[1, 4, 5]"),"."),Object(r.b)("li",{parentName:"ul"},"Tuple: ",Object(r.b)("inlineCode",{parentName:"li"},"('GOOG', 100, 490.1)"),".")),Object(r.b)("p",null,"All sequences are ordered, indexed by integers, and have a length."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"a = 'Hello'               # String\nb = [1, 4, 5]             # List\nc = ('GOOG', 100, 490.1)  # Tuple\n\n# Indexed order\na[0]                      # 'H'\nb[-1]                     # 5\nc[1]                      # 100\n\n# Length of sequence\nlen(a)                    # 5\nlen(b)                    # 3\nlen(c)                    # 3\n")),Object(r.b)("p",null,"Sequences can be replicated: ",Object(r.b)("inlineCode",{parentName:"p"},"s * n"),"."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},">>> a = 'Hello'\n>>> a * 3\n'HelloHelloHello'\n>>> b = [1, 2, 3]\n>>> b * 2\n[1, 2, 3, 1, 2, 3]\n>>>\n")),Object(r.b)("p",null,"Sequences of the same type can be concatenated: ",Object(r.b)("inlineCode",{parentName:"p"},"s + t"),"."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},'>>> a = (1, 2, 3)\n>>> b = (4, 5)\n>>> a + b\n(1, 2, 3, 4, 5)\n>>>\n>>> c = [1, 5]\n>>> a + c\nTraceback (most recent call last):\n  File "<stdin>", line 1, in <module>\nTypeError: can only concatenate tuple (not "list") to tuple\n')),Object(r.b)("h3",{id:"slicing"},"Slicing"),Object(r.b)("p",null,"Slicing means to take a subsequence from a sequence.\nThe syntax is ",Object(r.b)("inlineCode",{parentName:"p"},"s[start:end]"),". Where ",Object(r.b)("inlineCode",{parentName:"p"},"start")," and ",Object(r.b)("inlineCode",{parentName:"p"},"end")," are the indexes of the subsequence you want."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"a = [0,1,2,3,4,5,6,7,8]\n\na[2:5]    # [2,3,4]\na[-5:]    # [4,5,6,7,8]\na[:3]     # [0,1,2]\n")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Indices ",Object(r.b)("inlineCode",{parentName:"li"},"start")," and ",Object(r.b)("inlineCode",{parentName:"li"},"end")," must be integers."),Object(r.b)("li",{parentName:"ul"},"Slices do ",Object(r.b)("em",{parentName:"li"},"not")," include the end value. It is like a half-open interval from math."),Object(r.b)("li",{parentName:"ul"},"If indices are omitted, they default to the beginning or end of the list.")),Object(r.b)("h3",{id:"slice-re-assignment"},"Slice re-assignment"),Object(r.b)("p",null,"On lists, slices can be reassigned and deleted."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"# Reassignment\na = [0,1,2,3,4,5,6,7,8]\na[2:4] = [10,11,12]       # [0,1,10,11,12,4,5,6,7,8]\n")),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"Note: The reassigned slice doesn't need to have the same length.")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"# Deletion\na = [0,1,2,3,4,5,6,7,8]\ndel a[2:4]                # [0,1,4,5,6,7,8]\n")),Object(r.b)("h3",{id:"sequence-reductions"},"Sequence Reductions"),Object(r.b)("p",null,"There are some common functions to reduce a sequence to a single value."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},">>> s = [1, 2, 3, 4]\n>>> sum(s)\n10\n>>> min(s)\n1\n>>> max(s)\n4\n>>> t = ['Hello', 'World']\n>>> max(t)\n'World'\n>>>\n")),Object(r.b)("h3",{id:"iteration-over-a-sequence"},"Iteration over a sequence"),Object(r.b)("p",null,"The for-loop iterates over the elements in a sequence."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},">>> s = [1, 4, 9, 16]\n>>> for i in s:\n...     print(i)\n...\n1\n4\n9\n16\n>>>\n")),Object(r.b)("p",null,"On each iteration of the loop, you get a new item to work with.\nThis new value is placed into the iteration variable. In this example, the\niteration variable is ",Object(r.b)("inlineCode",{parentName:"p"},"x"),":"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"for x in s:         # `x` is an iteration variable\n    ...statements\n")),Object(r.b)("p",null,"On each iteration, the previous value of the iteration variable is overwritten (if any).\nAfter the loop finishes, the variable retains the last value."),Object(r.b)("h3",{id:"break-statement"},"break statement"),Object(r.b)("p",null,"You can use the ",Object(r.b)("inlineCode",{parentName:"p"},"break")," statement to break out of a loop early."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"for name in namelist:\n    if name == 'Jake':\n        break\n    ...\n    ...\nstatements\n")),Object(r.b)("p",null,"When the ",Object(r.b)("inlineCode",{parentName:"p"},"break")," statement executes, it exits the loop and moves\non the next ",Object(r.b)("inlineCode",{parentName:"p"},"statements"),".  The ",Object(r.b)("inlineCode",{parentName:"p"},"break")," statement only applies to the\ninner-most loop. If this loop is within another loop, it will not\nbreak the outer loop."),Object(r.b)("h3",{id:"continue-statement"},"continue statement"),Object(r.b)("p",null,"To skip one element and move to the next one, use the ",Object(r.b)("inlineCode",{parentName:"p"},"continue")," statement."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"for line in lines:\n    if line == '\\n':    # Skip blank lines\n        continue\n    # More statements\n    ...\n")),Object(r.b)("p",null,"This is useful when the current item is not of interest or needs to be ignored in the processing."),Object(r.b)("h3",{id:"looping-over-integers"},"Looping over integers"),Object(r.b)("p",null,"If you need to count, use ",Object(r.b)("inlineCode",{parentName:"p"},"range()"),"."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"for i in range(100):\n    # i = 0,1,...,99\n")),Object(r.b)("p",null,"The syntax is ",Object(r.b)("inlineCode",{parentName:"p"},"range([start,] end [,step])")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"for i in range(100):\n    # i = 0,1,...,99\nfor j in range(10,20):\n    # j = 10,11,..., 19\nfor k in range(10,50,2):\n    # k = 10,12,...,48\n    # Notice how it counts in steps of 2, not 1.\n")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"The ending value is never included. It mirrors the behavior of slices."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"start")," is optional. Default ",Object(r.b)("inlineCode",{parentName:"li"},"0"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"step")," is optional. Default ",Object(r.b)("inlineCode",{parentName:"li"},"1"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"range()")," computes values as needed. It does not actually store a large range of numbers.")),Object(r.b)("h3",{id:"enumerate-function"},"enumerate() function"),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"enumerate")," function adds an extra counter value to iteration."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"names = ['Elwood', 'Jake', 'Curtis']\nfor i, name in enumerate(names):\n    # Loops with i = 0, name = 'Elwood'\n    # i = 1, name = 'Jake'\n    # i = 2, name = 'Curtis'\n")),Object(r.b)("p",null,"The general form is ",Object(r.b)("inlineCode",{parentName:"p"},"enumerate(sequence [, start = 0])"),". ",Object(r.b)("inlineCode",{parentName:"p"},"start")," is optional.\nA good example of using ",Object(r.b)("inlineCode",{parentName:"p"},"enumerate()")," is tracking line numbers while reading a file:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"with open(filename) as f:\n    for lineno, line in enumerate(f, start=1):\n        ...\n")),Object(r.b)("p",null,"In the end, ",Object(r.b)("inlineCode",{parentName:"p"},"enumerate")," is just a nice shortcut for:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"i = 0\nfor x in s:\n    statements\n    i += 1\n")),Object(r.b)("p",null,"Using ",Object(r.b)("inlineCode",{parentName:"p"},"enumerate")," is less typing and runs slightly faster."),Object(r.b)("h3",{id:"for-and-tuples"},"For and tuples"),Object(r.b)("p",null,"You can iterate with multiple iteration variables."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"points = [\n  (1, 4),(10, 40),(23, 14),(5, 6),(7, 8)\n]\nfor x, y in points:\n    # Loops with x = 1, y = 4\n    #            x = 10, y = 40\n    #            x = 23, y = 14\n    #            ...\n")),Object(r.b)("p",null,"When using multiple variables, each tuple is ",Object(r.b)("em",{parentName:"p"},"unpacked")," into a set of iteration variables.\nThe number of variables must match the number of items in each tuple."),Object(r.b)("h3",{id:"zip-function"},"zip() function"),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"zip")," function takes multiple sequences and makes an iterator that combines them."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"columns = ['name', 'shares', 'price']\nvalues = ['GOOG', 100, 490.1 ]\npairs = zip(columns, values)\n# ('name','GOOG'), ('shares',100), ('price',490.1)\n")),Object(r.b)("p",null,"To get the result you must iterate. You can use multiple variables to unpack the tuples as shown earlier."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"for column, value in pairs:\n    ...\n")),Object(r.b)("p",null,"A common use of ",Object(r.b)("inlineCode",{parentName:"p"},"zip")," is to create key/value pairs for constructing dictionaries."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"d = dict(zip(columns, values))\n")),Object(r.b)("h2",{id:"exercises"},"Exercises"),Object(r.b)("h3",{id:"exercise-213-counting"},"Exercise 2.13: Counting"),Object(r.b)("p",null,"Try some basic counting examples:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},">>> for n in range(10):            # Count 0 ... 9\n        print(n, end=' ')\n\n0 1 2 3 4 5 6 7 8 9\n>>> for n in range(10,0,-1):       # Count 10 ... 1\n        print(n, end=' ')\n\n10 9 8 7 6 5 4 3 2 1\n>>> for n in range(0,10,2):        # Count 0, 2, ... 8\n        print(n, end=' ')\n\n0 2 4 6 8\n>>>\n")),Object(r.b)("h3",{id:"exercise-214-more-sequence-operations"},"Exercise 2.14: More sequence operations"),Object(r.b)("p",null,"Interactively experiment with some of the sequence reduction operations."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},">>> data = [4, 9, 1, 25, 16, 100, 49]\n>>> min(data)\n1\n>>> max(data)\n100\n>>> sum(data)\n204\n>>>\n")),Object(r.b)("p",null,"Try looping over the data."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},">>> for x in data:\n        print(x)\n\n4\n9\n...\n>>> for n, x in enumerate(data):\n        print(n, x)\n\n0 4\n1 9\n2 1\n...\n>>>\n")),Object(r.b)("p",null,"Sometimes the ",Object(r.b)("inlineCode",{parentName:"p"},"for")," statement, ",Object(r.b)("inlineCode",{parentName:"p"},"len()"),", and ",Object(r.b)("inlineCode",{parentName:"p"},"range()")," get used by\nnovices in some kind of horrible code fragment that looks like it\nemerged from the depths of a rusty C program."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},">>> for n in range(len(data)):\n        print(data[n])\n\n4\n9\n1\n...\n>>>\n")),Object(r.b)("p",null,"Don\u2019t do that! Not only does reading it make everyone\u2019s eyes bleed,\nit\u2019s inefficient with memory and it runs a lot slower.  Just use a\nnormal ",Object(r.b)("inlineCode",{parentName:"p"},"for")," loop if you want to iterate over data.  Use ",Object(r.b)("inlineCode",{parentName:"p"},"enumerate()"),"\nif you happen to need the index for some reason."),Object(r.b)("h3",{id:"exercise-215-a-practical-enumerate-example"},"Exercise 2.15: A practical enumerate() example"),Object(r.b)("p",null,"Recall that the file ",Object(r.b)("inlineCode",{parentName:"p"},"Data/missing.csv")," contains data for a stock\nportfolio, but has some rows with missing data.  Using ",Object(r.b)("inlineCode",{parentName:"p"},"enumerate()"),",\nmodify your ",Object(r.b)("inlineCode",{parentName:"p"},"pcost.py")," program so that it prints a line number with\nthe warning message when it encounters bad input."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},">>> cost = portfolio_cost('Data/missing.csv')\nRow 4: Couldn't convert: ['MSFT', '', '51.23']\nRow 7: Couldn't convert: ['IBM', '', '70.44']\n>>>\n")),Object(r.b)("p",null,"To do this, you\u2019ll need to change a few parts of your code."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"...\nfor rowno, row in enumerate(rows, start=1):\n    try:\n        ...\n    except ValueError:\n        print(f'Row {rowno}: Bad row: {row}')\n")),Object(r.b)("h3",{id:"exercise-216-using-the-zip-function"},"Exercise 2.16: Using the zip() function"),Object(r.b)("p",null,"In the file ",Object(r.b)("inlineCode",{parentName:"p"},"Data/portfolio.csv"),", the first line contains column\nheaders. In all previous code, we\u2019ve been discarding them."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},">>> f = open('Data/portfolio.csv')\n>>> rows = csv.reader(f)\n>>> headers = next(rows)\n>>> headers\n['name', 'shares', 'price']\n>>>\n")),Object(r.b)("p",null,"However, what if you could use the headers for something useful? This\nis where the ",Object(r.b)("inlineCode",{parentName:"p"},"zip()")," function enters the picture.  First try this to\npair the file headers with a row of data:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},">>> row = next(rows)\n>>> row\n['AA', '100', '32.20']\n>>> list(zip(headers, row))\n[ ('name', 'AA'), ('shares', '100'), ('price', '32.20') ]\n>>>\n")),Object(r.b)("p",null,"Notice how ",Object(r.b)("inlineCode",{parentName:"p"},"zip()")," paired the column headers with the column values.\nWe\u2019ve used ",Object(r.b)("inlineCode",{parentName:"p"},"list()")," here to turn the result into a list so that you\ncan see it. Normally, ",Object(r.b)("inlineCode",{parentName:"p"},"zip()")," creates an iterator that must be\nconsumed by a for-loop."),Object(r.b)("p",null,"This pairing is an intermediate step to building a\ndictionary. Now try this:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},">>> record = dict(zip(headers, row))\n>>> record\n{'price': '32.20', 'name': 'AA', 'shares': '100'}\n>>>\n")),Object(r.b)("p",null,"This transformation is one of the most useful tricks to know about\nwhen processing a lot of data files.  For example, suppose you wanted\nto make the ",Object(r.b)("inlineCode",{parentName:"p"},"pcost.py")," program work with various input files, but\nwithout regard for the actual column number where the name, shares,\nand price appear."),Object(r.b)("p",null,"Modify the ",Object(r.b)("inlineCode",{parentName:"p"},"portfolio_cost()")," function in ",Object(r.b)("inlineCode",{parentName:"p"},"pcost.py")," so that it looks like this:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"# pcost.py\n\ndef portfolio_cost(filename):\n    ...\n        for rowno, row in enumerate(rows, start=1):\n            record = dict(zip(headers, row))\n            try:\n                nshares = int(record['shares'])\n                price = float(record['price'])\n                total_cost += nshares * price\n            # This catches errors in int() and float() conversions above\n            except ValueError:\n                print(f'Row {rowno}: Bad row: {row}')\n        ...\n")),Object(r.b)("p",null,"Now, try your function on a completely different data file\n",Object(r.b)("inlineCode",{parentName:"p"},"Data/portfoliodate.csv")," which looks like this:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-csv"},'name,date,time,shares,price\n"AA","6/11/2007","9:50am",100,32.20\n"IBM","5/13/2007","4:20pm",50,91.10\n"CAT","9/23/2006","1:30pm",150,83.44\n"MSFT","5/17/2007","10:30am",200,51.23\n"GE","2/1/2006","10:45am",95,40.37\n"MSFT","10/31/2006","12:05pm",50,65.10\n"IBM","7/9/2006","3:15pm",100,70.44\n')),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},">>> portfolio_cost('Data/portfoliodate.csv')\n44671.15\n>>>\n")),Object(r.b)("p",null,"If you did it right, you\u2019ll find that your program still works even\nthough the data file has a completely different column format than\nbefore. That\u2019s cool!"),Object(r.b)("p",null,"The change made here is subtle, but significant.  Instead of\n",Object(r.b)("inlineCode",{parentName:"p"},"portfolio_cost()")," being hardcoded to read a single fixed file format,\nthe new version reads any CSV file and picks the values of interest\nout of it.  As long as the file has the required columns, the code will work."),Object(r.b)("p",null,"Modify the ",Object(r.b)("inlineCode",{parentName:"p"},"report.py")," program you wrote in Section 2.3 so that it uses\nthe same technique to pick out column headers."),Object(r.b)("p",null,"Try running the ",Object(r.b)("inlineCode",{parentName:"p"},"report.py")," program on the ",Object(r.b)("inlineCode",{parentName:"p"},"Data/portfoliodate.csv"),"\nfile and see that it produces the same answer as before."),Object(r.b)("h3",{id:"exercise-217-inverting-a-dictionary"},"Exercise 2.17: Inverting a dictionary"),Object(r.b)("p",null,"A dictionary maps keys to values. For example, a dictionary of stock prices."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},">>> prices = {\n        'GOOG' : 490.1,\n        'AA' : 23.45,\n        'IBM' : 91.1,\n        'MSFT' : 34.23\n    }\n>>>\n")),Object(r.b)("p",null,"If you use the ",Object(r.b)("inlineCode",{parentName:"p"},"items()")," method, you can get ",Object(r.b)("inlineCode",{parentName:"p"},"(key,value)")," pairs:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},">>> prices.items()\ndict_items([('GOOG', 490.1), ('AA', 23.45), ('IBM', 91.1), ('MSFT', 34.23)])\n>>>\n")),Object(r.b)("p",null,"However, what if you wanted to get a list of ",Object(r.b)("inlineCode",{parentName:"p"},"(value, key)")," pairs instead?\n",Object(r.b)("em",{parentName:"p"},"Hint: use ",Object(r.b)("inlineCode",{parentName:"em"},"zip()"),".")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},">>> pricelist = list(zip(prices.values(),prices.keys()))\n>>> pricelist\n[(490.1, 'GOOG'), (23.45, 'AA'), (91.1, 'IBM'), (34.23, 'MSFT')]\n>>>\n")),Object(r.b)("p",null,"Why would you do this? For one, it allows you to perform certain kinds\nof data processing on the dictionary data."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},">>> min(pricelist)\n(23.45, 'AA')\n>>> max(pricelist)\n(490.1, 'GOOG')\n>>> sorted(pricelist)\n[(23.45, 'AA'), (34.23, 'MSFT'), (91.1, 'IBM'), (490.1, 'GOOG')]\n>>>\n")),Object(r.b)("p",null,"This also illustrates an important feature of tuples. When used in\ncomparisons, tuples are compared element-by-element starting with the\nfirst item. Similar to how strings are compared\ncharacter-by-character."),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"zip()")," is often used in situations like this where you need to pair\nup data from different places.  For example, pairing up the column\nnames with column values in order to make a dictionary of named\nvalues."),Object(r.b)("p",null,"Note that ",Object(r.b)("inlineCode",{parentName:"p"},"zip()")," is not limited to pairs. For example, you can use it\nwith any number of input lists:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},">>> a = [1, 2, 3, 4]\n>>> b = ['w', 'x', 'y', 'z']\n>>> c = [0.2, 0.4, 0.6, 0.8]\n>>> list(zip(a, b, c))\n[(1, 'w', 0.2), (2, 'x', 0.4), (3, 'y', 0.6), (4, 'z', 0.8))]\n>>>\n")),Object(r.b)("p",null,"Also, be aware that ",Object(r.b)("inlineCode",{parentName:"p"},"zip()")," stops once the shortest input sequence is exhausted."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},">>> a = [1, 2, 3, 4, 5, 6]\n>>> b = ['x', 'y', 'z']\n>>> list(zip(a,b))\n[(1, 'x'), (2, 'y'), (3, 'z')]\n>>>\n")))}p.isMDXComponent=!0}}]);