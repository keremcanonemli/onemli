(window.webpackJsonp=window.webpackJsonp||[]).push([[115],{187:function(e,n,s){"use strict";s.r(n),s.d(n,"frontMatter",(function(){return o})),s.d(n,"metadata",(function(){return i})),s.d(n,"toc",(function(){return c})),s.d(n,"default",(function(){return d}));var t=s(3),a=s(8),r=(s(0),s(281)),o={id:"inheritance_basics",title:"Inheritance Basics",sidebar_label:"Inheritance Basics",slug:"inheritance_basics",custom_edit_url:null},i={unversionedId:"python/24_oop_inheritance/inheritance_basics",id:"python/24_oop_inheritance/inheritance_basics",isDocsHomePage:!1,title:"Inheritance Basics",description:"Inheritance allows creation of new classes based on existing ones. There are child and parents classes: child class inherits parent class. In inheritance, child class inherits all methods and attributes of parent class.",source:"@site/docs/python/24_oop_inheritance/1_inheritance_basics.md",slug:"/python/24_oop_inheritance/inheritance_basics",permalink:"/tr/docs/python/24_oop_inheritance/inheritance_basics",editUrl:null,version:"current",sidebar_label:"Inheritance Basics",sidebar:"someSidebar",previous:{title:"Tasks",permalink:"/tr/docs/python/23_oop_special_methods/tasks"},next:{title:"Tasks",permalink:"/tr/docs/python/24_oop_inheritance/tasks"}},c=[],l={toc:c};function d(e){var n=e.components,s=Object(a.a)(e,["components"]);return Object(r.b)("wrapper",Object(t.a)({},l,s,{components:n,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Inheritance allows creation of new classes based on existing ones. There are child and parents classes: child class inherits parent class. In inheritance, child class inherits all methods and attributes of parent class."),Object(r.b)("p",null,"Example of ConnectSSH class that performs SSH connection using paramiko:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"import paramiko\nimport time\n\n\nclass ConnectSSH:\n    def __init__(self, ip, username, password):\n        self.ip = ip\n        self.username = username\n        self.password = password\n        self._MAX_READ = 10000\n\n        client = paramiko.SSHClient()\n        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())\n\n        client.connect(\n            hostname=ip,\n            username=username,\n            password=password,\n            look_for_keys=False,\n            allow_agent=False)\n\n        self._ssh = client.invoke_shell()\n        time.sleep(1)\n        self._ssh.recv(self._MAX_READ)\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        self._ssh.close()\n\n    def close(self):\n        self._ssh.close()\n\n    def send_show_command(self, command):\n        self._ssh.send(command + '\\n')\n        time.sleep(2)\n        result = self._ssh.recv(self._MAX_READ).decode('ascii')\n        return result\n\n    def send_config_commands(self, commands):\n        if isinstance(commands, str):\n            commands = [commands]\n        for command in commands:\n            self._ssh.send(command + '\\n')\n            time.sleep(0.5)\n        result = self._ssh.recv(self._MAX_READ).decode('ascii')\n        return result\n")),Object(r.b)("p",null,"This class will be used as the basis for classes that are responsible for connecting to devices of different vendors. For example, CiscoSSH class will be responsible for connecting to Cisco devices and will inherit ConnectSSH class."),Object(r.b)("p",null,"Inheritance syntax:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"class CiscoSSH(ConnectSSH):\n    pass\n")),Object(r.b)("p",null,"After that, all ConnectSSH methods and attributes are available in CiscoSSH class:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"In [3]: r1 = CiscoSSH('192.168.100.1', 'cisco', 'cisco')\n\nIn [4]: r1.ip\nOut[4]: '192.168.100.1'\n\nIn [5]: r1._MAX_READ\nOut[5]: 10000\n\nIn [6]: r1.send_show_command('sh ip int br')\nOut[6]: 'sh ip int br\\r\\nInterface                  IP-Address      OK? Method Status                Protocol\\r\\nEthernet0/0                192.168.100.1   YES NVRAM  up                    up      \\r\\nEthernet0/1                192.168.200.1   YES NVRAM  up                    up      \\r\\nEthernet0/2                19.1.1.1        YES NVRAM  up                    up      \\r\\nEthernet0/3                192.168.230.1   YES NVRAM  up                    up      \\r\\nLoopback0                  4.4.4.4         YES NVRAM  up                    up      \\r\\nLoopback33                 3.3.3.3         YES manual up                    up      \\r\\nLoopback90                 90.1.1.1        YES manual up                    up      \\r\\nR1#'\n\n\n\nIn [7]: r1.send_show_command('enable')\nOut[7]: 'enable\\r\\nPassword: '\n\nIn [8]: r1.send_show_command('cisco')\nOut[8]: '\\r\\nR1#'\n\nIn [9]: r1.send_config_commands(['conf t', 'int loopback 33',\n   ...:                          'ip address 3.3.3.3 255.255.255.255', 'end'])\nOut[9]: 'conf t\\r\\nEnter configuration commands, one per line.  End with CNTL/Z.\\r\\nR1(config)#int loopback 33\\r\\nR1(config-if)#ip address 3.3.3.3 255.255.255.255\\r\\nR1(config-if)#end\\r\\nR1#'\n")),Object(r.b)("p",null,"After inheriting all methods of parent class, child class can:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"leave them unchanged"),Object(r.b)("li",{parentName:"ul"},"rewrite them completely"),Object(r.b)("li",{parentName:"ul"},"supplement method"),Object(r.b)("li",{parentName:"ul"},"add your methods")),Object(r.b)("p",null,"In CiscoSSH class you have to create ",Object(r.b)("inlineCode",{parentName:"p"},"__init__")," method and add parameters to it:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"enable_password")," - enable password"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"disable_paging")," - is responsible for paging turning on/off")),Object(r.b)("p",null,"Method ",Object(r.b)("inlineCode",{parentName:"p"},"__init__")," can be created entirely from scratch but basic SSH connection logic is the same in ConnectSSH and CiscoSSH, so it is better to add necessary parameters and call ",Object(r.b)("inlineCode",{parentName:"p"},"__init__")," method of ConnectSSH class for connection. There are several options for calling parent method, for example, all of these options will call ",Object(r.b)("inlineCode",{parentName:"p"},"send_show_command")," method of parent class from child class CiscoSSH:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"command_result = ConnectSSH.send_show_command(self, command)\ncommand_result = super(CiscoSSH, self).send_show_command(command)\ncommand_result = super().send_show_command(command)\n")),Object(r.b)("p",null,"The first version of ",Object(r.b)("inlineCode",{parentName:"p"},"ConnectSSH.send_show_command")," explicitly specifies the name of parent class - this is the most understandable version for perception, but its disadvantage is that when a parent class name is changed the name will have to be changed in all places where parent class methods were called. This option also has disadvantages when using multiple inheritance. The second and third options are essentially equivalent but the third option is shorter, so we will use it."),Object(r.b)("p",null,"CiscoSSH class with ",Object(r.b)("inlineCode",{parentName:"p"},"__init__")," method:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"class CiscoSSH(ConnectSSH):\n    def __init__(self, ip, username, password, enable_password,\n                 disable_paging=True):\n        super().__init__(ip, username, password)\n        self._ssh.send('enable\\n')\n        self._ssh.send(enable_password + '\\n')\n        if disable_paging:\n            self._ssh.send('terminal length 0\\n')\n        time.sleep(1)\n        self._ssh.recv(self._MAX_READ)\n")),Object(r.b)("p",null,"Method ",Object(r.b)("inlineCode",{parentName:"p"},"__init__")," in CiscoSSH class added ",Object(r.b)("inlineCode",{parentName:"p"},"enable_password")," and ",Object(r.b)("inlineCode",{parentName:"p"},"disable_paging")," parameters and uses them accordingly to enter enable mode and disable paging. Example:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"In [10]: r1 = CiscoSSH('192.168.100.1', 'cisco', 'cisco', 'cisco')\n\nIn [11]: r1.send_show_command('sh clock')\nOut[11]: 'sh clock\\r\\n*11:30:50.280 UTC Mon Aug 5 2019\\r\\nR1#'\n")),Object(r.b)("p",null,"Now when connecting, switch enters enable mode and paging is disabled by default, so you can try to run a long command like sh run."),Object(r.b)("p",null,"Another method that should be further developed is ",Object(r.b)("inlineCode",{parentName:"p"},"send_config_commands")," method: since CiscoSSH class is designed to work with Cisco, you can add switching to configuration mode before commands and exit after."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"class CiscoSSH(ConnectSSH):\n    def __init__(self, ip, username, password, enable_password,\n                 disable_paging=True):\n        super().__init__(ip, username, password)\n        self._ssh.send('enable\\n')\n        self._ssh.send(enable_password + '\\n')\n        if disable_paging:\n            self._ssh.send('terminal length 0\\n')\n        time.sleep(1)\n        self._ssh.recv(self._MAX_READ)\n\n    def config_mode(self):\n        self._ssh.send('conf t\\n')\n        time.sleep(0.5)\n        result = self._ssh.recv(self._MAX_READ).decode('ascii')\n        return result\n\n    def exit_config_mode(self):\n        self._ssh.send('end\\n')\n        time.sleep(0.5)\n        result = self._ssh.recv(self._MAX_READ).decode('ascii')\n        return result\n\n    def send_config_commands(self, commands):\n        result = self.config_mode()\n        result += super().send_config_commands(commands)\n        result += self.exit_config_mode()\n        return result\n")),Object(r.b)("p",null,"Example of ",Object(r.b)("inlineCode",{parentName:"p"},"send_config_commands")," method use:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"In [12]: r1 = CiscoSSH('192.168.100.1', 'cisco', 'cisco', 'cisco')\n\nIn [13]: r1.send_config_commands(['interface loopback 33',\n    ...:                          'ip address 3.3.3.3 255.255.255.255'])\nOut[13]: 'conf t\\r\\nEnter configuration commands, one per line.  End with CNTL/Z.\\r\\nR1(config)#interface loopback 33\\r\\nR1(config-if)#ip address 3.3.3.3 255.255.255.255\\r\\nR1(config-if)#end\\r\\nR1#'\n")))}d.isMDXComponent=!0},281:function(e,n,s){"use strict";s.d(n,"a",(function(){return p})),s.d(n,"b",(function(){return b}));var t=s(0),a=s.n(t);function r(e,n,s){return n in e?Object.defineProperty(e,n,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[n]=s,e}function o(e,n){var s=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),s.push.apply(s,t)}return s}function i(e){for(var n=1;n<arguments.length;n++){var s=null!=arguments[n]?arguments[n]:{};n%2?o(Object(s),!0).forEach((function(n){r(e,n,s[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(s)):o(Object(s)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(s,n))}))}return e}function c(e,n){if(null==e)return{};var s,t,a=function(e,n){if(null==e)return{};var s,t,a={},r=Object.keys(e);for(t=0;t<r.length;t++)s=r[t],n.indexOf(s)>=0||(a[s]=e[s]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)s=r[t],n.indexOf(s)>=0||Object.prototype.propertyIsEnumerable.call(e,s)&&(a[s]=e[s])}return a}var l=a.a.createContext({}),d=function(e){var n=a.a.useContext(l),s=n;return e&&(s="function"==typeof e?e(n):i(i({},n),e)),s},p=function(e){var n=d(e.components);return a.a.createElement(l.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},u=a.a.forwardRef((function(e,n){var s=e.components,t=e.mdxType,r=e.originalType,o=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=d(s),u=t,b=p["".concat(o,".").concat(u)]||p[u]||m[u]||r;return s?a.a.createElement(b,i(i({ref:n},l),{},{components:s})):a.a.createElement(b,i({ref:n},l))}));function b(e,n){var s=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var r=s.length,o=new Array(r);o[0]=u;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:t,o[1]=i;for(var l=2;l<r;l++)o[l]=s[l];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,s)}u.displayName="MDXCreateElement"}}]);