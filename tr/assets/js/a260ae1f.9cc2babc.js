(window.webpackJsonp=window.webpackJsonp||[]).push([[139],{211:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return p}));var a=n(3),o=n(8),r=(n(0),n(281)),s={id:"tasks",title:"Tasks",sidebar_label:"Tasks",slug:"tasks",custom_edit_url:null},c={unversionedId:"python/oop_basics/tasks",id:"python/oop_basics/tasks",isDocsHomePage:!1,title:"Tasks",description:"All tasks and additional files can be downloaded from repository.",source:"@site/docs/python/oop_basics/9_tasks.md",slug:"/python/oop_basics/tasks",permalink:"/tr/docs/python/oop_basics/tasks",editUrl:null,version:"current",sidebar_label:"Tasks",sidebar:"someSidebar",previous:{title:"Class Variables",permalink:"/tr/docs/python/oop_basics/class_variables"},next:{title:"Special Methods",permalink:"/tr/docs/python/oop_special_methods/special_methods"}},l=[{value:"Task 22.1",id:"task-221",children:[]},{value:"Task 22.1a",id:"task-221a",children:[]},{value:"Task 22.1b",id:"task-221b",children:[]},{value:"Task 22.1c",id:"task-221c",children:[]},{value:"Task 22.1d",id:"task-221d",children:[]},{value:"Task 22.2",id:"task-222",children:[]},{value:"Task 22.2a",id:"task-222a",children:[]},{value:"Task 22.2b",id:"task-222b",children:[]},{value:"Task 22.2c",id:"task-222c",children:[]}],i={toc:l};function p(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},i,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"All tasks and additional files can be downloaded from ",Object(r.b)("a",{parentName:"p",href:"https://github.com/natenka/pyneng-examples-exercises-en/"},"repository"),"."),Object(r.b)("p",null,"Warning"),Object(r.b)("p",null,"Starting from section \u201c4. Data types in Python\u201d there are automated tests for testing tasks. They help to check whether everything matches the task, and also give feedback on what does not correspond to the task. As a rule, after the first period of adaptation to tests, it becomes easier to do tasks with tests. Testing is done using the pyneng utility. ",Object(r.b)("a",{parentName:"p",href:"https://pyneng.readthedocs.io/en/latest/book/additional_info/pyneng.html#additional-info-pyneng"},"Learn more about how to work with the pyneng utility"),"."),Object(r.b)("h2",{id:"task-221"},"Task 22.1"),Object(r.b)("p",null,"Create a Topology class that represents the topology of the network."),Object(r.b)("p",null,"When creating an instance of a class, a dictionary that describes the topology is passed as an argument. The dictionary may contain \u201cduplicate\u201d connections. \u201cDuplicate\u201d connections are a situation when there are two connections in the dictionary:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},'("R1", "Eth0/0"): ("SW1", "Eth0/1")\n("SW1", "Eth0/1"): ("R1", "Eth0/0")\n')),Object(r.b)("p",null,"The task is to leave only one of these links in the final dictionary, no matter which one."),Object(r.b)("p",null,"In each instance, a topology instance variable must be created, which contains the topology dictionary, but already without \u201cduplicates\u201d. The topology instance variable should contain a dict without \u201cduplicates\u201d immediately after instance creation."),Object(r.b)("p",null,"An example of creating an instance of a class:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"In [2]: top = Topology(topology_example)\n")),Object(r.b)("p",null,"After that, the topology variable should be available:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"In [3]: top.topology\nOut[3]:\n{('R1', 'Eth0/0'): ('SW1', 'Eth0/1'),\n ('R2', 'Eth0/0'): ('SW1', 'Eth0/2'),\n ('R2', 'Eth0/1'): ('SW2', 'Eth0/11'),\n ('R3', 'Eth0/0'): ('SW1', 'Eth0/3'),\n ('R3', 'Eth0/1'): ('R4', 'Eth0/0'),\n ('R3', 'Eth0/2'): ('R5', 'Eth0/0')}\ntopology_example = {('R1', 'Eth0/0'): ('SW1', 'Eth0/1'),\n                    ('R2', 'Eth0/0'): ('SW1', 'Eth0/2'),\n                    ('R2', 'Eth0/1'): ('SW2', 'Eth0/11'),\n                    ('R3', 'Eth0/0'): ('SW1', 'Eth0/3'),\n                    ('R3', 'Eth0/1'): ('R4', 'Eth0/0'),\n                    ('R3', 'Eth0/2'): ('R5', 'Eth0/0'),\n                    ('SW1', 'Eth0/1'): ('R1', 'Eth0/0'),\n                    ('SW1', 'Eth0/2'): ('R2', 'Eth0/0'),\n                    ('SW1', 'Eth0/3'): ('R3', 'Eth0/0')}\n")),Object(r.b)("h2",{id:"task-221a"},"Task 22.1a"),Object(r.b)("p",null,"Copy the Topology class from task 22.1 and modify it."),Object(r.b)("p",null,"Transfer the functionality of removing \u201cduplicates\u201d to the _normalize method. In this case, the ",Object(r.b)("strong",{parentName:"p"},"init")," method should look like this:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"class Topology:\n    def __init__(self, topology_dict):\n        self.topology = self._normalize(topology_dict)\n")),Object(r.b)("h2",{id:"task-221b"},"Task 22.1b"),Object(r.b)("p",null,"Copy the Topology class from either task 22.1a or 22.1 and modify it."),Object(r.b)("p",null,"Add a delete_link method that deletes the specified connection. The method should also remove the \u201creverse\u201d connection, if any (an example is given below)."),Object(r.b)("p",null,"If there is no such link, the message \u201cThere is no such link\u201d should be printed."),Object(r.b)("p",null,"Topology creation:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"In [7]: t = Topology(topology_example)\n\nIn [8]: t.topology\nOut[8]:\n{('R1', 'Eth0/0'): ('SW1', 'Eth0/1'),\n ('R2', 'Eth0/0'): ('SW1', 'Eth0/2'),\n ('R2', 'Eth0/1'): ('SW2', 'Eth0/11'),\n ('R3', 'Eth0/0'): ('SW1', 'Eth0/3'),\n ('R3', 'Eth0/1'): ('R4', 'Eth0/0'),\n ('R3', 'Eth0/2'): ('R5', 'Eth0/0')}\n")),Object(r.b)("p",null,"Removing a link:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"In [9]: t.delete_link(('R3', 'Eth0/1'), ('R4', 'Eth0/0'))\n\nIn [10]: t.topology\nOut[10]:\n{('R1', 'Eth0/0'): ('SW1', 'Eth0/1'),\n ('R2', 'Eth0/0'): ('SW1', 'Eth0/2'),\n ('R2', 'Eth0/1'): ('SW2', 'Eth0/11'),\n ('R3', 'Eth0/0'): ('SW1', 'Eth0/3'),\n ('R3', 'Eth0/2'): ('R5', 'Eth0/0')}\n")),Object(r.b)("p",null,"Deleting the \u201creverse\u201d link: the dictionary contains an entry ",Object(r.b)("inlineCode",{parentName:"p"},"('R3', 'Eth0/2'): ('R5', 'Eth0/0')"),", but calling the delete_link method specifying the key and value in reverse order ",Object(r.b)("inlineCode",{parentName:"p"},"('R5', 'Eth0/0'): ('R3', 'Eth0/2')")," should delete the connection:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"In [11]: t.delete_link(('R5', 'Eth0/0'), ('R3', 'Eth0/2'))\n\nIn [12]: t.topology\nOut[12]:\n{('R1', 'Eth0/0'): ('SW1', 'Eth0/1'),\n ('R2', 'Eth0/0'): ('SW1', 'Eth0/2'),\n ('R2', 'Eth0/1'): ('SW2', 'Eth0/11'),\n ('R3', 'Eth0/0'): ('SW1', 'Eth0/3')}\n")),Object(r.b)("p",null,"If there is no such connection, the following message is printed:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"In [13]: t.delete_link(('R5', 'Eth0/0'), ('R3', 'Eth0/2'))\nThere is no such link\n")),Object(r.b)("h2",{id:"task-221c"},"Task 22.1c"),Object(r.b)("p",null,"Copy the Topology class from task 22.1b and modify it."),Object(r.b)("p",null,"Add a delete_node method that deletes all connections to the specified device. If there is no such device, the message \u201cThere is no such device\u201d is printed."),Object(r.b)("p",null,"Topology creation:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"In [1]: t = Topology(topology_example)\n\nIn [2]: t.topology\nOut[2]:\n{('R1', 'Eth0/0'): ('SW1', 'Eth0/1'),\n ('R2', 'Eth0/0'): ('SW1', 'Eth0/2'),\n ('R2', 'Eth0/1'): ('SW2', 'Eth0/11'),\n ('R3', 'Eth0/0'): ('SW1', 'Eth0/3'),\n ('R3', 'Eth0/1'): ('R4', 'Eth0/0'),\n ('R3', 'Eth0/2'): ('R5', 'Eth0/0')}\n")),Object(r.b)("p",null,"Removing a device:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"In [3]: t.delete_node('SW1')\n\nIn [4]: t.topology\nOut[4]:\n{('R2', 'Eth0/1'): ('SW2', 'Eth0/11'),\n ('R3', 'Eth0/1'): ('R4', 'Eth0/0'),\n ('R3', 'Eth0/2'): ('R5', 'Eth0/0')}\n")),Object(r.b)("p",null,"If there is no such device, the following message is printed:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"In [5]: t.delete_node('SW1')\nThere is no such device\n")),Object(r.b)("h2",{id:"task-221d"},"Task 22.1d"),Object(r.b)("p",null,"Copy the Topology class from task 22.1c and modify it."),Object(r.b)("p",null,"Add the add_link method, which adds the specified link if it is not already in the topology. If the connection exists, print the message \u201cSuch a connection already exists\u201d, If one of the sides is in the topology, display the message \u201cA link to one of the ports exists\u201d."),Object(r.b)("p",null,"Topology creation:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"In [7]: t = Topology(topology_example)\n\nIn [8]: t.topology\nOut[8]:\n{('R1', 'Eth0/0'): ('SW1', 'Eth0/1'),\n ('R2', 'Eth0/0'): ('SW1', 'Eth0/2'),\n ('R2', 'Eth0/1'): ('SW2', 'Eth0/11'),\n ('R3', 'Eth0/0'): ('SW1', 'Eth0/3'),\n ('R3', 'Eth0/1'): ('R4', 'Eth0/0'),\n ('R3', 'Eth0/2'): ('R5', 'Eth0/0')}\n\nIn [9]: t.add_link(('R1', 'Eth0/4'), ('R7', 'Eth0/0'))\n\nIn [10]: t.topology\nOut[10]:\n{('R1', 'Eth0/0'): ('SW1', 'Eth0/1'),\n ('R1', 'Eth0/4'): ('R7', 'Eth0/0'),\n ('R2', 'Eth0/0'): ('SW1', 'Eth0/2'),\n ('R2', 'Eth0/1'): ('SW2', 'Eth0/11'),\n ('R3', 'Eth0/0'): ('SW1', 'Eth0/3'),\n ('R3', 'Eth0/1'): ('R4', 'Eth0/0'),\n ('R3', 'Eth0/2'): ('R5', 'Eth0/0')}\n\nIn [11]: t.add_link(('R1', 'Eth0/4'), ('R7', 'Eth0/0'))\nSuch a connection already exists\n\nIn [12]: t.add_link(('R1', 'Eth0/4'), ('R7', 'Eth0/5'))\nA link to one of the ports exists\n")),Object(r.b)("h2",{id:"task-222"},"Task 22.2"),Object(r.b)("p",null,"Create a CiscoTelnet class that connects via Telnet to Cisco equipment."),Object(r.b)("p",null,"When instantiating the class, a Telnet connection should be created, as well as the transition to enable mode. The class must use the telnetlib module to connect via Telnet."),Object(r.b)("p",null,"The CiscoTelnet class, in addition to ",Object(r.b)("strong",{parentName:"p"},"init"),", must have at least two methods:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"_write_line - takes a string as an argument and sends the string converted to bytes to the hardware and adds a line end character at the end. The _write_line method must be used inside the class."),Object(r.b)("li",{parentName:"ul"},"send_show_command - takes the show command as an argument and returns the output received from the device")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"init")," method parameters:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"ip - IP address"),Object(r.b)("li",{parentName:"ul"},"username - username"),Object(r.b)("li",{parentName:"ul"},"password - password"),Object(r.b)("li",{parentName:"ul"},"secret - enable password")),Object(r.b)("p",null,"An example of creating an instance of a class:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"In [2]: from task_22_2 import CiscoTelnet\n\nIn [3]: r1_params = {\n   ...:     'ip': '192.168.100.1',\n   ...:     'username': 'cisco',\n   ...:     'password': 'cisco',\n   ...:     'secret': 'cisco'}\n   ...:\n\nIn [4]: r1 = CiscoTelnet(**r1_params)\n\nIn [5]: r1.send_show_command(\"sh ip int br\")\nOut[5]: 'sh ip int br\\r\\nInterface                  IP-Address      OK? Method Status                Protocol\\r\\nEthernet0/0                192.168.100.1   YES NVRAM  up                    up      \\r\\nEthernet0/1                192.168.200.1   YES NVRAM  up                    up      \\r\\nEthernet0/2                unassigned      YES manual up                    up      \\r\\nEthernet0/3                192.168.130.1   YES NVRAM  up                    up      \\r\\nR1#'\n")),Object(r.b)("p",null,"Note"),Object(r.b)("p",null,"The _write_line method is needed in order to be able to shorten a line: ",Object(r.b)("inlineCode",{parentName:"p"},'self.telnet.write(line.encode("ascii") + b"\\n")')),Object(r.b)("p",null,"to this: ",Object(r.b)("inlineCode",{parentName:"p"},"self._write_line(line)")),Object(r.b)("p",null,"He shouldn\u2019t do anything else."),Object(r.b)("h2",{id:"task-222a"},"Task 22.2a"),Object(r.b)("p",null,"Copy the CiscoTelnet class from job 22.2 and modify the send_show_command method by adding three parameters:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"parse - controls what will be returned: normal command output or a list of dicts received after parsing command output using TextFSM. If parse=True, a list of dicts should be returned, and parse=False normal output. The default is True."),Object(r.b)("li",{parentName:"ul"},"templates - path to the directory with templates. The default is \u201ctemplates\u201d"),Object(r.b)("li",{parentName:"ul"},"index is the name of the file where the correspondence between commands and templates is stored. The default is \u201cindex\u201d")),Object(r.b)("p",null,"An example of creating an instance of a class:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"In [1]: r1_params = {\n   ...:     'ip': '192.168.100.1',\n   ...:     'username': 'cisco',\n   ...:     'password': 'cisco',\n   ...:     'secret': 'cisco'}\n\nIn [2]: from task_22_2a import CiscoTelnet\n\nIn [3]: r1 = CiscoTelnet(**r1_params)\n")),Object(r.b)("p",null,"Using the send_show_command method:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"In [4]: r1.send_show_command(\"sh ip int br\", parse=True)\nOut[4]:\n[{'intf': 'Ethernet0/0',\n  'address': '192.168.100.1',\n  'status': 'up',\n  'protocol': 'up'},\n {'intf': 'Ethernet0/1',\n  'address': '192.168.200.1',\n  'status': 'up',\n  'protocol': 'up'},\n {'intf': 'Ethernet0/2',\n  'address': '192.168.130.1',\n  'status': 'up',\n  'protocol': 'up'}]\n\nIn [5]: r1.send_show_command(\"sh ip int br\", parse=False)\nOut[5]: 'sh ip int br\\r\\nInterface                  IP-Address      OK? Method Status\nProtocol\\r\\nEthernet0/0                192.168.100.1   YES NVRAM  up\nup      \\r\\nEthernet0/1                192.168.200.1   YES NVRAM  up...'\n")),Object(r.b)("h2",{id:"task-222b"},"Task 22.2b"),Object(r.b)("p",null,"Copy the CiscoTelnet class from task 22.2a and add the send_config_commands method."),Object(r.b)("p",null,"The send_config_commands method must be able to send one configuration mode command and a list of commands. The method should return output similar to the send_config_set method of netmiko (example output below)."),Object(r.b)("p",null,"An example of creating an instance of a class:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"In [1]: from task_22_2b import CiscoTelnet\n\nIn [2]: r1_params = {\n   ...:     'ip': '192.168.100.1',\n   ...:     'username': 'cisco',\n   ...:     'password': 'cisco',\n   ...:     'secret': 'cisco'}\n\nIn [3]: r1 = CiscoTelnet(**r1_params)\n")),Object(r.b)("p",null,"Using the send_config_commands method:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"In [5]: r1.send_config_commands('logging 10.1.1.1')\nOut[5]: 'conf t\\r\\nEnter configuration commands, one per line.  End with CNTL/Z.\\r\\nR1(config)#logging 10.1.1.1\\r\\nR1(config)#end\\r\\nR1#'\n\nIn [6]: r1.send_config_commands(['interface loop55', 'ip address 5.5.5.5 255.255.255.255'])\nOut[6]: 'conf t\\r\\nEnter configuration commands, one per line.  End with CNTL/Z.\\r\\nR1(config)#interface loop55\\r\\nR1(config-if)#ip address 5.5.5.5 255.255.255.255\\r\\nR1(config-if)#end\\r\\nR1#'\n")),Object(r.b)("h2",{id:"task-222c"},"Task 22.2c"),Object(r.b)("p",null,"Copy the CiscoTelnet class from task 22.2b and modify the send_config_commands method to check for errors."),Object(r.b)("p",null,"The send_config_commands method must have an additional strict parameter:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"strict=True means that when an error is encountered, a ValueError must be raised (default)"),Object(r.b)("li",{parentName:"ul"},"strict=False means that when an error is found, you only need to print the error message to the stdout")),Object(r.b)("p",null,"The method should return output similar to the send_config_set method of netmiko (example output below). The text of the exception and error in the example below."),Object(r.b)("p",null,"An example of creating an instance of a class:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"In [1]: from task_22_2c import CiscoTelnet\n\nIn [2]: r1_params = {\n   ...:     'ip': '192.168.100.1',\n   ...:     'username': 'cisco',\n   ...:     'password': 'cisco',\n   ...:     'secret': 'cisco'}\n\nIn [3]: r1 = CiscoTelnet(**r1_params)\n\nIn [4]: commands_with_errors = ['logging 0255.255.1', 'logging', 'a']\nIn [5]: correct_commands = ['logging buffered 20010', 'ip http server']\nIn [6]: commands = commands_with_errors+correct_commands\n")),Object(r.b)("p",null,"Using the send_config_commands method:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},'In [7]: print(r1.send_config_commands(commands, strict=False))\nWhen executing the command "logging 0255.255.1" on device 192.168.100.1, an error occurred -> Invalid input detected at \'^\' marker.\nWhen executing the command "logging" on device 192.168.100.1, an error occurred -> Incomplete command.\nWhen executing the command "a" on device 192.168.100.1, an error occurred -> Ambiguous command:  "a"\nconf t\nEnter configuration commands, one per line.  End with CNTL/Z.\nR1(config)#logging 0255.255.1\n                   ^\n% Invalid input detected at \'^\' marker.\n\nR1(config)#logging\n% Incomplete command.\n\nR1(config)#a\n% Ambiguous command:  "a"\nR1(config)#logging buffered 20010\nR1(config)#ip http server\nR1(config)#end\nR1#\n\nIn [8]: print(r1.send_config_commands(commands, strict=True))\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\n<ipython-input-8-0abc1ed8602e> in <module>\n----\x3e 1 print(r1.send_config_commands(commands, strict=True))\n\n...\n\nValueError: When executing the command "logging 0255.255.1" on device 192.168.100.1, an error occurred -> Invalid input detected at \'^\' marker.\n')))}p.isMDXComponent=!0},281:function(e,t,n){"use strict";n.d(t,"a",(function(){return h})),n.d(t,"b",(function(){return u}));var a=n(0),o=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=o.a.createContext({}),p=function(e){var t=o.a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},h=function(e){var t=p(e.components);return o.a.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},b=o.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,i=l(e,["components","mdxType","originalType","parentName"]),h=p(n),b=a,u=h["".concat(s,".").concat(b)]||h[b]||d[b]||r;return n?o.a.createElement(u,c(c({ref:t},i),{},{components:n})):o.a.createElement(u,c({ref:t},i))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,s=new Array(r);s[0]=b;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,s[1]=c;for(var i=2;i<r;i++)s[i]=n[i];return o.a.createElement.apply(null,s)}return o.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);