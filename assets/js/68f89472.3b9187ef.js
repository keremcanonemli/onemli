(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{86:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return c})),t.d(n,"metadata",(function(){return s})),t.d(n,"toc",(function(){return d})),t.d(n,"default",(function(){return u}));var i=t(3),o=t(7),a=(t(0),t(110)),c={id:"netmiko2",title:"Configure the Devices with Netmiko",sidebar_label:"Configure Devices",slug:"/configure-the-devices-with-netmiko"},s={unversionedId:"netmiko2",id:"netmiko2",isDocsHomePage:!1,title:"Configure the Devices with Netmiko",description:"In the previous post, we connected to multiple hosts with different variations. In this post, we will make configurations using methods provided by netmiko.",source:"@site/docs/Configure_the_Devices_with_Netmiko.md",slug:"/configure-the-devices-with-netmiko",permalink:"/docs/configure-the-devices-with-netmiko",editUrl:"https://github.com/keremcanonemli/onemli/docs/Configure_the_Devices_with_Netmiko.md",version:"current",sidebar_label:"Configure Devices",sidebar:"someSidebar",previous:{title:"Introducing Network Automation with Netmiko",permalink:"/docs/introducing-netmiko"},next:{title:"Powered by MDX",permalink:"/docs/mdx"}},d=[{value:"Device Definition",id:"device-definition",children:[]},{value:"send_config_set() Method",id:"send_config_set-method",children:[{value:"Send Configuration Commands Line by Line",id:"send-configuration-commands-line-by-line",children:[]},{value:"Make Configuration Commands Iterable",id:"make-configuration-commands-iterable",children:[]},{value:"Send Iterable Commands to Device and Print What it Sends",id:"send-iterable-commands-to-device-and-print-what-it-sends",children:[]},{value:"Verify Commands Executed Successfully",id:"verify-commands-executed-successfully",children:[]}]},{value:"send_config_from_file() Method",id:"send_config_from_file-method",children:[{value:"Create a simple configuration file (e.g reset_loopback.txt)",id:"create-a-simple-configuration-file-eg-reset_loopbacktxt",children:[]},{value:"Verify The Interface Informations",id:"verify-the-interface-informations",children:[]},{value:"Send Configurations From File",id:"send-configurations-from-file",children:[]},{value:"Verify Commands Executed Successfully",id:"verify-commands-executed-successfully-1",children:[]}]}],r={toc:d};function u(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(i.a)({},r,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("p",null,"In the ",Object(a.b)("a",{parentName:"p",href:"https://onem.li/docs/introducing-netmiko"},"previous post"),", we connected to multiple hosts with different variations. In this post, we will make configurations using methods provided by netmiko."),Object(a.b)("h3",{id:"device-definition"},"Device Definition"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"from netmiko import ConnectHandler\n\ndevice= { \n        'device_type': 'cisco_ios', \n        'host': '10.0.191.10', \n        'username': 'admin', \n        'password': 'C1SC0..', \n        } \n\nwith ConnectHandler(**device) as connection:\n       ...\n")),Object(a.b)("h2",{id:"send_config_set-method"},"send_config_set() Method"),Object(a.b)("p",null,"If we want to send config to the device we need a special method and this is : ",Object(a.b)("inlineCode",{parentName:"p"},"send_config_set()."),"Set is the key point in this method."),Object(a.b)("p",null,"Set meaning, you can send one configuration command, or if you want you can send more than one configuration command. As you might guess config commands are iterable and executed one by one with the ",Object(a.b)("inlineCode",{parentName:"p"},"send_config_set()")," method. Another key point is ",Object(a.b)("inlineCode",{parentName:"p"},"send_config_set()")," will automatically enter and exit configuration mode."),Object(a.b)("h3",{id:"send-configuration-commands-line-by-line"},"Send Configuration Commands Line by Line"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},'#These commands are acceptable but not practical\n\nconnection.send_config_set("interface lo99")\nconnection.send_config_set("ip address 99.99.99.99 255.255.255.255")\nconnection.send_config_set("no shutdown")\n')),Object(a.b)("h3",{id:"make-configuration-commands-iterable"},"Make Configuration Commands Iterable"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},'configuration = ["interface lo99", "ip address 99.99.99.99 255.255.255.255", "no shutdown"]\n')),Object(a.b)("h3",{id:"send-iterable-commands-to-device-and-print-what-it-sends"},"Send Iterable Commands to Device and Print What it Sends"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"print(connection.send_config_set(configuration))\n")),Object(a.b)("h4",{id:"output"},"Output"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-bash"},"configure terminal\nEnter configuration commands, one per line.  End with CNTL/Z.\nRTR(config)#interface lo99\nRTR(config-if)#ip address 99.99.99.99 255.255.255.255\nRTR(config-if)#no shutdown\nRTR(config-if)#end\nRTR#\n")),Object(a.b)("h3",{id:"verify-commands-executed-successfully"},"Verify Commands Executed Successfully"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"print(connection.send_config_set(configuration))\n")),Object(a.b)("h4",{id:"output-1"},"Output"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-java"},"Building configuration...\n\nCurrent configuration : 68 bytes\n!\ninterface Loopback99\n ip address 99.99.99.99 255.255.255.255\nend\n")),Object(a.b)("h2",{id:"send_config_from_file-method"},"send_config_from_file() Method"),Object(a.b)("p",null,"If we want to send config to the device from a file, as you might guess we will use this method:",Object(a.b)("inlineCode",{parentName:"p"},"send_config_from_file()"),". The method reads and processes the file line by line. This command automatically enters and exits configuration mode."),Object(a.b)("h3",{id:"create-a-simple-configuration-file-eg-reset_loopbacktxt"},"Create a simple configuration file (e.g reset_loopback.txt)"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-markdown"},"no interface loopback99\n")),Object(a.b)("h3",{id:"verify-the-interface-informations"},"Verify The Interface Informations"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},'print(connection.send_command("show ip interface brief"))\n')),Object(a.b)("h4",{id:"output-2"},"Output"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"Interface              IP-Address      OK? Method Status                Protocol\nGigabitEthernet0/0     unassigned      YES unset  up                    up      \nGigabitEthernet0/1     unassigned      YES unset  up                    up      \nGigabitEthernet0/2     unassigned      YES unset  up                    up      \nGigabitEthernet0/3     unassigned      YES unset  up                    up      \nGigabitEthernet1/0     unassigned      YES unset  up                    up      \nGigabitEthernet1/1     unassigned      YES unset  up                    up      \nGigabitEthernet1/2     unassigned      YES unset  up                    up      \nGigabitEthernet1/3     unassigned      YES unset  up                    up      \nLoopback99             99.99.99.99     YES manual up                    up      \nVlan1                  10.0.190.10     YES NVRAM  up                    up\n")),Object(a.b)("h3",{id:"send-configurations-from-file"},"Send Configurations From File"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},'connection.send_config_from_file("reset_loopback.txt")\n')),Object(a.b)("h3",{id:"verify-commands-executed-successfully-1"},"Verify Commands Executed Successfully"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},'print(connection.send_command("show ip interface brief"))\n')),Object(a.b)("h4",{id:"output-3"},"Output"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"}," Interface              IP-Address      OK? Method Status                Protocol\nGigabitEthernet0/0     unassigned      YES unset  up                    up      \nGigabitEthernet0/1     unassigned      YES unset  up                    up      \nGigabitEthernet0/2     unassigned      YES unset  up                    up      \nGigabitEthernet0/3     unassigned      YES unset  up                    up      \nGigabitEthernet1/0     unassigned      YES unset  up                    up      \nGigabitEthernet1/1     unassigned      YES unset  up                    up      \nGigabitEthernet1/2     unassigned      YES unset  up                    up      \nGigabitEthernet1/3     unassigned      YES unset  up                    up      \nVlan1                  10.0.190.10     YES NVRAM  up                    up \n")))}u.isMDXComponent=!0}}]);