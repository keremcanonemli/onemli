(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{124:function(t,e,n){"use strict";n.r(e),n.d(e,"frontMatter",(function(){return u})),n.d(e,"metadata",(function(){return o})),n.d(e,"toc",(function(){return p})),n.d(e,"default",(function(){return c}));var a=n(3),r=n(8),l=(n(0),n(280)),u={id:"tabulate",title:"Tabulate",sidebar_label:"12.4 Tabulate",slug:"tabulate",custom_edit_url:null},o={unversionedId:"python/useful_modules/tabulate",id:"python/useful_modules/tabulate",isDocsHomePage:!1,title:"Tabulate",description:"tabulate is a module that allows you to display table data beautifully. It is not part of standard Python library, so tabulate needs to be installed:",source:"@site/docs/python/useful_modules/4_tabulate.md",slug:"/python/useful_modules/tabulate",permalink:"/tr/docs/python/useful_modules/tabulate",editUrl:null,version:"current",sidebar_label:"12.4 Tabulate",sidebar:"someSidebar",previous:{title:"IPaddress",permalink:"/tr/docs/python/useful_modules/ipaddress"},next:{title:"Pprint",permalink:"/tr/docs/python/useful_modules/pprint"}},p=[{value:"headers",id:"headers",children:[]},{value:"Table style",id:"table-style",children:[]},{value:"Alignment of columns",id:"alignment-of-columns",children:[]},{value:"Additional material",id:"additional-material",children:[]}],s={toc:p};function c(t){var e=t.components,n=Object(r.a)(t,["components"]);return Object(l.b)("wrapper",Object(a.a)({},s,n,{components:e,mdxType:"MDXLayout"}),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"tabulate")," is a module that allows you to display table data beautifully. It is not part of standard Python library, so ",Object(l.b)("inlineCode",{parentName:"p"},"tabulate")," needs to be installed:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"pip install tabulate\n")),Object(l.b)("p",null,"Module supports such tabular data types as:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"list of lists (in general case - iterable of iterables)"),Object(l.b)("li",{parentName:"ul"},"dictionary list (or any other iterable object with dictionaries). Keys are used as column names"),Object(l.b)("li",{parentName:"ul"},"dictionary with iterable objects. Keys are used as column names")),Object(l.b)("p",null,"Function tabulate() is used to generate table:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"In [1]: from tabulate import tabulate\n\nIn [2]: sh_ip_int_br = [('FastEthernet0/0', '15.0.15.1', 'up', 'up'),\n   ...:  ('FastEthernet0/1', '10.0.12.1', 'up', 'up'),\n   ...:  ('FastEthernet0/2', '10.0.13.1', 'up', 'up'),\n   ...:  ('Loopback0', '10.1.1.1', 'up', 'up'),\n   ...:  ('Loopback100', '100.0.0.1', 'up', 'up')]\n   ...:\n\nIn [4]: print(tabulate(sh_ip_int_br))\n---------------  ---------  --  --\nFastEthernet0/0  15.0.15.1  up  up\nFastEthernet0/1  10.0.12.1  up  up\nFastEthernet0/2  10.0.13.1  up  up\nLoopback0        10.1.1.1   up  up\nLoopback100      100.0.0.1  up  up\n---------------  ---------  --  --\n")),Object(l.b)("h2",{id:"headers"},"headers"),Object(l.b)("p",null,"Parameter ",Object(l.b)("strong",{parentName:"p"},"headers")," allows you to pass an additional argument that specifies column names:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"In [8]: columns = ['Interface', 'IP', 'Status', 'Protocol']\n\nIn [9]: print(tabulate(sh_ip_int_br, headers=columns))\nInterface        IP         Status    Protocol\n---------------  ---------  --------  ----------\nFastEthernet0/0  15.0.15.1  up        up\nFastEthernet0/1  10.0.12.1  up        up\nFastEthernet0/2  10.0.13.1  up        up\nLoopback0        10.1.1.1   up        up\nLoopback100      100.0.0.1  up        up\n")),Object(l.b)("p",null,"Quite often, the first data set is headers. Then it is enough to specify headers equal to \u201cfirstrow\u201d:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"In [18]: data\nOut[18]:\n[('Interface', 'IP', 'Status', 'Protocol'),\n ('FastEthernet0/0', '15.0.15.1', 'up', 'up'),\n ('FastEthernet0/1', '10.0.12.1', 'up', 'up'),\n ('FastEthernet0/2', '10.0.13.1', 'up', 'up'),\n ('Loopback0', '10.1.1.1', 'up', 'up'),\n ('Loopback100', '100.0.0.1', 'up', 'up')]\n\nIn [20]: print(tabulate(data, headers='firstrow'))\nInterface        IP         Status    Protocol\n---------------  ---------  --------  ----------\nFastEthernet0/0  15.0.15.1  up        up\nFastEthernet0/1  10.0.12.1  up        up\nFastEthernet0/2  10.0.13.1  up        up\nLoopback0        10.1.1.1   up        up\nLoopback100      100.0.0.1  up        up\n")),Object(l.b)("p",null,"If data is in the form of a list of dictionaries, you should specify headers equal to \u201ckeys\u201d:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"In [22]: list_of_dict\nOut[22]:\n[{'IP': '15.0.15.1',\n  'Interface': 'FastEthernet0/0',\n  'Protocol': 'up',\n  'Status': 'up'},\n {'IP': '10.0.12.1',\n  'Interface': 'FastEthernet0/1',\n  'Protocol': 'up',\n  'Status': 'up'},\n {'IP': '10.0.13.1',\n  'Interface': 'FastEthernet0/2',\n  'Protocol': 'up',\n  'Status': 'up'},\n {'IP': '10.1.1.1',\n  'Interface': 'Loopback0',\n  'Protocol': 'up',\n  'Status': 'up'},\n {'IP': '100.0.0.1',\n  'Interface': 'Loopback100',\n  'Protocol': 'up',\n  'Status': 'up'}]\n\nIn [23]: print(tabulate(list_of_dict, headers='keys'))\nInterface        IP         Status    Protocol\n---------------  ---------  --------  ----------\nFastEthernet0/0  15.0.15.1  up        up\nFastEthernet0/1  10.0.12.1  up        up\nFastEthernet0/2  10.0.13.1  up        up\nLoopback0        10.1.1.1   up        up\nLoopback100      100.0.0.1  up        up\n")),Object(l.b)("p",null,"Dict with lists in values:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},'In [6]: vlans = {"sw1": [10, 20, 30, 40], "sw2": [1, 2, 10], "sw3": [1, 2, 3, 4, 5, 10, 11, 12]}\n\nIn [7]: print(tabulate(vlans, headers="keys"))\n  sw1    sw2    sw3\n-----  -----  -----\n   10      1      1\n   20      2      2\n   30     10      3\n   40             4\n                  5\n                 10\n                 11\n                 12\n')),Object(l.b)("h2",{id:"table-style"},"Table style"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"tabulate")," supports different table styles."),Object(l.b)("p",null,"Table in Grid format:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"In [24]: print(tabulate(list_of_dict, headers='keys', tablefmt=\"grid\"))\n+-----------------+-----------+----------+------------+\n| Interface       | IP        | Status   | Protocol   |\n+=================+===========+==========+============+\n| FastEthernet0/0 | 15.0.15.1 | up       | up         |\n+-----------------+-----------+----------+------------+\n| FastEthernet0/1 | 10.0.12.1 | up       | up         |\n+-----------------+-----------+----------+------------+\n| FastEthernet0/2 | 10.0.13.1 | up       | up         |\n+-----------------+-----------+----------+------------+\n| Loopback0       | 10.1.1.1  | up       | up         |\n+-----------------+-----------+----------+------------+\n| Loopback100     | 100.0.0.1 | up       | up         |\n+-----------------+-----------+----------+------------+\n")),Object(l.b)("p",null,"Table in Markdown format:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"In [25]: print(tabulate(list_of_dict, headers='keys', tablefmt='pipe'))\n| Interface       | IP        | Status   | Protocol   |\n|:----------------|:----------|:---------|:-----------|\n| FastEthernet0/0 | 15.0.15.1 | up       | up         |\n| FastEthernet0/1 | 10.0.12.1 | up       | up         |\n| FastEthernet0/2 | 10.0.13.1 | up       | up         |\n| Loopback0       | 10.1.1.1  | up       | up         |\n| Loopback100     | 100.0.0.1 | up       | up         |\n")),Object(l.b)("p",null,"Table in HTML format:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"In [26]: print(tabulate(list_of_dict, headers='keys', tablefmt='html'))\n<table>\n<thead>\n<tr><th>Interface      </th><th>IP       </th><th>Status  </th><th>Protocol  </th></tr>\n</thead>\n<tbody>\n<tr><td>FastEthernet0/0</td><td>15.0.15.1</td><td>up      </td><td>up        </td></tr>\n<tr><td>FastEthernet0/1</td><td>10.0.12.1</td><td>up      </td><td>up        </td></tr>\n<tr><td>FastEthernet0/2</td><td>10.0.13.1</td><td>up      </td><td>up        </td></tr>\n<tr><td>Loopback0      </td><td>10.1.1.1 </td><td>up      </td><td>up        </td></tr>\n<tr><td>Loopback100    </td><td>100.0.0.1</td><td>up      </td><td>up        </td></tr>\n</tbody>\n</table>\n")),Object(l.b)("h2",{id:"alignment-of-columns"},"Alignment of columns"),Object(l.b)("p",null,"You can specify alignment for columns:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"In [27]: print(tabulate(list_of_dict, headers='keys', tablefmt='pipe', stralign='center'))\n|    Interface    |    IP     |  Status  |  Protocol  |\n|:---------------:|:---------:|:--------:|:----------:|\n| FastEthernet0/0 | 15.0.15.1 |    up    |     up     |\n| FastEthernet0/1 | 10.0.12.1 |    up    |     up     |\n| FastEthernet0/2 | 10.0.13.1 |    up    |     up     |\n|    Loopback0    | 10.1.1.1  |    up    |     up     |\n|   Loopback100   | 100.0.0.1 |    up    |     up     |\n")),Object(l.b)("p",null,"Note that not only columns are displayed centrally, but Markdown syntax has been changed accordingly."),Object(l.b)("h2",{id:"additional-material"},"Additional material"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"https://bitbucket.org/astanin/python-tabulate"},"tabulate documentation"))),Object(l.b)("p",null,"Articles from author ",Object(l.b)("inlineCode",{parentName:"p"},"tabulate"),":"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"https://txt.arboreus.com/2013/03/13/pretty-print-tables-in-python.html"},"Pretty printing tables in Python")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"https://txt.arboreus.com/2013/12/12/tabulate-0-7-1-with-latex-tables-named-tuples-etc.html"},"Tabulate 0.7.1 with LaTeX & MediaWiki tables"))),Object(l.b)("p",null,"Stack Overflow:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"https://stackoverflow.com/questions/9535954/printing-lists-as-tabular-data"},"Printing Lists as Tabular Data"),". Note ",Object(l.b)("a",{parentName:"li",href:"https://stackoverflow.com/a/26937531"},"the answer")," - it contains other tabulate analogues.")))}c.isMDXComponent=!0},280:function(t,e,n){"use strict";n.d(e,"a",(function(){return b})),n.d(e,"b",(function(){return h}));var a=n(0),r=n.n(a);function l(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function u(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?u(Object(n),!0).forEach((function(e){l(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):u(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function p(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},l=Object.keys(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var s=r.a.createContext({}),c=function(t){var e=r.a.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},b=function(t){var e=c(t.components);return r.a.createElement(s.Provider,{value:e},t.children)},i={inlineCode:"code",wrapper:function(t){var e=t.children;return r.a.createElement(r.a.Fragment,{},e)}},d=r.a.forwardRef((function(t,e){var n=t.components,a=t.mdxType,l=t.originalType,u=t.parentName,s=p(t,["components","mdxType","originalType","parentName"]),b=c(n),d=a,h=b["".concat(u,".").concat(d)]||b[d]||i[d]||l;return n?r.a.createElement(h,o(o({ref:e},s),{},{components:n})):r.a.createElement(h,o({ref:e},s))}));function h(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var l=n.length,u=new Array(l);u[0]=d;var o={};for(var p in e)hasOwnProperty.call(e,p)&&(o[p]=e[p]);o.originalType=t,o.mdxType="string"==typeof t?t:a,u[1]=o;for(var s=2;s<l;s++)u[s]=n[s];return r.a.createElement.apply(null,u)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);