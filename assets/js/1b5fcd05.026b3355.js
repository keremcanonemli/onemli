(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{102:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return c})),t.d(n,"toc",(function(){return l})),t.d(n,"default",(function(){return p}));var a=t(3),r=t(8),i=(t(0),t(280)),o={id:"creation_of_functions",title:"Creation Of Functions",sidebar_label:"9.1 Creation Of Functions",slug:"creation_of_functions",custom_edit_url:null},c={unversionedId:"python/functions/creation_of_functions",id:"python/functions/creation_of_functions",isDocsHomePage:!1,title:"Creation Of Functions",description:"Creation of function:",source:"@site/docs/python/functions/1_creation_of_function.md",slug:"/python/functions/creation_of_functions",permalink:"/docs/python/functions/creation_of_functions",editUrl:null,version:"current",sidebar_label:"9.1 Creation Of Functions",sidebar:"someSidebar",previous:{title:"Functions",permalink:"/docs/python/functions/functions"},next:{title:"Namespace Scope Of Variables",permalink:"/docs/python/functions/namespace_scope_of_variables"}},l=[{value:"Function call",id:"function-call",children:[]},{value:"Operator return",id:"operator-return",children:[]},{value:"Documentation (docstring)",id:"documentation-docstring",children:[]}],u={toc:l};function p(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},u,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Creation of function:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"functions are created with a reserved word ",Object(i.b)("inlineCode",{parentName:"p"},"def"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"def")," followed by function name and parentheses")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"parameters that function accepts inside parentheses")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"after parentheses goes colon and from a new line with indent there is a block of code that function executes")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"optionally, the first line can be ",Object(i.b)("inlineCode",{parentName:"p"},"docstring"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"function can use"))),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"return\n")),Object(i.b)("p",null,"  operator"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"it is used to terminate and exit a function"),Object(i.b)("li",{parentName:"ul"},"most often ",Object(i.b)("inlineCode",{parentName:"li"},"return")," operator returns some value")),Object(i.b)("p",null,"Note"),Object(i.b)("p",null,"Function code used in this subsection can be copied from create_func file."),Object(i.b)("p",null,"Example of function:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"def configure_intf(intf_name, ip, mask):\n   print('interface', intf_name)\n   print('ip address', ip, mask)\n\n")),Object(i.b)("p",null,"Function ",Object(i.b)("inlineCode",{parentName:"p"},"configure_intf")," creates an interface configuration with specified name and IP address. Function has three parameters: intf_name, ip, mask. When function is called the real data will replace these parameters."),Object(i.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(i.b)("div",{parentName:"div",className:"admonition-heading"},Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",{parentName:"h5",className:"admonition-icon"},Object(i.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(i.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"Note")),Object(i.b)("div",{parentName:"div",className:"admonition-content"},Object(i.b)("p",{parentName:"div"},"When function is created, it does nothing yet. Actions listed in it will be executed only when you call function. This is something like ACL in network equipment: when creating ACL in configuration, it does nothing until it is applied."))),Object(i.b)("h2",{id:"function-call"},"Function call"),Object(i.b)("p",null,"When calling a function you must specify its name and pass arguments if necessary."),Object(i.b)("p",null,"Note"),Object(i.b)("p",null,"Parameters are variables that are used to create a function. Arguments are the actual values (data) that are passed to functions when called."),Object(i.b)("p",null,"Function ",Object(i.b)("inlineCode",{parentName:"p"},"configure_intf")," expects three values when called because it was created with three parameters:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"configure_intf('F0/0', '10.1.1.1', '255.255.255.0')\n\nconfigure_intf('Fa0/1', '94.150.197.1', '255.255.255.248')\n")),Object(i.b)("p",null,"Output"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"interface F0/0\nip address 10.1.1.1 255.255.255.0\n")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"interface Fa0/1\nip address 94.150.197.1 255.255.255.248\n")),Object(i.b)("p",null,"The current version of the ",Object(i.b)("inlineCode",{parentName:"p"},"configure_intf")," function prints commands to a standard output, commands can be seen but the result of function cannot be saved to a variable."),Object(i.b)("p",null,"For example, ",Object(i.b)("inlineCode",{parentName:"p"},"sorted")," function does not simply print the sorting result to standard output stream but ",Object(i.b)("strong",{parentName:"p"},"returns")," it, so it can be saved to variable in this way:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"items = [40, 2, 0, 22]\nprint(sorted(items))\n\nsorted_items = sorted(items)\n\nprint(sorted_items)\n")),Object(i.b)("p",null,"Output"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"[0, 2, 22, 40]\n")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"[0, 2, 22, 40]\n")),Object(i.b)("h2",{id:"operator-return"},"Operator return"),Object(i.b)("p",null,"Operator ",Object(i.b)("inlineCode",{parentName:"p"},"return")," is used to return a value, and at the same time it exits the function. Function can return any Python object. By default, function always returns ",Object(i.b)("inlineCode",{parentName:"p"},"None"),"."),Object(i.b)("p",null,"In order for ",Object(i.b)("inlineCode",{parentName:"p"},"configure_intf")," function to return a value that can then be assigned to a variable, you must use ",Object(i.b)("inlineCode",{parentName:"p"},"return")," operator:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"def configure_intf(intf_name, ip, mask):\n    config = f'interface {intf_name}\\nip address {ip} {mask}'\n    return config\n\n\nresult = configure_intf('Fa0/0', '10.1.1.1', '255.255.255.0')\n\nprint(result)\n\n")),Object(i.b)("p",null,"Output"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"interface Fa0/0\nip address 10.1.1.1 255.255.255.0\n")),Object(i.b)("p",null,"Now the result variable contains a line with commands to configure interface. In real life, function will almost always return some value."),Object(i.b)("p",null,"Another important aspect of ",Object(i.b)("inlineCode",{parentName:"p"},"return")," operator is that after ",Object(i.b)("inlineCode",{parentName:"p"},"return")," the function closes, meaning that the expressions that follow ",Object(i.b)("inlineCode",{parentName:"p"},"return")," are not executed."),Object(i.b)("p",null,"For example, in function below the line \xabConfiguration is ready\xbb will not be displayed because it stands after ",Object(i.b)("inlineCode",{parentName:"p"},"return"),":"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"def configure_intf(intf_name, ip, mask):\n    config = f'interface {intf_name}\\nip address {ip} {mask}'\n    return config\n    print('Configuration is ready')\n\n\nprint(configure_intf('Fa0/0', '10.1.1.1', '255.255.255.0'))\n")),Object(i.b)("p",null,"Output"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"interface Fa0/0\nip address 10.1.1.1 255.255.255.0\n")),Object(i.b)("p",null,"Function can return multiple values. In this case, they are separated by a comma after ",Object(i.b)("inlineCode",{parentName:"p"},"return")," operator. In fact, function returns tuple:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"result = configure_intf('Fa0/0', '10.1.1.1', '255.255.255.0')\n\nprint(result)\n\nprint(type(result))\n\nintf, ip_addr = configure_intf('Fa0/0', '10.1.1.1', '255.255.255.0')\n\nprint(intf)\n\nprint(ip_addr)\n")),Object(i.b)("p",null,"Output"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"('interface Fa0/0\\n', 'ip address 10.1.1.1 255.255.255.0')\n")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"<class 'tuple'>\n")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"interface Fa0/0\n\n")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"ip address 10.1.1.1 255.255.255.0\n")),Object(i.b)("h2",{id:"documentation-docstring"},"Documentation (docstring)"),Object(i.b)("p",null,"The first line in function definition is docstring, documentation string. This is a comment that is used to describe a function:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"def configure_intf(intf_name, ip, mask):\n    '''\n    Function generates interface configuration\n    '''\n    config_intf = f'interface {intf_name}\\n'\n    config_ip = f'ip address {ip} {mask}'\n    return config_intf, config_ip\n")),Object(i.b)("p",null,"It is best to write short comments that describe function. For example, describe what function expects to input, what type of arguments should be and what will be the output. Besides, it is better to write a couple of sentences about what function does. This will help when in a month or two you will be trying to understand what function you wrote is doing."))}p.isMDXComponent=!0},280:function(e,n,t){"use strict";t.d(n,"a",(function(){return s})),t.d(n,"b",(function(){return d}));var a=t(0),r=t.n(a);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var u=r.a.createContext({}),p=function(e){var n=r.a.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},s=function(e){var n=p(e.components);return r.a.createElement(u.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},f=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),s=p(t),f=a,d=s["".concat(o,".").concat(f)]||s[f]||b[f]||i;return t?r.a.createElement(d,c(c({ref:n},u),{},{components:t})):r.a.createElement(d,c({ref:n},u))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=f;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var u=2;u<i;u++)o[u]=t[u];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,t)}f.displayName="MDXCreateElement"}}]);