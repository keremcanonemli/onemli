(window.webpackJsonp=window.webpackJsonp||[]).push([[149],{221:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return i})),t.d(n,"toc",(function(){return b})),t.d(n,"default",(function(){return p}));var a=t(3),r=t(8),l=(t(0),t(280)),o={id:"jinja2_template_syntax",title:"Jinja2 Template Syntax",sidebar_label:"20.3 Jinja2 Template Syntax",slug:"jinja2_template_syntax",custom_edit_url:null},i={unversionedId:"python/jinja2/jinja2_template_syntax",id:"python/jinja2/jinja2_template_syntax",isDocsHomePage:!1,title:"Jinja2 Template Syntax",description:"So far, only variable substitution has been used in Jinja2 template examples. This is the simplest and most understandable example of using templates. Syntax of Jinja templates is not limited to this.",source:"@site/docs/python/jinja2/3_jinja2_template_syntax.md",slug:"/python/jinja2/jinja2_template_syntax",permalink:"/tr/docs/python/jinja2/jinja2_template_syntax",editUrl:null,version:"current",sidebar_label:"20.3 Jinja2 Template Syntax",sidebar:"someSidebar",previous:{title:"Example Of Using Jinja",permalink:"/tr/docs/python/jinja2/example_of_using_jinja"},next:{title:"Template Inheritance",permalink:"/tr/docs/python/jinja2/template_inheritance"}},b=[{value:"trim_blocks, lstrip_blocks",id:"trim_blocks-lstrip_blocks",children:[]},{value:"Disabling lstrip_blocks for block",id:"disabling-lstrip_blocks-for-block",children:[]},{value:"Removing whitespace from block",id:"removing-whitespace-from-block",children:[]},{value:"default",id:"default",children:[]},{value:"dictsort",id:"dictsort",children:[]},{value:"join",id:"join",children:[]},{value:"defined",id:"defined",children:[]},{value:"iterable",id:"iterable",children:[]}],s={toc:b};function p(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(l.b)("wrapper",Object(a.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(l.b)("p",null,"So far, only variable substitution has been used in Jinja2 template examples. This is the simplest and most understandable example of using templates. Syntax of Jinja templates is not limited to this."),Object(l.b)("p",null,"In Jinja2 templates you can use :"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"variables"),Object(l.b)("li",{parentName:"ul"},"conditions (if/else)"),Object(l.b)("li",{parentName:"ul"},"loops (for)"),Object(l.b)("li",{parentName:"ul"},"filters - special built-in methods that allow to convert variables"),Object(l.b)("li",{parentName:"ul"},"tests - are used to check whether a variable matches a condition")),Object(l.b)("p",null,"In addition, Jinja supports inheritance between templates and also allows adding the contents of one template to another. This section covers only few possibilities. More information about Jinja2 templates can be found in ",Object(l.b)("a",{parentName:"p",href:"http://jinja.pocoo.org/docs/dev/templates/"},"documentation"),"."),Object(l.b)("p",null,"Note"),Object(l.b)("p",null,"All files used as examples in this subsection are in 3_template_syntax/ directory"),Object(l.b)("p",null,"Script cfg_gen.py will be used to generate templates."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"from jinja2 import Environment, FileSystemLoader\nimport yaml\nimport sys\nimport os\n\n# python cfg_gen.py templates/for.txt data_files/for.yml\ntemplate_dir, template = os.path.split(sys.argv[1])\n\nvars_file = sys.argv[2]\n\nenv = Environment(\n    loader=FileSystemLoader(template_dir),\n    trim_blocks=True,\n    lstrip_blocks=True)\ntemplate = env.get_template(template_file)\n\nwith open(vars_file) as f:\n    vars_dict = yaml.safe_load(f)\n\nprint(template.render(vars_dict))\n")),Object(l.b)("p",null,"In order to see the result, you have to call the script and give it two arguments:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"template"),Object(l.b)("li",{parentName:"ul"},"file with variables in YAML format")),Object(l.b)("p",null,"The result will be displayed on standard output stream."),Object(l.b)("p",null,"Example of script run:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"$ python cfg_gen.py templates/variables.txt data_files/vars.yml\n")),Object(l.b)("p",null,"Parameters trim_blocks and lstrip_blocks are described in the following subsections."),Object(l.b)("h1",{id:"control-of-whitespace-symbols"},"Control of whitespace symbols"),Object(l.b)("h2",{id:"trim_blocks-lstrip_blocks"},"trim_blocks, lstrip_blocks"),Object(l.b)("p",null,"Parameter ",Object(l.b)("inlineCode",{parentName:"p"},"trim_blocks")," removes the first empty line after block if its value is True (default False)."),Object(l.b)("p",null,"Effect of using the flag is showed on example templates/env_flags.txt:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"router bgp {{ bgp.local_as }}\n {% for ibgp in bgp.ibgp_neighbors %}\n neighbor {{ ibgp }} remote-as {{ bgp.local_as }}\n neighbor {{ ibgp }} update-source {{ bgp.loopback }}\n {% endfor %}\n")),Object(l.b)("p",null,"If cfg_gen.py script starts without trim_blocks, lstrip_blocks:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"env = Environment(loader=FileSystemLoader(TEMPLATE_DIR))\n")),Object(l.b)("p",null,"The output is:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"$ python cfg_gen.py templates/env_flags.txt data_files/router.yml\nrouter bgp 100\n\n neighbor 10.0.0.2 remote-as 100\n neighbor 10.0.0.2 update-source lo100\n\n neighbor 10.0.0.3 remote-as 100\n neighbor 10.0.0.3 update-source lo100\n")),Object(l.b)("p",null,"new lines occur because of ",Object(l.b)("inlineCode",{parentName:"p"},"for")," block."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"{% for ibgp in bgp.ibgp_neighbors %}\n")),Object(l.b)("p",null,"By default, the same behavior will be with any other Jinja blocks."),Object(l.b)("p",null,"When trim_blocks flag is added:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"env = Environment(loader=FileSystemLoader(TEMPLATE_DIR),\n                  trim_blocks=True)\n")),Object(l.b)("p",null,"The result will be:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"$ python cfg_gen.py templates/env_flags.txt data_files/router.yml\nrouter bgp 100\n  neighbor 10.0.0.2 remote-as 100\n neighbor 10.0.0.2 update-source lo100\n  neighbor 10.0.0.3 remote-as 100\n neighbor 10.0.0.3 update-source lo100\n")),Object(l.b)("p",null,"Empty lines after block were removed."),Object(l.b)("p",null,"In front of ",Object(l.b)("inlineCode",{parentName:"p"},"neighbor ... remote-as")," lines two spaces appeared. This is because there is a space in front of ",Object(l.b)("inlineCode",{parentName:"p"},"for")," block. Once lstrip_blocks has been disabled, spaces and tabs in front of the block are added to the first line of block."),Object(l.b)("p",null,"This does not affect the next lines. Therefore, lines with ",Object(l.b)("inlineCode",{parentName:"p"},"neighbor ... update-source")," are displayed with one space."),Object(l.b)("p",null,"Parameter ",Object(l.b)("inlineCode",{parentName:"p"},"lstrip_blocks")," controls whether spaces and tabs will be removed from the beginning of line to the beginning of block (untill opening curly bracket)."),Object(l.b)("p",null,"If add ",Object(l.b)("inlineCode",{parentName:"p"},"lstrip_blocks=True"),":"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"env = Environment(loader=FileSystemLoader(TEMPLATE_DIR),\n                  trim_blocks=True, lstrip_blocks=True)\n")),Object(l.b)("p",null,"The result will be:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"$ python cfg_gen.py templates/env_flags.txt data_files/router.yml\nrouter bgp 100\n neighbor 10.0.0.2 remote-as 100\n neighbor 10.0.0.2 update-source lo100\n neighbor 10.0.0.3 remote-as 100\n neighbor 10.0.0.3 update-source lo100\n")),Object(l.b)("h2",{id:"disabling-lstrip_blocks-for-block"},"Disabling lstrip_blocks for block"),Object(l.b)("p",null,"Sometimes you need to disable lstrip_blocks in block."),Object(l.b)("p",null,"For example, if ",Object(l.b)("inlineCode",{parentName:"p"},"lstrip_blocks")," is set to True in an environment, but must be disabled for the second block in template (templates/flagenv_s2.txt file):"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"router bgp {{ bgp.local_as }}\n {% for ibgp in bgp.ibgp_neighbors %}\n neighbor {{ ibgp }} remote-as {{ bgp.local_as }}\n neighbor {{ ibgp }} update-source {{ bgp.loopback }}\n {% endfor %}\n\nrouter bgp {{ bgp.local_as }}\n {%+ for ibgp in bgp.ibgp_neighbors %}\n neighbor {{ ibgp }} remote-as {{ bgp.local_as }}\n neighbor {{ ibgp }} update-source {{ bgp.loopback }}\n {% endfor %}\n")),Object(l.b)("p",null,"The result will be:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"$ python cfg_gen.py templates/env_flags2.txt data_files/router.yml\nrouter bgp 100\n neighbor 10.0.0.2 remote-as 100\n neighbor 10.0.0.2 update-source lo100\n neighbor 10.0.0.3 remote-as 100\n neighbor 10.0.0.3 update-source lo100\n\nrouter bgp 100\n  neighbor 10.0.0.2 remote-as 100\n neighbor 10.0.0.2 update-source lo100\n neighbor 10.0.0.3 remote-as 100\n neighbor 10.0.0.3 update-source lo100\n")),Object(l.b)("p",null,"Plus sign after percent sign disables lstrip_blocks for the block, in this case, only in the beginning."),Object(l.b)("p",null,"If done this way (plus is added in the end block expression):"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"router bgp {{ bgp.local_as }}\n {% for ibgp in bgp.ibgp_neighbors %}\n neighbor {{ ibgp }} remote-as {{ bgp.local_as }}\n neighbor {{ ibgp }} update-source {{ bgp.loopback }}\n {% endfor %}\n\nrouter bgp {{ bgp.local_as }}\n {%+ for ibgp in bgp.ibgp_neighbors %}\n neighbor {{ ibgp }} remote-as {{ bgp.local_as }}\n neighbor {{ ibgp }} update-source {{ bgp.loopback }}\n {%+ endfor %}\n")),Object(l.b)("p",null,"It will be disabled for the end of the block:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"$ python cfg_gen.py templates/env_flags2.txt data_files/router.yml\nrouter bgp 100\n neighbor 10.0.0.2 remote-as 100\n neighbor 10.0.0.2 update-source lo100\n neighbor 10.0.0.3 remote-as 100\n neighbor 10.0.0.3 update-source lo100\n\nrouter bgp 100\n  neighbor 10.0.0.2 remote-as 100\n neighbor 10.0.0.2 update-source lo100\n  neighbor 10.0.0.3 remote-as 100\n neighbor 10.0.0.3 update-source lo100\n")),Object(l.b)("h2",{id:"removing-whitespace-from-block"},"Removing whitespace from block"),Object(l.b)("p",null,"Similarly, you can control whitespace removal for a block."),Object(l.b)("p",null,"For this example, flags are not set in environment:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"env = Environment(loader=FileSystemLoader(TEMPLATE_DIR))\n")),Object(l.b)("p",null,"Template templates/env_flags3.txt:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"router bgp {{ bgp.local_as }}\n {% for ibgp in bgp.ibgp_neighbors %}\n neighbor {{ ibgp }} remote-as {{ bgp.local_as }}\n neighbor {{ ibgp }} update-source {{ bgp.loopback }}\n {% endfor %}\n\nrouter bgp {{ bgp.local_as }}\n {%- for ibgp in bgp.ibgp_neighbors %}\n neighbor {{ ibgp }} remote-as {{ bgp.local_as }}\n neighbor {{ ibgp }} update-source {{ bgp.loopback }}\n {% endfor %}\n")),Object(l.b)("p",null,"Note the minus at the beginning of second block. Minus removes all whitespace characters, in this case, at the beginning of the block."),Object(l.b)("p",null,"The result will be:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"$ python cfg_gen.py templates/env_flags3.txt data_files/router.yml\nrouter bgp 100\n\n neighbor 10.0.0.2 remote-as 100\n neighbor 10.0.0.2 update-source lo100\n\n neighbor 10.0.0.3 remote-as 100\n neighbor 10.0.0.3 update-source lo100\n\n\nrouter bgp 100\n neighbor 10.0.0.2 remote-as 100\n neighbor 10.0.0.2 update-source lo100\n\n neighbor 10.0.0.3 remote-as 100\n neighbor 10.0.0.3 update-source lo100\n")),Object(l.b)("p",null,"If you add minus to the end of the block:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"router bgp {{ bgp.local_as }}\n {% for ibgp in bgp.ibgp_neighbors %}\n neighbor {{ ibgp }} remote-as {{ bgp.local_as }}\n neighbor {{ ibgp }} update-source {{ bgp.loopback }}\n {% endfor %}\n\nrouter bgp {{ bgp.local_as }}\n {%- for ibgp in bgp.ibgp_neighbors %}\n neighbor {{ ibgp }} remote-as {{ bgp.local_as }}\n neighbor {{ ibgp }} update-source {{ bgp.loopback }}\n {%- endfor %}\n")),Object(l.b)("p",null,"Empty string at the end of the block will be deleted:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"$ python cfg_gen.py templates/env_flags3.txt data_files/router.yml\nrouter bgp 100\n\n neighbor 10.0.0.2 remote-as 100\n neighbor 10.0.0.2 update-source lo100\n\n neighbor 10.0.0.3 remote-as 100\n neighbor 10.0.0.3 update-source lo100\n\n\nrouter bgp 100\n neighbor 10.0.0.2 remote-as 100\n neighbor 10.0.0.2 update-source lo100\n neighbor 10.0.0.3 remote-as 100\n neighbor 10.0.0.3 update-source lo100\n")),Object(l.b)("p",null,"Try to add minus at the end of expressions describing the block and look at the result:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"router bgp {{ bgp.local_as }}\n {% for ibgp in bgp.ibgp_neighbors %}\n neighbor {{ ibgp }} remote-as {{ bgp.local_as }}\n neighbor {{ ibgp }} update-source {{ bgp.loopback }}\n {% endfor %}\n\nrouter bgp {{ bgp.local_as }}\n {%- for ibgp in bgp.ibgp_neighbors -%}\n neighbor {{ ibgp }} remote-as {{ bgp.local_as }}\n neighbor {{ ibgp }} update-source {{ bgp.loopback }}\n {%- endfor -%}\n")),Object(l.b)("h1",{id:"variables"},"Variables"),Object(l.b)("p",null,"Variables in template are given in double curly braces:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"hostname {{ name }}\n\ninterface Loopback0\n ip address 10.0.0.{{ id }} 255.255.255.255\n")),Object(l.b)("p",null,"Variable values are set based on dictionary that is passed to template."),Object(l.b)("p",null,"Variable that is passed on in a dictionary may not only be a number or a string, but also for example, a list or a dictionary. Inside template, you can refer to the item by number or key."),Object(l.b)("p",null,"Template example templates/variables.txt with usage of different variable variants:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"hostname {{ name }}\n\ninterface Loopback0\n ip address 10.0.0.{{ id }} 255.255.255.255\n\nvlan {{ vlans[0] }}\n\nrouter ospf 1\n router-id 10.0.0.{{ id }}\n auto-cost reference-bandwidth 10000\n network {{ ospf.network }} area {{ ospf['area'] }}\n")),Object(l.b)("p",null,"And corresponding data_files/vars.yml file with variables:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"id: 3\nname: R3\nvlans:\n  - 10\n  - 20\n  - 30\nospf:\n  network: 10.0.1.0 0.0.0.255\n  area: 0\n")),Object(l.b)("p",null,"Note the use of vlans variable in template: since vlans variable is a list, you can specify which item from list we need"),Object(l.b)("p",null,"If a dictionary is passed (as in case of ospf variable), you can refer to dictionary objects inside template using one of the variants: ",Object(l.b)("inlineCode",{parentName:"p"},"ospf.network or ospf['network']")),Object(l.b)("p",null,"The result will be:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"$ python cfg_gen.py templates/variables.txt data_files/vars.yml\nhostname R3\n\ninterface Loopback0\n ip address 10.0.0.3 255.255.255.255\n\nvlan 10\n\nrouter ospf 1\n router-id 10.0.0.3\n auto-cost reference-bandwidth 10000\n network 10.0.1.0 0.0.0.255 area 0\n")),Object(l.b)("h1",{id:"loop-for"},"Loop for"),Object(l.b)("p",null,"Loop ",Object(l.b)("inlineCode",{parentName:"p"},"for")," allows you to walk through sequence of elements."),Object(l.b)("p",null,"Loop ",Object(l.b)("inlineCode",{parentName:"p"},"for")," must be written inside ",Object(l.b)("inlineCode",{parentName:"p"},"{% %}"),". Furthermore, the end of the loop must be explicitly indicated:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"{% for vlan in vlans %}\n  vlan {{ vlan }}\n{% endfor %}\n")),Object(l.b)("p",null,"Template example templates/for.txt using a loop:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"hostname {{ name }}\n\ninterface Loopback0\n ip address 10.0.0.{{ id }} 255.255.255.255\n\n{% for vlan, name in vlans.items() %}\nvlan {{ vlan }}\n name {{ name }}\n{% endfor %}\n\nrouter ospf 1\n router-id 10.0.0.{{ id }}\n auto-cost reference-bandwidth 10000\n {% for networks in ospf %}\n network {{ networks.network }} area {{ networks.area }}\n {% endfor %}\n")),Object(l.b)("p",null,"File data_files/for.yml with variables:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"id: 3\nname: R3\nvlans:\n  10: Marketing\n  20: Voice\n  30: Management\nospf:\n  - network: 10.0.1.0 0.0.0.255\n    area: 0\n  - network: 10.0.2.0 0.0.0.255\n    area: 2\n  - network: 10.1.1.0 0.0.0.255\n    area: 0\n")),Object(l.b)("p",null,"In ",Object(l.b)("inlineCode",{parentName:"p"},"for"),", it is possible to go through both the list elements (for example, ospf list) and the dictionary (vlans dictionary). And similarly, through any sequence."),Object(l.b)("p",null,"The result will be:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"$ python cfg_gen.py templates/for.txt data_files/for.yml\nhostname R3\n\ninterface Loopback0\n ip address 10.0.0.3 255.255.255.255\n\nvlan 10\n name Marketing\nvlan 20\n name Voice\nvlan 30\n name Management\n\nrouter ospf 1\n router-id 10.0.0.3\n auto-cost reference-bandwidth 10000\n network 10.0.1.0 0.0.0.255 area 0\n network 10.0.2.0 0.0.0.255 area 2\n network 10.1.1.0 0.0.0.255 area 0\n")),Object(l.b)("h1",{id:"ifelifelse"},"if/elif/else"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"if")," allows you to add a condition to template. For example, you can use ",Object(l.b)("inlineCode",{parentName:"p"},"if")," to add parts of template depending on the presence of variables in data dictionary."),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"if")," statement must also be within inside ",Object(l.b)("inlineCode",{parentName:"p"},"{% %}"),". End of condition must be explicitly stated:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"{% if ospf %}\nrouter ospf 1\n router-id 10.0.0.{{ id }}\n auto-cost reference-bandwidth 10000\n{% endif %}\n")),Object(l.b)("p",null,"Template example templates/if.txt:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"hostname {{ name }}\n\ninterface Loopback0\n ip address 10.0.0.{{ id }} 255.255.255.255\n\n{% for vlan, name in vlans.items() %}\nvlan {{ vlan }}\n name {{ name }}\n{% endfor %}\n\n{% if ospf %}\nrouter ospf 1\n router-id 10.0.0.{{ id }}\n auto-cost reference-bandwidth 10000\n {% for networks in ospf %}\n network {{ networks.network }} area {{ networks.area }}\n {% endfor %}\n{% endif %}\n")),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"if ospf")," expression works the same way as in Python: if variable exists and is not empty, the result is True. If there is no variable or it is empty, the result is False. That is, in this template the OSPF configuration is generated only if variable ",Object(l.b)("inlineCode",{parentName:"p"},"ospf")," exists and is not empty. Configuration will be generated with two data variants."),Object(l.b)("p",null,"First with data_files/if.yml that does not contain ",Object(l.b)("inlineCode",{parentName:"p"},"ospf")," variable:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"id: 3\nname: R3\nvlans:\n  10: Marketing\n  20: Voice\n  30: Management\n")),Object(l.b)("p",null,"The result will be:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"$ python cfg_gen.py templates/if.txt data_files/if.yml\n\nhostname R3\n\ninterface Loopback0\n ip address 10.0.0.3 255.255.255.255\n\nvlan 10\n name Marketing\nvlan 20\n name Voice\nvlan 30\n name Management\n")),Object(l.b)("p",null,"Now a similar template but with data_files/if_ospf.yml file:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"id: 3\nname: R3\nvlans:\n  10: Marketing\n  20: Voice\n  30: Management\nospf:\n  - network: 10.0.1.0 0.0.0.255\n    area: 0\n  - network: 10.0.2.0 0.0.0.255\n    area: 2\n  - network: 10.1.1.0 0.0.0.255\n    area: 0\n")),Object(l.b)("p",null,"Now the result will be:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"hostname R3\n\ninterface Loopback0\n ip address 10.0.0.3 255.255.255.255\n\nvlan 10\n name Marketing\nvlan 20\n name Voice\nvlan 30\n name Management\n\nrouter ospf 1\n router-id 10.0.0.3\n auto-cost reference-bandwidth 10000\n network 10.0.1.0 0.0.0.255 area 0\n network 10.0.2.0 0.0.0.255 area 2\n network 10.1.1.0 0.0.0.255 area 0\n")),Object(l.b)("p",null,"As in Python, Jinja is allowed to make branches in condition."),Object(l.b)("p",null,"Template example templates/if_vlans.txt:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"{% for intf, params in trunks.items() %}\ninterface {{ intf }}\n {% if params.action == 'add' %}\n switchport trunk allowed vlan add {{ params.vlans }}\n {% elif params.action == 'delete' %}\n switchport trunk allowed vlan remove {{ params.vlans }}\n {% else %}\n switchport trunk allowed vlan {{ params.vlans }}\n {% endif %}\n{% endfor %}\n")),Object(l.b)("p",null,"Data file data_files/if_vlans.yml:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"trunks:\n  Fa0/1:\n    action: add\n    vlans: 10,20\n  Fa0/2:\n    action: only\n    vlans: 10,30\n  Fa0/3:\n    action: delete\n    vlans: 10\n")),Object(l.b)("p",null,"In this example, different commands are generated depending on value of ",Object(l.b)("inlineCode",{parentName:"p"},"action")," parameter."),Object(l.b)("p",null,"In template you could also use this option to refer to nested dictionaries:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"{% for intf in trunks %}\ninterface {{ intf }}\n {% if trunks[intf]['action'] == 'add' %}\n switchport trunk allowed vlan add {{ trunks[intf]['vlans'] }}\n {% elif trunks[intf]['action'] == 'delete' %}\n switchport trunk allowed vlan remove {{ trunks[intf]['vlans'] }}\n {% else %}\n switchport trunk allowed vlan {{ trunks[intf]['vlans'] }}\n {% endif %}\n{% endfor %}\n")),Object(l.b)("p",null,"This will result in the following configuration:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"$ python cfg_gen.py templates/if_vlans.txt data_files/if_vlans.yml\ninterface Fa0/1\n switchport trunk allowed vlan add 10,20\ninterface Fa0/3\n switchport trunk allowed vlan remove 10\ninterface Fa0/2\n switchport trunk allowed vlan 10,30\n")),Object(l.b)("p",null,"Using ",Object(l.b)("inlineCode",{parentName:"p"},"if")," you can also filter which elements of sequence will be iterated in ",Object(l.b)("inlineCode",{parentName:"p"},"for")," loop."),Object(l.b)("p",null,"Template example templates/if_for.txt with filter in ",Object(l.b)("inlineCode",{parentName:"p"},"for")," loop:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"{% for vlan, name in vlans.items() if vlan > 15 %}\nvlan {{ vlan }}\n name {{ name }}\n{% endfor %}\n")),Object(l.b)("p",null,"Data file (data_files/if_for.yml):"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"vlans:\n  10: Marketing\n  20: Voice\n  30: Management\n")),Object(l.b)("p",null,"The result will be:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"$ python cfg_gen.py templates/if_for.txt data_files/if_for.yml\nvlan 20\n name Voice\nvlan 30\n name Management\n")),Object(l.b)("h1",{id:"filters"},"Filters"),Object(l.b)("p",null,"In Jinja, variables can be changed by filters. Filters are separated from variable by a vertical line (pipe ",Object(l.b)("inlineCode",{parentName:"p"},"|"),") and may contain additional arguments. In addition, several filters can be applied to variable. In this case, filters are simply written consecutively and each of them is separated by a vertical line."),Object(l.b)("p",null,"Jinja supports a large number of built-in filters. We will look at only a few of them. Other filters can be found in ",Object(l.b)("a",{parentName:"p",href:"http://jinja.pocoo.org/docs/dev/templates/#builtin-filters"},"documentation"),"."),Object(l.b)("p",null,"You can also easily create your own filters. We will not cover this possibility but it is ",Object(l.b)("a",{parentName:"p",href:"http://jinja.pocoo.org/docs/2.9/api/#custom-filters"},"well documented"),"."),Object(l.b)("h2",{id:"default"},"default"),Object(l.b)("p",null,"Filter ",Object(l.b)("inlineCode",{parentName:"p"},"default")," allows you to set default value for variable. If variable is defined, it will be displayed, if variable is not defined, the value specified in default filter will be displayed."),Object(l.b)("p",null,"Template example templates/filter_default.txt:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"router ospf 1\n auto-cost reference-bandwidth {{ ref_bw | default(10000) }}\n {% for networks in ospf %}\n network {{ networks.network }} area {{ networks.area }}\n {% endfor %}\n")),Object(l.b)("p",null,"If variable ref_bw is defined in dictionary, its value will be set. If there is no variable, the value of 10000 will be substituted."),Object(l.b)("p",null,"Data file (data_files/filter_default.yml):"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"ospf:\n  - network: 10.0.1.0 0.0.0.255\n    area: 0\n  - network: 10.0.2.0 0.0.0.255\n    area: 2\n  - network: 10.1.1.0 0.0.0.255\n    area: 0\n")),Object(l.b)("p",null,"The result of execution:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"$ python cfg_gen.py templates/filter_default.txt data_files/filter_default.yml\nrouter ospf 1\n auto-cost reference-bandwidth 10000\n network 10.0.1.0 0.0.0.255 area 0\n network 10.0.2.0 0.0.0.255 area 2\n network 10.1.1.0 0.0.0.255 area 0\n")),Object(l.b)("p",null,"By default, if variable is defined and its value is empty, it will be assumed that variable and its value exist."),Object(l.b)("p",null,"If you want default value to be set also when variable is empty (i.e., treated as False in Python), you need to specify additional parameter ",Object(l.b)("inlineCode",{parentName:"p"},"boolean=true"),"."),Object(l.b)("p",null,"For example, if data file is:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"ref_bw: ''\nospf:\n  - network: 10.0.1.0 0.0.0.255\n    area: 0\n  - network: 10.0.2.0 0.0.0.255\n    area: 2\n  - network: 10.1.1.0 0.0.0.255\n    area: 0\n")),Object(l.b)("p",null,"The result will be:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"$ python cfg_gen.py templates/filter_default.txt data_files/filter_default.yml\nrouter ospf 1\n auto-cost reference-bandwidth\n network 10.0.1.0 0.0.0.255 area 0\n network 10.0.2.0 0.0.0.255 area 2\n network 10.1.1.0 0.0.0.255 area 0\n")),Object(l.b)("p",null,"If with the same data file the template will be changed as follows:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"router ospf 1\n auto-cost reference-bandwidth {{ ref_bw | default(10000, boolean=true) }}\n{% for networks in ospf %}\n network {{ networks.network }} area {{ networks.area }}\n{% endfor %}\n")),Object(l.b)("p",null,"Note"),Object(l.b)("p",null,"Instead of ",Object(l.b)("inlineCode",{parentName:"p"},"default(10000, boolean=true)")," you can write default(10000, true)"),Object(l.b)("p",null,"The result will be (default value is set):"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"$ python cfg_gen.py templates/filter_default.txt data_files/filter_default.yml\nrouter ospf 1\n auto-cost reference-bandwidth 10000\n network 10.0.1.0 0.0.0.255 area 0\n network 10.0.2.0 0.0.0.255 area 2\n network 10.1.1.0 0.0.0.255 area 0\n")),Object(l.b)("h2",{id:"dictsort"},"dictsort"),Object(l.b)("p",null,"Filter ",Object(l.b)("inlineCode",{parentName:"p"},"dictsort")," allows you to sort the dictionary. By default, sorting is done by keys but by changing filter parameters you can sort by values."),Object(l.b)("p",null,"Filter syntax:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"dictsort(value, case_sensitive=False, by='key')\n")),Object(l.b)("p",null,"After ",Object(l.b)("inlineCode",{parentName:"p"},"dictsort")," sorts the dictionary, it returns a list of tuples, not a dictionary."),Object(l.b)("p",null,"Template example templates/filter_dictsort.txt using ",Object(l.b)("inlineCode",{parentName:"p"},"dictsort")," filter:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"{% for intf, params in trunks | dictsort %}\ninterface {{ intf }}\n {% if params.action == 'add' %}\n switchport trunk allowed vlan add {{ params.vlans }}\n {% elif params.action == 'delete' %}\n switchport trunk allowed vlan remove {{ params.vlans }}\n {% else %}\n switchport trunk allowed vlan {{ params.vlans }}\n {% endif %}\n{% endfor %}\n")),Object(l.b)("p",null,"Note that filter awaits a dictionary, not a list of tuples or iterator."),Object(l.b)("p",null,"Data file (data_files/filter_dictsort.yml):"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"trunks:\n  Fa0/2:\n    action: only\n    vlans: 10,30\n  Fa0/3:\n    action: delete\n    vlans: 10\n  Fa0/1:\n    action: add\n    vlans: 10,20\n")),Object(l.b)("p",null,"The result of execution will be (interfaces are ordered):"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"$ python cfg_gen.py templates/filter_dictsort.txt data_files/filter_dictsort.yml\ninterface Fa0/1\n switchport trunk allowed vlan add 10,20\ninterface Fa0/2\n switchport trunk allowed vlan 10,30\ninterface Fa0/3\n switchport trunk allowed vlan remove 10\n")),Object(l.b)("h2",{id:"join"},"join"),Object(l.b)("p",null,"Filter ",Object(l.b)("inlineCode",{parentName:"p"},"join")," works just like ",Object(l.b)("inlineCode",{parentName:"p"},"join")," method in Python."),Object(l.b)("p",null,"With ",Object(l.b)("inlineCode",{parentName:"p"},"join")," filter you can combine sequence of elements into a string with an optional separator between elements."),Object(l.b)("p",null,"Template example templates/filter_join.txt using ",Object(l.b)("inlineCode",{parentName:"p"},"join")," filter:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"{% for intf, params in trunks | dictsort %}\ninterface {{ intf }}\n {% if params.action == 'add' %}\n switchport trunk allowed vlan add {{ params.vlans | join(',') }}\n {% elif params.action == 'delete' %}\n switchport trunk allowed vlan remove {{ params.vlans | join(',') }}\n {% else %}\n switchport trunk allowed vlan {{ params.vlans | join(',') }}\n {% endif %}\n{% endfor %}\n")),Object(l.b)("p",null,"Data file (data_files/filter_join.yml):"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"trunks:\n  Fa0/1:\n    action: add\n    vlans:\n      - 10\n      - 20\n  Fa0/2:\n    action: only\n    vlans:\n      - 10\n      - 30\n  Fa0/3:\n    action: delete\n    vlans:\n      - 10\n")),Object(l.b)("p",null,"The result of execution:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"$ python cfg_gen.py templates/filter_join.txt data_files/filter_join.yml\ninterface Fa0/1\n switchport trunk allowed vlan add 10,20\ninterface Fa0/2\n switchport trunk allowed vlan 10,30\ninterface Fa0/3\n switchport trunk allowed vlan remove 10\n")),Object(l.b)("h1",{id:"tests"},"Tests"),Object(l.b)("p",null,"Besides filters, Jinja also supports tests. Tests allow variables to be tested for a certain condition."),Object(l.b)("p",null,"Jinja supports a large number of built-in tests. We will look at only a few of them. The rest of tests you can find in ",Object(l.b)("a",{parentName:"p",href:"http://jinja.pocoo.org/docs/dev/templates/#builtin-tests"},"documentation"),"."),Object(l.b)("h2",{id:"defined"},"defined"),Object(l.b)("p",null,"Test ",Object(l.b)("inlineCode",{parentName:"p"},"defined")," allows you to check if variable is present in the data dictionary."),Object(l.b)("p",null,"Template example templates/test_defined.txt:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"router ospf 1\n{% if ref_bw is defined %}\n auto-cost reference-bandwidth {{ ref_bw }}\n{% else %}\n auto-cost reference-bandwidth 10000\n{% endif %}\n{% for networks in ospf %}\n network {{ networks.network }} area {{ networks.area }}\n{% endfor %}\n")),Object(l.b)("p",null,"This example is more cumbersome than ",Object(l.b)("inlineCode",{parentName:"p"},"default")," filter option, but this test may be useful if depending on whether a variable is defined or not, different commands need to be executed."),Object(l.b)("p",null,"Data file (data_files/test_defined.yml):"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"ospf:\n  - network: 10.0.1.0 0.0.0.255\n    area: 0\n  - network: 10.0.2.0 0.0.0.255\n    area: 2\n  - network: 10.1.1.0 0.0.0.255\n    area: 0\n")),Object(l.b)("p",null,"The result of execution:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"$ python cfg_gen.py templates/test_defined.txt data_files/test_defined.yml\nrouter ospf 1\n auto-cost reference-bandwidth 10000\n network 10.0.1.0 0.0.0.255 area 0\n network 10.0.2.0 0.0.0.255 area 2\n network 10.1.1.0 0.0.0.255 area 0\n")),Object(l.b)("h2",{id:"iterable"},"iterable"),Object(l.b)("p",null,"Test ",Object(l.b)("inlineCode",{parentName:"p"},"iterable")," checks whether the object is an iterator. Due to these checks, it is possible to make branches in template which will take into account the type of variable."),Object(l.b)("p",null,"Template templates/test_iterable.txt (indents made to make an idea of branches more clear):"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"{% for intf, params in trunks | dictsort %}\ninterface {{ intf }}\n {% if params.vlans is iterable %}\n   {% if params.action == 'add' %}\n switchport trunk allowed vlan add {{ params.vlans | join(',') }}\n   {% elif params.action == 'delete' %}\n switchport trunk allowed vlan remove {{ params.vlans | join(',') }}\n   {% else %}\n switchport trunk allowed vlan {{ params.vlans | join(',') }}\n   {% endif %}\n {% else %}\n   {% if params.action == 'add' %}\n switchport trunk allowed vlan add {{ params.vlans }}\n   {% elif params.action == 'delete' %}\n switchport trunk allowed vlan remove {{ params.vlans }}\n   {% else %}\n switchport trunk allowed vlan {{ params.vlans }}\n   {% endif %}\n {% endif %}\n{% endfor %}\n")),Object(l.b)("p",null,"Data file (data_files/test_iterable.yml):"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"trunks:\n  Fa0/1:\n    action: add\n    vlans:\n      - 10\n      - 20\n  Fa0/2:\n    action: only\n    vlans:\n      - 10\n      - 30\n  Fa0/3:\n    action: delete\n    vlans: 10\n")),Object(l.b)("p",null,"Note the last line: ",Object(l.b)("inlineCode",{parentName:"p"},"vlans: 10"),". In this case, 10 is no longer in the list and ",Object(l.b)("inlineCode",{parentName:"p"},"join")," filter does not work. But, due to ",Object(l.b)("inlineCode",{parentName:"p"},"is iterable")," test (in this case the result will be false), in this case template goes into ",Object(l.b)("inlineCode",{parentName:"p"},"else")," branch."),Object(l.b)("p",null,"The result of execution:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"$ python cfg_gen.py templates/test_iterable.txt data_files/test_iterable.yml\ninterface Fa0/1\n switchport trunk allowed vlan add 10,20\ninterface Fa0/2\n switchport trunk allowed vlan 10,30\ninterface Fa0/3\n switchport trunk allowed vlan remove 10\n")),Object(l.b)("p",null,"Such indents appeared because the template uses indents but does not have ",Object(l.b)("inlineCode",{parentName:"p"},"lstrip_blocks=True")," installed (it removes spaces and tabs at the beginning of the line)."),Object(l.b)("h1",{id:"set"},"set"),Object(l.b)("p",null,"You can assign values to variables inside template. These can be new variables or there may be modified values of variables that have been passed to template. In this way you can remember a value that for example was obtained by using several filters. Then use variable name instead of repeating all filters."),Object(l.b)("p",null,"Template example templates/set.txt in which ",Object(l.b)("inlineCode",{parentName:"p"},"set")," expression is used to specify shorter parameter names:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"{% for intf, params in trunks | dictsort %}\n {% set vlans = params.vlans %}\n {% set action = params.action %}\n\ninterface {{ intf }}\n {% if vlans is iterable %}\n  {% if action == 'add' %}\n switchport trunk allowed vlan add {{ vlans | join(',') }}\n  {% elif action == 'delete' %}\n switchport trunk allowed vlan remove {{ vlans | join(',') }}\n  {% else %}\n switchport trunk allowed vlan {{ vlans | join(',') }}\n  {% endif %}\n {% else %}\n  {% if action == 'add' %}\n switchport trunk allowed vlan add {{ vlans }}\n  {% elif action == 'delete' %}\n switchport trunk allowed vlan remove {{ vlans }}\n  {% else %}\n switchport trunk allowed vlan {{ vlans }}\n  {% endif %}\n {% endif %}\n{% endfor %}\n")),Object(l.b)("p",null,"Note the second and third lines:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"{% set vlans = params.vlans %}\n{% set action = params.action %}\n")),Object(l.b)("p",null,"In this way new variables are created and these new values are used. It makes template look clearer."),Object(l.b)("p",null,"Data file (data_files/set.yml):"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"trunks:\n  Fa0/1:\n    action: add\n    vlans:\n      - 10\n      - 20\n  Fa0/2:\n    action: only\n    vlans:\n      - 10\n      - 30\n  Fa0/3:\n    action: delete\n    vlans: 10\n")),Object(l.b)("p",null,"The result of execution:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"$ python cfg_gen.py templates/set.txt data_files/set.yml\n\ninterface Fa0/1\n switchport trunk allowed vlan add 10,20\n\ninterface Fa0/2\n switchport trunk allowed vlan 10,30\n\ninterface Fa0/3\n switchport trunk allowed vlan remove 10\n")),Object(l.b)("h1",{id:"include"},"include"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"Include")," expression allows you to add one template to another."),Object(l.b)("p",null,"Variables that are transmitted as data must contain all data for both the master template and the one that is added through ",Object(l.b)("inlineCode",{parentName:"p"},"include"),"."),Object(l.b)("p",null,"Template templates/vlans.txt:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"{% for vlan, name in vlans.items() %}\nvlan {{ vlan }}\n name {{ name }}\n{% endfor %}\n")),Object(l.b)("p",null,"Template templates/ospf.txt:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"router ospf 1\n auto-cost reference-bandwidth 10000\n{% for networks in ospf %}\n network {{ networks.network }} area {{ networks.area }}\n{% endfor %}\n")),Object(l.b)("p",null,"Template templates/bgp.txt:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"router bgp {{ bgp.local_as }}\n{% for ibgp in bgp.ibgp_neighbors %}\n neighbor {{ ibgp }} remote-as {{ bgp.local_as }}\n neighbor {{ ibgp }} update-source {{ bgp.loopback }}\n{% endfor %}\n{% for ebgp in bgp.ebgp_neighbors %}\n neighbor {{ ebgp }} remote-as {{ bgp.ebgp_neighbors[ebgp] }}\n{% endfor %}\n")),Object(l.b)("p",null,"Template templates/switch.txt uses created templates ospf and vlans:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"{% include 'vlans.txt' %}\n\n{% include 'ospf.txt' %}\n")),Object(l.b)("p",null,"Data file for configuration generation (data_files/switch.yml):"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"vlans:\n  10: Marketing\n  20: Voice\n  30: Management\nospf:\n  - network: 10.0.1.0 0.0.0.255\n    area: 0\n  - network: 10.0.2.0 0.0.0.255\n    area: 2\n  - network: 10.1.1.0 0.0.0.255\n    area: 0\n")),Object(l.b)("p",null,"The result of script execution:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"$ python cfg_gen.py templates/switch.txt data_files/switch.yml\nvlan 10\n name Marketing\nvlan 20\n name Voice\nvlan 30\n name Management\n\nrouter ospf 1\n auto-cost reference-bandwidth 10000\n network 10.0.1.0 0.0.0.255 area 0\n network 10.0.2.0 0.0.0.255 area 2\n network 10.1.1.0 0.0.0.255 area 0\n")),Object(l.b)("p",null,"The resulting configuration is as if lines from templates ospf.txt and vlans.txt were in switch.txt template."),Object(l.b)("p",null,"Template templates/router.txt:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"{% include 'ospf.txt' %}\n\n{% include 'bgp.txt' %}\n\nlogging {{ log_server }}\n")),Object(l.b)("p",null,"In this case, in addition to ",Object(l.b)("inlineCode",{parentName:"p"},"include"),", another line in template was added to show that ",Object(l.b)("inlineCode",{parentName:"p"},"include")," expressions can be mixed with normal template."),Object(l.b)("p",null,"Data file (data_files/router.yml):"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"ospf:\n  - network: 10.0.1.0 0.0.0.255\n    area: 0\n  - network: 10.0.2.0 0.0.0.255\n    area: 2\n  - network: 10.1.1.0 0.0.0.255\n    area: 0\nbgp:\n  local_as: 100\n  loopback: lo100\n  ibgp_neighbors:\n    - 10.0.0.2\n    - 10.0.0.3\n  ebgp_neighbors:\n    90.1.1.1: 500\n    80.1.1.1: 600\nlog_server: 10.1.1.1\n")),Object(l.b)("p",null,"The result of script execution will be:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"$ python cfg_gen.py templates/router.txt data_files/router.yml\nrouter ospf 1\n auto-cost reference-bandwidth 10000\n network 10.0.1.0 0.0.0.255 area 0\n network 10.0.2.0 0.0.0.255 area 2\n network 10.1.1.0 0.0.0.255 area 0\n\nrouter bgp 100\n neighbor 10.0.0.2 remote-as 100\n neighbor 10.0.0.2 update-source lo100\n neighbor 10.0.0.3 remote-as 100\n neighbor 10.0.0.3 update-source lo100\n neighbor 90.1.1.1 remote-as 500\n neighbor 80.1.1.1 remote-as 600\n\nlogging 10.1.1.1\n")),Object(l.b)("p",null,"Thanks to ",Object(l.b)("inlineCode",{parentName:"p"},"include"),", template templates/ospf.txt is used both in template templates/switch.txt and in template templates/router.txt, instead of repeating the same thing twice."))}p.isMDXComponent=!0},280:function(e,n,t){"use strict";t.d(n,"a",(function(){return c})),t.d(n,"b",(function(){return m}));var a=t(0),r=t.n(a);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function b(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=r.a.createContext({}),p=function(e){var n=r.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=p(e.components);return r.a.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},u=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,o=e.parentName,s=b(e,["components","mdxType","originalType","parentName"]),c=p(t),u=a,m=c["".concat(o,".").concat(u)]||c[u]||d[u]||l;return t?r.a.createElement(m,i(i({ref:n},s),{},{components:t})):r.a.createElement(m,i({ref:n},s))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,o=new Array(l);o[0]=u;var i={};for(var b in n)hasOwnProperty.call(n,b)&&(i[b]=n[b]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var s=2;s<l;s++)o[s]=t[s];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"}}]);