(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{122:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return h}));var a=n(0),s=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var c=s.a.createContext({}),p=function(e){var t=s.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},b=function(e){var t=p(e.components);return s.a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return s.a.createElement(s.a.Fragment,{},t)}},d=s.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),b=p(n),d=a,h=b["".concat(o,".").concat(d)]||b[d]||u[d]||r;return n?s.a.createElement(h,i(i({ref:t},c),{},{components:n})):s.a.createElement(h,i({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var c=2;c<r;c++)o[c]=n[c];return s.a.createElement.apply(null,o)}return s.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},72:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return i})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return p}));var a=n(3),s=n(8),r=(n(0),n(122)),o={id:"classes_and_encapsulation",title:"Classes and Encapsulation",sidebar_label:"5.2 Classes and Encapsulation",slug:"classes_and_encapsulation",custom_edit_url:null},i={unversionedId:"python/objects_model/classes_and_encapsulation",id:"python/objects_model/classes_and_encapsulation",isDocsHomePage:!1,title:"Classes and Encapsulation",description:"When writing classes, it is common to try and encapsulate internal details.",source:"@site/docs/python/objects_model/02_Classes_encapsulation.md",slug:"/python/objects_model/classes_and_encapsulation",permalink:"/docs/python/objects_model/classes_and_encapsulation",editUrl:null,version:"current",sidebar_label:"5.2 Classes and Encapsulation",sidebar:"someSidebar",previous:{title:"Dicts Revisited",permalink:"/docs/python/objects_model/dictionaries_revisited"},next:{title:"\u2699\ufe0f enable()",permalink:"/docs/netmiko/methods/netmiko_enable"}},l=[{value:"Public vs Private.",id:"public-vs-private",children:[]},{value:"A Problem",id:"a-problem",children:[]},{value:"Python Encapsulation",id:"python-encapsulation",children:[]},{value:"Private Attributes",id:"private-attributes",children:[]},{value:"Simple Attributes",id:"simple-attributes",children:[]},{value:"Managed Attributes",id:"managed-attributes",children:[]},{value:"Properties",id:"properties",children:[]},{value:"Uniform access",id:"uniform-access",children:[]},{value:"Decorator Syntax",id:"decorator-syntax",children:[]},{value:"<code>__slots__</code> Attribute",id:"__slots__-attribute",children:[]},{value:"Final Comments on Encapsulation",id:"final-comments-on-encapsulation",children:[]},{value:"Exercises",id:"exercises",children:[{value:"Exercise 5.6: Simple Properties",id:"exercise-56-simple-properties",children:[]},{value:"Exercise 5.7: Properties and Setters",id:"exercise-57-properties-and-setters",children:[]},{value:"Exercise 5.8: Adding slots",id:"exercise-58-adding-slots",children:[]}]}],c={toc:l};function p(e){var t=e.components,n=Object(s.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"When writing classes, it is common to try and encapsulate internal details.\nThis section introduces a few Python programming idioms for this including\nprivate variables and properties."),Object(r.b)("h3",{id:"public-vs-private"},"Public vs Private."),Object(r.b)("p",null,"One of the primary roles of a class is to encapsulate data and internal\nimplementation details of an object.  However, a class also defines a\n",Object(r.b)("em",{parentName:"p"},"public")," interface that the outside world is supposed to use to\nmanipulate the object.  This distinction between implementation\ndetails and the public interface is important."),Object(r.b)("h3",{id:"a-problem"},"A Problem"),Object(r.b)("p",null,"In Python, almost everything about classes and objects is ",Object(r.b)("em",{parentName:"p"},"open"),"."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"You can easily inspect object internals."),Object(r.b)("li",{parentName:"ul"},"You can change things at will."),Object(r.b)("li",{parentName:"ul"},"There is no strong notion of access-control (i.e., private class members)")),Object(r.b)("p",null,"That is an issue when you are trying to isolate details of the ",Object(r.b)("em",{parentName:"p"},"internal implementation"),"."),Object(r.b)("h3",{id:"python-encapsulation"},"Python Encapsulation"),Object(r.b)("p",null,"Python relies on programming conventions to indicate the intended use\nof something.  These conventions are based on naming.  There is a\ngeneral attitude that it is up to the programmer to observe the rules\nas opposed to having the language enforce them."),Object(r.b)("h3",{id:"private-attributes"},"Private Attributes"),Object(r.b)("p",null,"Any attribute name with leading ",Object(r.b)("inlineCode",{parentName:"p"},"_")," is considered to be ",Object(r.b)("em",{parentName:"p"},"private"),"."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"class Person(object):\n    def __init__(self, name):\n        self._name = 0\n")),Object(r.b)("p",null,"As mentioned earlier, this is only a programming style. You can still\naccess and change it."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},">>> p = Person('Guido')\n>>> p._name\n'Guido'\n>>> p._name = 'Dave'\n>>>\n")),Object(r.b)("p",null,"As a general rule, any name with a leading ",Object(r.b)("inlineCode",{parentName:"p"},"_")," is considered internal implementation\nwhether it's a variable, a function, or a module name.  If you find yourself using such\nnames directly, you're probably doing something wrong. Look for higher level functionality."),Object(r.b)("h3",{id:"simple-attributes"},"Simple Attributes"),Object(r.b)("p",null,"Consider the following class."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"class Stock:\n    def __init__(self, name, shares, price):\n        self.name = name\n        self.shares = shares\n        self.price = price\n")),Object(r.b)("p",null,"A surprising feature is that you can set the attributes\nto any value at all:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},">>> s = Stock('IBM', 50, 91.1)\n>>> s.shares = 100\n>>> s.shares = \"hundred\"\n>>> s.shares = [1, 0, 0]\n>>>\n")),Object(r.b)("p",null,"You might look at that and think you want some extra checks."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"s.shares = '50'     # Raise a TypeError, this is a string\n")),Object(r.b)("p",null,"How would you do it?"),Object(r.b)("h3",{id:"managed-attributes"},"Managed Attributes"),Object(r.b)("p",null,"One approach: introduce accessor methods."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},'class Stock:\n    def __init__(self, name, shares, price):\n        self.name = name\n        self.set_shares(shares)\n        self.price = price\n\n    # Function that layers the "get" operation\n    def get_shares(self):\n        return self._shares\n\n    # Function that layers the "set" operation\n    def set_shares(self, value):\n        if not isinstance(value, int):\n            raise TypeError(\'Expected an int\')\n        self._shares = value\n')),Object(r.b)("p",null,"Too bad that this breaks all of our existing code. ",Object(r.b)("inlineCode",{parentName:"p"},"s.shares = 50"),"\nbecomes ",Object(r.b)("inlineCode",{parentName:"p"},"s.set_shares(50)")),Object(r.b)("h3",{id:"properties"},"Properties"),Object(r.b)("p",null,"There is an alternative approach to the previous pattern."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"class Stock:\n    def __init__(self, name, shares, price):\n        self.name = name\n        self.shares = shares\n        self.price = price\n\n    @property\n    def shares(self):\n        return self._shares\n\n    @shares.setter\n    def shares(self, value):\n        if not isinstance(value, int):\n            raise TypeError('Expected int')\n        self._shares = value\n")),Object(r.b)("p",null,"Normal attribute access now triggers the getter and setter methods\nunder ",Object(r.b)("inlineCode",{parentName:"p"},"@property")," and ",Object(r.b)("inlineCode",{parentName:"p"},"@shares.setter"),"."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},">>> s = Stock('IBM', 50, 91.1)\n>>> s.shares         # Triggers @property\n50\n>>> s.shares = 75    # Triggers @shares.setter\n>>>\n")),Object(r.b)("p",null,"With this pattern, there are ",Object(r.b)("em",{parentName:"p"},"no changes")," needed to the source code.\nThe new ",Object(r.b)("em",{parentName:"p"},"setter")," is also called when there is an assignment within the class,\nincluding inside the ",Object(r.b)("inlineCode",{parentName:"p"},"__init__()")," method."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"class Stock:\n    def __init__(self, name, shares, price):\n        ...\n        # This assignment calls the setter below\n        self.shares = shares\n        ...\n\n    ...\n    @shares.setter\n    def shares(self, value):\n        if not isinstance(value, int):\n            raise TypeError('Expected int')\n        self._shares = value\n")),Object(r.b)("p",null,"There is often a confusion between a property and the use of private names.\nAlthough a property internally uses a private name like ",Object(r.b)("inlineCode",{parentName:"p"},"_shares"),", the rest\nof the class (not the property) can continue to use a name like ",Object(r.b)("inlineCode",{parentName:"p"},"shares"),"."),Object(r.b)("p",null,"Properties are also useful for computed data attributes."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"class Stock:\n    def __init__(self, name, shares, price):\n        self.name = name\n        self.shares = shares\n        self.price = price\n\n    @property\n    def cost(self):\n        return self.shares * self.price\n    ...\n")),Object(r.b)("p",null,"This allows you to drop the extra parantheses, hiding the fact that it's actually a method:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},">>> s = Stock('GOOG', 100, 490.1)\n>>> s.shares # Instance variable\n100\n>>> s.cost   # Computed Value\n49010.0\n>>>\n")),Object(r.b)("h3",{id:"uniform-access"},"Uniform access"),Object(r.b)("p",null,"The last example shows how to put a more uniform interface on an object.\nIf you don't do this, an object might be confusing to use:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},">>> s = Stock('GOOG', 100, 490.1)\n>>> a = s.cost() # Method\n49010.0\n>>> b = s.shares # Data attribute\n100\n>>>\n")),Object(r.b)("p",null,"Why is the ",Object(r.b)("inlineCode",{parentName:"p"},"()")," required for the cost, but not for the shares?  A property\ncan fix this."),Object(r.b)("h3",{id:"decorator-syntax"},"Decorator Syntax"),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"@"),' syntax is known as "decoration".  It specifies a modifier\nthat\'s applied to the function definition that immediately follows.'),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"...\n@property\ndef cost(self):\n    return self.shares * self.price\n")),Object(r.b)("h3",{id:"__slots__-attribute"},Object(r.b)("inlineCode",{parentName:"h3"},"__slots__")," Attribute"),Object(r.b)("p",null,"You can restrict the set of attributes names."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"class Stock:\n    __slots__ = ('name','_shares','price')\n    def __init__(self, name, shares, price):\n        self.name = name\n        ...\n")),Object(r.b)("p",null,"It will raise an error for other attributes."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},">>> s.price = 385.15\n>>> s.prices = 410.2\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in ?\nAttributeError: 'Stock' object has no attribute 'prices'\n")),Object(r.b)("p",null,"Although this prevents errors and restricts usage of objects, it's actually used for performance and\nmakes Python use memory more efficiently."),Object(r.b)("h3",{id:"final-comments-on-encapsulation"},"Final Comments on Encapsulation"),Object(r.b)("p",null,"Don't go overboard with private attributes, properties, slots,\netc. They serve a specific purpose and you may see them when reading\nother Python code.  However, they are not necessary for most\nday-to-day coding."),Object(r.b)("h2",{id:"exercises"},"Exercises"),Object(r.b)("h3",{id:"exercise-56-simple-properties"},"Exercise 5.6: Simple Properties"),Object(r.b)("p",null,'Properties are a useful way to add "computed attributes" to an object.\nIn ',Object(r.b)("inlineCode",{parentName:"p"},"stock.py"),", you created an object ",Object(r.b)("inlineCode",{parentName:"p"},"Stock"),".  Notice that on your\nobject there is a slight inconsistency in how different kinds of data\nare extracted:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},">>> from stock import Stock\n>>> s = Stock('GOOG', 100, 490.1)\n>>> s.shares\n100\n>>> s.price\n490.1\n>>> s.cost()\n49010.0\n>>>\n")),Object(r.b)("p",null,"Specifically, notice how you have to add the extra () to ",Object(r.b)("inlineCode",{parentName:"p"},"cost")," because it is a method."),Object(r.b)("p",null,"You can get rid of the extra () on ",Object(r.b)("inlineCode",{parentName:"p"},"cost()")," if you turn it into a property.\nTake your ",Object(r.b)("inlineCode",{parentName:"p"},"Stock")," class and modify it so that the cost calculation works like this:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},">>> ================================ RESTART ================================\n>>> from stock import Stock\n>>> s = Stock('GOOG', 100, 490.1)\n>>> s.cost\n49010.0\n>>>\n")),Object(r.b)("p",null,"Try calling ",Object(r.b)("inlineCode",{parentName:"p"},"s.cost()")," as a function and observe that it\ndoesn't work now that ",Object(r.b)("inlineCode",{parentName:"p"},"cost")," has been defined as a property."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},">>> s.cost()\n... fails ...\n>>>\n")),Object(r.b)("p",null,"Making this change will likely break your earlier ",Object(r.b)("inlineCode",{parentName:"p"},"pcost.py")," program.\nYou might need to go back and get rid of the ",Object(r.b)("inlineCode",{parentName:"p"},"()")," on the ",Object(r.b)("inlineCode",{parentName:"p"},"cost()")," method."),Object(r.b)("h3",{id:"exercise-57-properties-and-setters"},"Exercise 5.7: Properties and Setters"),Object(r.b)("p",null,"Modify the ",Object(r.b)("inlineCode",{parentName:"p"},"shares")," attribute so that the value is stored in a\nprivate attribute and that a pair of property functions are used to ensure\nthat it is always set to an integer value.  Here is an example of the expected\nbehavior:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},">>> ================================ RESTART ================================\n>>> from stock import Stock\n>>> s = Stock('GOOG',100,490.10)\n>>> s.shares = 50\n>>> s.shares = 'a lot'\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: expected an integer\n>>>\n")),Object(r.b)("h3",{id:"exercise-58-adding-slots"},"Exercise 5.8: Adding slots"),Object(r.b)("p",null,"Modify the ",Object(r.b)("inlineCode",{parentName:"p"},"Stock")," class so that it has a ",Object(r.b)("inlineCode",{parentName:"p"},"__slots__")," attribute.  Then,\nverify that new attributes can't be added:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},">>> ================================ RESTART ================================\n>>> from stock import Stock\n>>> s = Stock('GOOG', 100, 490.10)\n>>> s.name\n'GOOG'\n>>> s.blah = 42\n... see what happens ...\n>>>\n")),Object(r.b)("p",null,"When you use ",Object(r.b)("inlineCode",{parentName:"p"},"__slots__"),", Python uses a more efficient\ninternal representation of objects.   What happens if you try to\ninspect the underlying dictionary of ",Object(r.b)("inlineCode",{parentName:"p"},"s")," above?"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},">>> s.__dict__\n... see what happens ...\n>>>\n")),Object(r.b)("p",null,"It should be noted that ",Object(r.b)("inlineCode",{parentName:"p"},"__slots__")," is most commonly used as an\noptimization on classes that serve as data structures.  Using slots\nwill make such programs use far-less memory and run a bit faster.\nYou should probably avoid ",Object(r.b)("inlineCode",{parentName:"p"},"__slots__")," on most other classes however."))}p.isMDXComponent=!0}}]);