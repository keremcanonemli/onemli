(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{280:function(e,t,n){"use strict";n.d(t,"a",(function(){return s})),n.d(t,"b",(function(){return g}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function p(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?p(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):p(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=a.a.createContext({}),u=function(e){var t=a.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=u(e.components);return a.a.createElement(c.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),s=u(n),d=r,g=s["".concat(p,".").concat(d)]||s[d]||b[d]||o;return n?a.a.createElement(g,i(i({ref:t},c),{},{components:n})):a.a.createElement(g,i({ref:t},c))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,p=new Array(o);p[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,p[1]=i;for(var c=2;c<o;c++)p[c]=n[c];return a.a.createElement.apply(null,p)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},75:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return p})),n.d(t,"metadata",(function(){return i})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return u}));var r=n(3),a=n(8),o=(n(0),n(280)),p={id:"non_capturing_group",title:"Non-Capturing Group",sidebar_label:"14.8 Non-Capturing Group",slug:"non-capturing_group",custom_edit_url:null},i={unversionedId:"python/regex/non_capturing_group",id:"python/regex/non_capturing_group",isDocsHomePage:!1,title:"Non-Capturing Group",description:"By default, everything that fell into the group is remembered. It\u2019s called a capturing group.",source:"@site/docs/python/regex/8_non_capturing.md",slug:"/python/regex/non-capturing_group",permalink:"/docs/python/regex/non-capturing_group",editUrl:null,version:"current",sidebar_label:"14.8 Non-Capturing Group",sidebar:"someSidebar",previous:{title:"Parsing The Output",permalink:"/docs/python/regex/parsing_the_output"},next:{title:"Repeating The Captured Result",permalink:"/docs/python/regex/repeating_the_captured_result"}},l=[],c={toc:l};function u(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"By default, everything that fell into the group is remembered. It\u2019s called a capturing group."),Object(o.b)("p",null,"Sometimes parentheses are needed to indicate a part of expression that repeats. And, in doing so, you don\u2019t need to remember an expression."),Object(o.b)("p",null,"For example, get a MAC address, VLAN and ports from log message:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"In [1]: log = 'Jun  3 14:39:05.941: %SW_MATM-4-MACFLAP_NOTIF: Host f03a.b216.7ad7 in vlan 10 is flapping between port Gi0/5 and port Gi0/15'\n")),Object(o.b)("p",null,"A regex that describes substrings:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"In [2]: match = re.search('((\\w{4}\\.){2}\\w{4}).+vlan (\\d+).+port (\\S+).+port (\\S+)', log)\n")),Object(o.b)("p",null,"Expression consists of the following parts:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"((\\w{4}\\.){2}\\w{4})")," - MAC address gets here"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"\\w{4}\\.")," - this part describes 4 letters or digits and a dot"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"(\\w{4}\\.){2}")," - here parentheses are used to indicate that 4 letters or digits and a dot are repeated twice"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"\\w{4}")," - then 4 letters or numbers"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},".+vlan (\\d+)")," - VLAN number falls into the group"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},".+port (\\S+)")," - first interface"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},".+port (\\S+)")," - second interface")),Object(o.b)("p",null,"Method ",Object(o.b)("inlineCode",{parentName:"p"},"groups")," returns:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"In [3]: match.groups()\nOut[3]: ('f03a.b216.7ad7', 'b216.', '10', 'Gi0/5', 'Gi0/15')\n")),Object(o.b)("p",null,"The second element is essentially superfluous. It appeared in the output because of parentheses in expression ",Object(o.b)("inlineCode",{parentName:"p"},"(\\w{4}\\.){2}"),"."),Object(o.b)("p",null,"In this case, you need to disable capture in the group. This is done by adding ",Object(o.b)("inlineCode",{parentName:"p"},"?:")," after the group\u2019s opening parenthesis."),Object(o.b)("p",null,"Now the expression looks like this:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"In [4]: match = re.search('((?:\\w{4}\\.){2}\\w{4}).+vlan (\\d+).+port (\\S+).+port (\\S+)', log)\n")),Object(o.b)("p",null,"Accordingly, ",Object(o.b)("inlineCode",{parentName:"p"},"groups")," method returns:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"In [5]: match.groups()\nOut[5]: ('f03a.b216.7ad7', '10', 'Gi0/5', 'Gi0/15')\n")))}u.isMDXComponent=!0}}]);