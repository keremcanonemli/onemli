(window.webpackJsonp=window.webpackJsonp||[]).push([[67],{139:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return p})),t.d(n,"toc",(function(){return c})),t.d(n,"default",(function(){return i}));var a=t(3),r=t(8),l=(t(0),t(280)),o={id:"if_elif_else",title:"If/Elif/Else",sidebar_label:"6.1 If/Elif/Else",slug:"if_elif_else",custom_edit_url:null},p={unversionedId:"python/control_structures/if_elif_else",id:"python/control_structures/if_elif_else",isDocsHomePage:!1,title:"If/Elif/Else",description:"The if/elif/else statement allows make branches during program execution. The program goes into branch when a certain condition is met.",source:"@site/docs/python/control_structures/1_if_elif_else.md",slug:"/python/control_structures/if_elif_else",permalink:"/docs/python/control_structures/if_elif_else",editUrl:null,version:"current",sidebar_label:"6.1 If/Elif/Else",sidebar:"someSidebar",previous:{title:"Control Structures",permalink:"/docs/python/control_structures/control_structures"},next:{title:"For",permalink:"/docs/python/control_structures/for"}},c=[{value:"Condition",id:"condition",children:[{value:"True and False",id:"true-and-false",children:[]},{value:"Comparison operators",id:"comparison-operators",children:[]},{value:"Operator in",id:"operator-in",children:[]},{value:"Operators and, or, not",id:"operators-and-or-not",children:[]}]},{value:"Example of if/elif/else statement",id:"example-of-ifelifelse-statement",children:[]},{value:"Ternary expression",id:"ternary-expression",children:[]}],s={toc:c};function i(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(l.b)("wrapper",Object(a.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(l.b)("p",null,"The ",Object(l.b)("inlineCode",{parentName:"p"},"if/elif/else")," statement allows make branches during program execution. The program goes into branch when a certain condition is met."),Object(l.b)("p",null,"In this statement only ",Object(l.b)("inlineCode",{parentName:"p"},"if")," is mandatory, ",Object(l.b)("inlineCode",{parentName:"p"},"elif")," and ",Object(l.b)("inlineCode",{parentName:"p"},"else")," are optional:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"if")," condition is always checked first."),Object(l.b)("li",{parentName:"ul"},"After ",Object(l.b)("inlineCode",{parentName:"li"},"if")," statement there must be some condition: if this condition is met (returns True), then actions in block ",Object(l.b)("inlineCode",{parentName:"li"},"if")," are executed."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"elif")," can be used to make multiple branches, that is, to check incoming data for different conditions."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"elif")," block is the same as ",Object(l.b)("inlineCode",{parentName:"li"},"if")," but it checked next. Roughly speaking, it is \u201cotherwise if \u2026\u201d"),Object(l.b)("li",{parentName:"ul"},"There can be many ",Object(l.b)("inlineCode",{parentName:"li"},"elif")," blocks."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"else")," block is executed if none of conditions ",Object(l.b)("inlineCode",{parentName:"li"},"if")," or ",Object(l.b)("inlineCode",{parentName:"li"},"elif")," were true.")),Object(l.b)("p",null,"Example of if statement:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"a = 9\n\nif a == 10:\n    print('a equal to 10')\nelif a < 10:\n    print('a less than 10')\nelse:\n    print('a less than 10')\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"a less than 10\n")),Object(l.b)("h2",{id:"condition"},"Condition"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"If")," expression is based on conditions: conditions are always written after ",Object(l.b)("inlineCode",{parentName:"p"},"if")," and ",Object(l.b)("inlineCode",{parentName:"p"},"elif"),". Blocks if/elif are executed only when condition returns True, so the first thing to deal with is what is true and what is false in Python."),Object(l.b)("h3",{id:"true-and-false"},"True and False"),Object(l.b)("p",null,"In Python, apart from obvious True and False values, all other objects also have false or true value:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"True value:",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"any non-zero number"),Object(l.b)("li",{parentName:"ul"},"any non-empty string"),Object(l.b)("li",{parentName:"ul"},"any non-empty object"))),Object(l.b)("li",{parentName:"ul"},"False value:",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"0"),Object(l.b)("li",{parentName:"ul"},"None"),Object(l.b)("li",{parentName:"ul"},"empty string"),Object(l.b)("li",{parentName:"ul"},"empty object")))),Object(l.b)("p",null,"For example, since an empty list is a false value, it is possible to check whether list is empty:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},'list_to_test = [1, 2, 3]\n\nif list_to_test:\n    print("The list has objects")\n\n')),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," The list has objects\n")),Object(l.b)("p",null,"The same result could have been achieved somewhat differently:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},'if len(list_to_test) != 0:\n    print("The list has objects")\n')),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," The list has objects\n")),Object(l.b)("h3",{id:"comparison-operators"},"Comparison operators"),Object(l.b)("p",null,Object(l.b)("em",{parentName:"p"},"Comparison operators")," can be used in conditions like:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"print(5 > 6)\n\nprint(5 > 2)\n\nprint(5 < 2)\n\nprint(5 == 2)\n\nprint(5 == 5)\n\nprint(5 >= 5)\n\nprint(5 <= 10)\n\nprint(8 != 10)\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," False\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," True\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," False\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," False\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," True\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," True\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," True\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," True\n")),Object(l.b)("p",null,"Note"),Object(l.b)("p",null,"Note that equality is checked by double ",Object(l.b)("inlineCode",{parentName:"p"},"=="),"."),Object(l.b)("p",null,"Example of use of comparison operators:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"a = 9\nif a == 10:\n    print('a equal to 10')\nelif a < 10:\n    print('a less than 10')\nelse:\n    print('a greater than 10')\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," a less than 10\n")),Object(l.b)("h3",{id:"operator-in"},"Operator in"),Object(l.b)("p",null,"Operator ",Object(l.b)("inlineCode",{parentName:"p"},"in")," allows checking for the presence of element in a sequence (for example, element in a list or substrings in a string):"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"print('Fast' in 'FastEthernet')\n\nprint('Gigabit' in 'FastEthernet')\n\nvlan = [10, 20, 30, 40]\n\nprint(10 in vlan)\n\nprint(50 in vlan)\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," True\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," False\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," True\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," False\n")),Object(l.b)("p",null,"When used with dictionaries, ",Object(l.b)("inlineCode",{parentName:"p"},"in")," condition performs check by dictionary keys:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"r1 = {\n 'IOS': '15.4',\n 'IP': '10.255.0.1',\n 'hostname': 'london_r1',\n 'location': '21 New Globe Walk',\n 'model': '4451',\n 'vendor': 'Cisco'}\n\nprint('IOS' in r1)\n\nprint('4451' in r1)\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," True\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," False\n")),Object(l.b)("h3",{id:"operators-and-or-not"},"Operators and, or, not"),Object(l.b)("p",null,"Conditions can also use ",Object(l.b)("em",{parentName:"p"},"logical operators")," ",Object(l.b)("inlineCode",{parentName:"p"},"and"),", ",Object(l.b)("inlineCode",{parentName:"p"},"or"),", ",Object(l.b)("inlineCode",{parentName:"p"},"not"),":"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"r1 = {\n'IOS': '15.4',\n'IP': '10.255.0.1',\n'hostname': 'london_r1',\n'location': '21 New Globe Walk',\n'model': '4451',\n'vendor': 'Cisco'}\n\nvlan = [10, 20, 30, 40]\n\nprint('IOS' in r1 and 10 in vlan)\n\nprint('4451' in r1 and 10 in vlan)\n\nprint('4451' in r1 or 10 in vlan)\n\nprint(not '4451' in r1)\n\nprint('4451' not in r1)\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," True\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," False\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," True\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," True\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," True\n")),Object(l.b)("h4",{id:"operator-and"},"Operator and"),Object(l.b)("p",null,"In Python ",Object(l.b)("inlineCode",{parentName:"p"},"and")," operator returns not a boolean value but a value of one of operands."),Object(l.b)("p",null,"If both operands are true, result is the last value:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"print('string1' and 'string2')\n\nprint('string1' and 'string2' and 'string3')\n\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," string2\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," string3\n")),Object(l.b)("p",null,"If one of operators is a false, result of expression will be the first false value:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"print('' and 'string1')\n\nprint('' and [] and 'string1')\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," ''\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," ''\n")),Object(l.b)("h4",{id:"operator-or"},"Operator or"),Object(l.b)("p",null,"Operator ",Object(l.b)("inlineCode",{parentName:"p"},"or"),", like operator ",Object(l.b)("inlineCode",{parentName:"p"},"and"),", returns one of operands value."),Object(l.b)("p",null,"When checking operands, the first true operand is returned:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"print('' or 'string1')\n\nprint('' or [] or 'string1')\n\nprint('string1'or 'string2')\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," string1\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," string1\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"string1 \n")),Object(l.b)("p",null,"If all values are false, the last value is returned:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"print('' or [] or {})\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," {}\n")),Object(l.b)("p",null,"An important feature of ",Object(l.b)("inlineCode",{parentName:"p"},"or")," operator - operands, which are after the true operand, are not calculated:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"print('' or sorted([44, 1, 67]))\n\nprint('' or 'string1' or sorted([44, 1, 67]))\n\n")),Object(l.b)("p",null,"Output"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," [1, 44, 67]\n")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"}," string1\n")),Object(l.b)("h2",{id:"example-of-ifelifelse-statement"},"Example of if/elif/else statement"),Object(l.b)("p",null,"An example of a check_password.py script that checks length of password and whether password contains username:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"# -*- coding: utf-8 -*-\n\nusername = input('Enter username: ')\npassword = input('Enter password: ')\n\nif len(password) < 8:\n    print('Password is too short')\nelif username in password:\n    print('Password contains username')\nelse:\n    print('Password for user {} is set'.format(username))\n")),Object(l.b)("p",null,"Script check:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"$ python check_password.py\nEnter username: nata\nEnter password: nata1234\nPassword contains username\n\n$ python check_password.py\nEnter username: nata\nEnter password: 123nata123\nPassword contains username\n\n$ python check_password.py\nEnter username: nata\nEnter password: 1234\nPassword is too short\n\n$ python check_password.py\nEnter username: nata\nEnter password: 123456789\nPassword for user nata is set\n")),Object(l.b)("h2",{id:"ternary-expression"},"Ternary expression"),Object(l.b)("p",null,"It is sometimes more convenient to use a ternary operator than an extended form:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"s = [1, 2, 3, 4]\nresult = True if len(s) > 5 else False\n")),Object(l.b)("p",null,"It is best not to abuse it but in simple terms such a record can be useful."))}i.isMDXComponent=!0},280:function(e,n,t){"use strict";t.d(n,"a",(function(){return b})),t.d(n,"b",(function(){return d}));var a=t(0),r=t.n(a);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function p(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=r.a.createContext({}),i=function(e){var n=r.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):p(p({},n),e)),t},b=function(e){var n=i(e.components);return r.a.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},m=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,o=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),b=i(t),m=a,d=b["".concat(o,".").concat(m)]||b[m]||u[m]||l;return t?r.a.createElement(d,p(p({ref:n},s),{},{components:t})):r.a.createElement(d,p({ref:n},s))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,o=new Array(l);o[0]=m;var p={};for(var c in n)hasOwnProperty.call(n,c)&&(p[c]=n[c]);p.originalType=e,p.mdxType="string"==typeof e?e:a,o[1]=p;for(var s=2;s<l;s++)o[s]=t[s];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"}}]);