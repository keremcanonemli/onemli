(window.webpackJsonp=window.webpackJsonp||[]).push([[164],{236:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return u})),t.d(n,"toc",(function(){return c})),t.d(n,"default",(function(){return i}));var r=t(3),a=t(8),s=(t(0),t(280)),o={id:"subprocess",title:"Subprocess",sidebar_label:"12.1 Subprocess",slug:"subprocess",custom_edit_url:null},u={unversionedId:"python/useful_modules/subprocess",id:"python/useful_modules/subprocess",isDocsHomePage:!1,title:"Subprocess",description:"Subprocess module allows you to create new processes. It can then connect to standard input/output/error streams and receive a return code.",source:"@site/docs/python/useful_modules/1_subprocess.md",slug:"/python/useful_modules/subprocess",permalink:"/tr/docs/python/useful_modules/subprocess",editUrl:null,version:"current",sidebar_label:"12.1 Subprocess",sidebar:"someSidebar",previous:{title:"Tasks",permalink:"/tr/docs/python/modules/tasks"},next:{title:"Os",permalink:"/tr/docs/python/useful_modules/os"}},c=[{value:"Function <code>subprocess.run()</code>",id:"function-subprocessrun",children:[]},{value:"Getting the result of a command execution",id:"getting-the-result-of-a-command-execution",children:[]},{value:"Output disabling",id:"output-disabling",children:[]},{value:"Working with standard error stream",id:"working-with-standard-error-stream",children:[]},{value:"Examples of module use",id:"examples-of-module-use",children:[]}],l={toc:c};function i(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(s.b)("wrapper",Object(r.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(s.b)("p",null,"Subprocess module allows you to create new processes. It can then connect to ",Object(s.b)("a",{parentName:"p",href:"http://xgu.ru/wiki/stdin"},"standard input/output/error streams")," and receive a return code."),Object(s.b)("p",null,"Subprocess can for example execute any Linux commands from script. And depending on situation, get the output or just check that command has been performed correctly."),Object(s.b)("p",null,"Note"),Object(s.b)("p",null,"In Python 3.5, syntax of subprocess module has changed."),Object(s.b)("h2",{id:"function-subprocessrun"},"Function ",Object(s.b)("inlineCode",{parentName:"h2"},"subprocess.run()")),Object(s.b)("p",null,"Function ",Object(s.b)("inlineCode",{parentName:"p"},"subprocess.run()")," is the main way of working with subprocess module."),Object(s.b)("p",null,"The easiest way to use a function is to call it in this way:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python"},"In [1]: import subprocess\n\nIn [2]: result = subprocess.run('ls')\nipython_as_mngmt_console.md  README.md         version_control.md\nmodule_search.md             useful_functions\nnaming_conventions           useful_modules\n")),Object(s.b)("p",null,"The ",Object(s.b)("strong",{parentName:"p"},"result")," variable now contains a special CompletedProcess object. From this object you can get information about execution of process, such as return code:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python"},"In [3]: result\nOut[3]: CompletedProcess(args='ls', returncode=0)\n\nIn [4]: result.returncode\nOut[4]: 0\n")),Object(s.b)("p",null,"Code 0 means that program was executed successfully."),Object(s.b)("p",null,"If it is necessary to call a command with arguments, it should be passed in this way (as a list):"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python"},"In [5]: result = subprocess.run(['ls', '-ls'])\ntotal 28\n4 -rw-r--r-- 1 vagrant vagrant   56 Jun  7 19:35 ipython_as_mngmt_console.md\n4 -rw-r--r-- 1 vagrant vagrant 1638 Jun  7 19:35 module_search.md\n4 drwxr-xr-x 2 vagrant vagrant 4096 Jun  7 19:35 naming_conventions\n4 -rw-r--r-- 1 vagrant vagrant  277 Jun  7 19:35 README.md\n4 drwxr-xr-x 2 vagrant vagrant 4096 Jun 16 05:11 useful_functions\n4 drwxr-xr-x 2 vagrant vagrant 4096 Jun 17 16:28 useful_modules\n4 -rw-r--r-- 1 vagrant vagrant   49 Jun  7 19:35 version_control.md\n")),Object(s.b)("p",null,"Trying to execute a command using wildcard expressions, for example using ",Object(s.b)("inlineCode",{parentName:"p"},"*"),", will cause an error:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python"},"In [6]: result = subprocess.run(['ls', '-ls', '*md'])\nls: cannot access *md: No such file or directory\n")),Object(s.b)("p",null,"To call commands in which wildcard expressions are used, you add ",Object(s.b)("strong",{parentName:"p"},"shell")," argument and call a command:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python"},"In [7]: result = subprocess.run('ls -ls *md', shell=True)\n4 -rw-r--r-- 1 vagrant vagrant   56 Jun  7 19:35 ipython_as_mngmt_console.md\n4 -rw-r--r-- 1 vagrant vagrant 1638 Jun  7 19:35 module_search.md\n4 -rw-r--r-- 1 vagrant vagrant  277 Jun  7 19:35 README.md\n4 -rw-r--r-- 1 vagrant vagrant   49 Jun  7 19:35 version_control.md\n")),Object(s.b)("p",null,"Another feature of ",Object(s.b)("inlineCode",{parentName:"p"},"run()")," If you try to run a ping command, for example, this aspect will be visible:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python"},"In [8]: result = subprocess.run(['ping', '-c', '3', '-n', '8.8.8.8'])\nPING 8.8.8.8 (8.8.8.8) 56(84) bytes of data.\n64 bytes from 8.8.8.8: icmp_seq=1 ttl=43 time=55.1 ms\n64 bytes from 8.8.8.8: icmp_seq=2 ttl=43 time=54.7 ms\n64 bytes from 8.8.8.8: icmp_seq=3 ttl=43 time=54.4 ms\n\n--- 8.8.8.8 ping statistics ---\n3 packets transmitted, 3 received, 0% packet loss, time 2004ms\nrtt min/avg/max/mdev = 54.498/54.798/55.116/0.252 ms\n")),Object(s.b)("h2",{id:"getting-the-result-of-a-command-execution"},"Getting the result of a command execution"),Object(s.b)("p",null,"By default, run() function returns the result of a command execution to a standard output stream. If you want to get the result of command execution, add ",Object(s.b)("strong",{parentName:"p"},"stdout")," argument with value ",Object(s.b)("strong",{parentName:"p"},"subprocess.PIPE"),":"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python"},"In [9]: result = subprocess.run(['ls', '-ls'], stdout=subprocess.PIPE)\n")),Object(s.b)("p",null,"Now you can get the result of command executing in this way:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python"},"In [10]: print(result.stdout)\nb'total 28\\n4 -rw-r--r-- 1 vagrant vagrant   56 Jun  7 19:35 ipython_as_mngmt_console.md\\n4 -rw-r--r-- 1 vagrant vagrant 1638 Jun  7 19:35 module_search.md\\n4 drwxr-xr-x 2 vagrant vagrant 4096 Jun  7 19:35 naming_conventions\\n4 -rw-r--r-- 1 vagrant vagrant  277 Jun  7 19:35 README.md\\n4 drwxr-xr-x 2 vagrant vagrant 4096 Jun 16 05:11 useful_functions\\n4 drwxr-xr-x 2 vagrant vagrant 4096 Jun 17 16:30 useful_modules\\n4 -rw-r--r-- 1 vagrant vagrant   49 Jun  7 19:35 version_control.md\\n'\n")),Object(s.b)("p",null,"Note letter ",Object(s.b)("strong",{parentName:"p"},"b")," before line. It means that module returned the output as a byte string. There are two options to translate it into unicode:"),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},"decode received string"),Object(s.b)("li",{parentName:"ul"},"specify encoding argument")),Object(s.b)("p",null,"Example with decode:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python"},"In [11]: print(result.stdout.decode('utf-8'))\ntotal 28\n4 -rw-r--r-- 1 vagrant vagrant   56 Jun  7 19:35 ipython_as_mngmt_console.md\n4 -rw-r--r-- 1 vagrant vagrant 1638 Jun  7 19:35 module_search.md\n4 drwxr-xr-x 2 vagrant vagrant 4096 Jun  7 19:35 naming_conventions\n4 -rw-r--r-- 1 vagrant vagrant  277 Jun  7 19:35 README.md\n4 drwxr-xr-x 2 vagrant vagrant 4096 Jun 16 05:11 useful_functions\n4 drwxr-xr-x 2 vagrant vagrant 4096 Jun 17 16:30 useful_modules\n4 -rw-r--r-- 1 vagrant vagrant   49 Jun  7 19:35 version_control.md\n")),Object(s.b)("p",null,"Example with encoding:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python"},"In [12]: result = subprocess.run(['ls', '-ls'], stdout=subprocess.PIPE, encoding='utf-8')\n\nIn [13]: print(result.stdout)\ntotal 28\n4 -rw-r--r-- 1 vagrant vagrant   56 Jun  7 19:35 ipython_as_mngmt_console.md\n4 -rw-r--r-- 1 vagrant vagrant 1638 Jun  7 19:35 module_search.md\n4 drwxr-xr-x 2 vagrant vagrant 4096 Jun  7 19:35 naming_conventions\n4 -rw-r--r-- 1 vagrant vagrant  277 Jun  7 19:35 README.md\n4 drwxr-xr-x 2 vagrant vagrant 4096 Jun 16 05:11 useful_functions\n4 drwxr-xr-x 2 vagrant vagrant 4096 Jun 17 16:31 useful_modules\n4 -rw-r--r-- 1 vagrant vagrant   49 Jun  7 19:35 version_control.md\n")),Object(s.b)("h2",{id:"output-disabling"},"Output disabling"),Object(s.b)("p",null,"Sometimes it is enough to get only return code and need to disable output of execution result on standard output stream. This can be done by passing to run() function the ",Object(s.b)("strong",{parentName:"p"},"stdout")," argument with value ",Object(s.b)("strong",{parentName:"p"},"subprocess.DEVNULL"),":"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python"},"In [14]: result = subprocess.run(['ls', '-ls'], stdout=subprocess.DEVNULL)\n\nIn [15]: print(result.stdout)\nNone\n\nIn [16]: print(result.returncode)\n0\n")),Object(s.b)("h2",{id:"working-with-standard-error-stream"},"Working with standard error stream"),Object(s.b)("p",null,"If command was executed with error or failed, the output of command will fall on standard error stream."),Object(s.b)("p",null,"This can be obtained in the same way as the standard output stream:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python"},"In [17]: result = subprocess.run(['ping', '-c', '3', '-n', 'a'], stderr=subprocess.PIPE, encoding='utf-8')\n")),Object(s.b)("p",null,"Now result.stdout has empty string and result.stderr has standard output stream:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python"},"In [18]: print(result.stdout)\nNone\n\nIn [19]: print(result.stderr)\nping: unknown host a\n\n\nIn [20]: print(result.returncode)\n2\n")),Object(s.b)("h2",{id:"examples-of-module-use"},"Examples of module use"),Object(s.b)("p",null,"Example of subprocess module use (subprocess_run_basic.py file):"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre"},"import subprocess\n\nreply = subprocess.run(['ping', '-c', '3', '-n', '8.8.8.8'])\n\nif reply.returncode == 0:\n    print('Alive')\nelse:\n    print('Unreachable')\n")),Object(s.b)("p",null,"The result will be:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre"},"$ python subprocess_run_basic.py\nPING 8.8.8.8 (8.8.8.8) 56(84) bytes of data.\n64 bytes from 8.8.8.8: icmp_seq=1 ttl=43 time=54.0 ms\n64 bytes from 8.8.8.8: icmp_seq=2 ttl=43 time=54.4 ms\n64 bytes from 8.8.8.8: icmp_seq=3 ttl=43 time=53.9 ms\n\n--- 8.8.8.8 ping statistics ---\n3 packets transmitted, 3 received, 0% packet loss, time 2005ms\nrtt min/avg/max/mdev = 53.962/54.145/54.461/0.293 ms\nAlive\n")),Object(s.b)("p",null,"That is, the result of command execution is printed to standard output stream."),Object(s.b)("p",null,"Function ping_ip() checks the availability of IP address and returns True and ",Object(s.b)("strong",{parentName:"p"},"stdout")," if address is available, or False and ",Object(s.b)("strong",{parentName:"p"},"stderr")," if address is not available (subprocess_ping_function.py file):"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre"},"import subprocess\n\n\ndef ping_ip(ip_address):\n    \"\"\"\n    Ping IP address and return tuple:\n    On success:\n        * True\n        * command output (stdout)\n    On failure:\n        * False\n        * error output (stderr)\n    \"\"\"\n    reply = subprocess.run(['ping', '-c', '3', '-n', ip_address],\n                           stdout=subprocess.PIPE,\n                           stderr=subprocess.PIPE,\n                           encoding='utf-8')\n    if reply.returncode == 0:\n        return True, reply.stdout\n    else:\n        return False, reply.stderr\n\nprint(ping_ip('8.8.8.8'))\nprint(ping_ip('a'))\n")),Object(s.b)("p",null,"The result will be:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre"},"$ python subprocess_ping_function.py\n(True, 'PING 8.8.8.8 (8.8.8.8) 56(84) bytes of data.\\n64 bytes from 8.8.8.8: icmp_seq=1 ttl=43 time=63.8 ms\\n64 bytes from 8.8.8.8: icmp_seq=2 ttl=43 time=55.6 ms\\n64 bytes from 8.8.8.8: icmp_seq=3 ttl=43 time=55.9 ms\\n\\n--- 8.8.8.8 ping statistics ---\\n3 packets transmitted, 3 received, 0% packet loss, time 2003ms\\nrtt min/avg/max/mdev = 55.643/58.492/63.852/3.802 ms\\n')\n(False, 'ping: unknown host a\\n')\n")),Object(s.b)("p",null,"Based on this function you can make a function that will check list of IP addresses and return as a result two lists: reachable and unreachable addresses."),Object(s.b)("p",null,"Note"),Object(s.b)("p",null,"You will find it in tasks of section"),Object(s.b)("p",null,"If number of IP addresses to check is large, you can use threading or multiprocessing modules to speed up verification."))}i.isMDXComponent=!0},280:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return m}));var r=t(0),a=t.n(r);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function u(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=a.a.createContext({}),i=function(e){var n=a.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):u(u({},n),e)),t},p=function(e){var n=i(e.components);return a.a.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},b=a.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,s=e.originalType,o=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=i(t),b=r,m=p["".concat(o,".").concat(b)]||p[b]||d[b]||s;return t?a.a.createElement(m,u(u({ref:n},l),{},{components:t})):a.a.createElement(m,u({ref:n},l))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=t.length,o=new Array(s);o[0]=b;var u={};for(var c in n)hasOwnProperty.call(n,c)&&(u[c]=n[c]);u.originalType=e,u.mdxType="string"==typeof e?e:r,o[1]=u;for(var l=2;l<s;l++)o[l]=t[l];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"}}]);