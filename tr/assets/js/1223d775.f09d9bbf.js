(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{280:function(e,n,t){"use strict";t.d(n,"a",(function(){return s})),t.d(n,"b",(function(){return h}));var r=t(0),a=t.n(r);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=a.a.createContext({}),u=function(e){var n=a.a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=u(e.components);return a.a.createElement(p.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},d=a.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),s=u(t),d=r,h=s["".concat(o,".").concat(d)]||s[d]||b[d]||l;return t?a.a.createElement(h,i(i({ref:n},p),{},{components:t})):a.a.createElement(h,i({ref:n},p))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,o=new Array(l);o[0]=d;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var p=2;p<l;p++)o[p]=t[p];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},82:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return i})),t.d(n,"toc",(function(){return c})),t.d(n,"default",(function(){return u}));var r=t(3),a=t(8),l=(t(0),t(280)),o={id:"module_telnetlib",title:"Module Telnetlib",sidebar_label:"18.4 Module Telnetlib",slug:"module_telnetlib",custom_edit_url:null},i={unversionedId:"python/ssh_telnet/module_telnetlib",id:"python/ssh_telnet/module_telnetlib",isDocsHomePage:!1,title:"Module Telnetlib",description:"Module telnetlib is part of standard Python library. This is telnet client implementation.",source:"@site/i18n/tr/docusaurus-plugin-content-docs/current/python/ssh_telnet/4_module_telnetlib.md",slug:"/python/ssh_telnet/module_telnetlib",permalink:"/tr/docs/python/ssh_telnet/module_telnetlib",editUrl:null,version:"current",sidebar_label:"18.4 Module Telnetlib",sidebar:"someSidebar",previous:{title:"Example Of Pexpect Use",permalink:"/tr/docs/python/ssh_telnet/example_of_pexpect_use"},next:{title:"Module Paramiko",permalink:"/tr/docs/python/ssh_telnet/module_paramiko"}},c=[{value:"Method <code>read_until</code>",id:"method-read_until",children:[]},{value:"Method write",id:"method-write",children:[]},{value:"Method <code>read_very_eager</code>",id:"method-read_very_eager",children:[]},{value:"<code>read_until</code> vs <code>read_very_eager</code>",id:"read_until-vs-read_very_eager",children:[]},{value:"Method <code>expect</code>",id:"method-expect",children:[]},{value:"Method close",id:"method-close",children:[]},{value:"Telnetlib usage example",id:"telnetlib-usage-example",children:[]},{value:"Paginated command output",id:"paginated-command-output",children:[]}],p={toc:c};function u(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(l.b)("wrapper",Object(r.a)({},p,t,{components:n,mdxType:"MDXLayout"}),Object(l.b)("p",null,"Module telnetlib is part of standard Python library. This is telnet client implementation."),Object(l.b)("p",null,"Note"),Object(l.b)("p",null,"It is also possible to connect via telnet using pexpect. The advantage of telnetlib is that this module is part of standard Python library."),Object(l.b)("p",null,"Telnetlib resembles pexpect but has several differences. The most notable difference is that telnetlib requires a pass of a byte string, rather than normal one."),Object(l.b)("p",null,"Connection is performed as follows:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"In [1]: telnet = telnetlib.Telnet('192.168.100.1')\n")),Object(l.b)("h2",{id:"method-read_until"},"Method ",Object(l.b)("inlineCode",{parentName:"h2"},"read_until")),Object(l.b)("p",null,"Method ",Object(l.b)("inlineCode",{parentName:"p"},"read_until")," specifies till which line the output should be read. However, as an argument, it is necessary to pass bytes, not the usual string:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"In [2]: telnet.read_until(b'Username')\nOut[2]: b'\\r\\n\\r\\nUser Access Verification\\r\\n\\r\\nUsername'\n")),Object(l.b)("p",null,"Method ",Object(l.b)("inlineCode",{parentName:"p"},"read_until")," returns everything it has read before specified string."),Object(l.b)("h2",{id:"method-write"},"Method write"),Object(l.b)("p",null,"The ",Object(l.b)("inlineCode",{parentName:"p"},"write")," method is used to transmit data. You must pass a byte string as an argument:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"In [3]: telnet.write(b'cisco\\n')\n")),Object(l.b)("p",null,"Read output till Password and pass the password:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"In [4]: telnet.read_until(b'Password')\nOut[4]: b': cisco\\r\\nPassword'\n\nIn [5]: telnet.write(b'cisco\\n')\n")),Object(l.b)("p",null,"You can now specify what should be read untill prompt and then send the command:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"In [6]: telnet.read_until(b'>')\nOut[6]: b': \\r\\nR1>'\n\nIn [7]: telnet.write(b'sh ip int br\\n')\n")),Object(l.b)("p",null,"After sending a command, you can continue to use ",Object(l.b)("inlineCode",{parentName:"p"},"read_until")," method:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"In [8]: telnet.read_until(b'>')\nOut[8]: b'sh ip int br\\r\\nInterface                  IP-Address      OK? Method Status                Protocol\\r\\nEthernet0/0                192.168.100.1   YES NVRAM  up                    up      \\r\\nEthernet0/1                192.168.200.1   YES NVRAM  up                    up      \\r\\nEthernet0/2                19.1.1.1        YES NVRAM  up                    up      \\r\\nEthernet0/3                192.168.230.1   YES NVRAM  up                    up      \\r\\nEthernet0/3.100            10.100.0.1      YES NVRAM  up                    up      \\r\\nEthernet0/3.200            10.200.0.1      YES NVRAM  up                    up      \\r\\nEthernet0/3.300            10.30.0.1       YES NVRAM  up                    up      \\r\\nR1>'\n")),Object(l.b)("h2",{id:"method-read_very_eager"},"Method ",Object(l.b)("inlineCode",{parentName:"h2"},"read_very_eager")),Object(l.b)("p",null,"Or use another read method ",Object(l.b)("inlineCode",{parentName:"p"},"read_very_eager"),". When using ",Object(l.b)("inlineCode",{parentName:"p"},"read_very_eager")," method, you can send multiple commands and then read all available output:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"In [9]: telnet.write(b'sh arp\\n')\n\nIn [10]: telnet.write(b'sh clock\\n')\n\nIn [11]: telnet.write(b'sh ip int br\\n')\n\nIn [12]: all_result = telnet.read_very_eager().decode('utf-8')\n\nIn [13]: print(all_result)\nsh arp\nProtocol  Address          Age (min)  Hardware Addr   Type   Interface\nInternet  10.30.0.1               -   aabb.cc00.6530  ARPA   Ethernet0/3.300\nInternet  10.100.0.1              -   aabb.cc00.6530  ARPA   Ethernet0/3.100\nInternet  10.200.0.1              -   aabb.cc00.6530  ARPA   Ethernet0/3.200\nInternet  19.1.1.1                -   aabb.cc00.6520  ARPA   Ethernet0/2\nInternet  192.168.100.1           -   aabb.cc00.6500  ARPA   Ethernet0/0\nInternet  192.168.100.2         124   aabb.cc00.6600  ARPA   Ethernet0/0\nInternet  192.168.100.3         143   aabb.cc00.6700  ARPA   Ethernet0/0\nInternet  192.168.100.100       160   aabb.cc80.c900  ARPA   Ethernet0/0\nInternet  192.168.200.1           -   0203.e800.6510  ARPA   Ethernet0/1\nInternet  192.168.200.100        13   0800.27ac.16db  ARPA   Ethernet0/1\nInternet  192.168.230.1           -   aabb.cc00.6530  ARPA   Ethernet0/3\nR1>sh clock\n*19:18:57.980 UTC Fri Nov 3 2017\nR1>sh ip int br\nInterface                  IP-Address      OK? Method Status                Protocol\nEthernet0/0                192.168.100.1   YES NVRAM  up                    up\nEthernet0/1                192.168.200.1   YES NVRAM  up                    up\nEthernet0/2                19.1.1.1        YES NVRAM  up                    up\nEthernet0/3                192.168.230.1   YES NVRAM  up                    up\nEthernet0/3.100            10.100.0.1      YES NVRAM  up                    up\nEthernet0/3.200            10.200.0.1      YES NVRAM  up                    up\nEthernet0/3.300            10.30.0.1       YES NVRAM  up                    up\nR1>\n")),Object(l.b)("p",null,"Warning"),Object(l.b)("p",null,"You should always set ",Object(l.b)("inlineCode",{parentName:"p"},"time.sleep(n)")," before using ",Object(l.b)("inlineCode",{parentName:"p"},"read_very_eager"),"."),Object(l.b)("p",null,"With ",Object(l.b)("inlineCode",{parentName:"p"},"read_until")," will be a slightly different approach. You can execute the same three commands, but then get the output one by one because of reading till prompt string:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"In [14]: telnet.write(b'sh arp\\n')\n\nIn [15]: telnet.write(b'sh clock\\n')\n\nIn [16]: telnet.write(b'sh ip int br\\n')\n\nIn [17]: telnet.read_until(b'>')\nOut[17]: b'sh arp\\r\\nProtocol  Address          Age (min)  Hardware Addr   Type   Interface\\r\\nInternet  10.30.0.1               -   aabb.cc00.6530  ARPA   Ethernet0/3.300\\r\\nInternet  10.100.0.1              -   aabb.cc00.6530  ARPA   Ethernet0/3.100\\r\\nInternet  10.200.0.1              -   aabb.cc00.6530  ARPA   Ethernet0/3.200\\r\\nInternet  19.1.1.1                -   aabb.cc00.6520  ARPA   Ethernet0/2\\r\\nInternet  192.168.100.1           -   aabb.cc00.6500  ARPA   Ethernet0/0\\r\\nInternet  192.168.100.2         126   aabb.cc00.6600  ARPA   Ethernet0/0\\r\\nInternet  192.168.100.3         145   aabb.cc00.6700  ARPA   Ethernet0/0\\r\\nInternet  192.168.100.100       162   aabb.cc80.c900  ARPA   Ethernet0/0\\r\\nInternet  192.168.200.1           -   0203.e800.6510  ARPA   Ethernet0/1\\r\\nInternet  192.168.200.100        15   0800.27ac.16db  ARPA   Ethernet0/1\\r\\nInternet  192.168.230.1           -   aabb.cc00.6530  ARPA   Ethernet0/3\\r\\nR1>'\n\nIn [18]: telnet.read_until(b'>')\nOut[18]: b'sh clock\\r\\n*19:20:39.388 UTC Fri Nov 3 2017\\r\\nR1>'\n\nIn [19]: telnet.read_until(b'>')\nOut[19]: b'sh ip int br\\r\\nInterface                  IP-Address      OK? Method Status                Protocol\\r\\nEthernet0/0                192.168.100.1   YES NVRAM  up                    up      \\r\\nEthernet0/1                192.168.200.1   YES NVRAM  up                    up      \\r\\nEthernet0/2                19.1.1.1        YES NVRAM  up                    up      \\r\\nEthernet0/3                192.168.230.1   YES NVRAM  up                    up      \\r\\nEthernet0/3.100            10.100.0.1      YES NVRAM  up                    up      \\r\\nEthernet0/3.200            10.200.0.1      YES NVRAM  up                    up      \\r\\nEthernet0/3.300            10.30.0.1       YES NVRAM  up                    up      \\r\\nR1>'\n")),Object(l.b)("h2",{id:"read_until-vs-read_very_eager"},Object(l.b)("inlineCode",{parentName:"h2"},"read_until")," vs ",Object(l.b)("inlineCode",{parentName:"h2"},"read_very_eager")),Object(l.b)("p",null,"An important difference between ",Object(l.b)("inlineCode",{parentName:"p"},"read_until")," and ",Object(l.b)("inlineCode",{parentName:"p"},"read_very_eager")," is how they react to the lack of output."),Object(l.b)("p",null,"Method ",Object(l.b)("inlineCode",{parentName:"p"},"read_until")," waits for a certain string. By default, if it does not exist, method will \u201cfreeze\u201d. Timeout option allows you to specify how long to wait for the desired string:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"In [20]: telnet.read_until(b'>', timeout=5)\nOut[20]: b''\n")),Object(l.b)("p",null,"If no string appears during the specified time, an empty string is returned."),Object(l.b)("p",null,"Method ",Object(l.b)("inlineCode",{parentName:"p"},"read_very_eager")," simply returns an empty string if there is no output:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"In [21]: telnet.read_very_eager()\nOut[21]: b''\n")),Object(l.b)("h2",{id:"method-expect"},"Method ",Object(l.b)("inlineCode",{parentName:"h2"},"expect")),Object(l.b)("p",null,"Method ",Object(l.b)("inlineCode",{parentName:"p"},"expect")," allows you to specify a list with regular expressions. It works like pexpect but telnetlib always has to pass a list of regular expressions."),Object(l.b)("p",null,"You can then pass byte strings or compiled regular expressions:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"In [22]: telnet.write(b'sh clock\\n')\n\nIn [23]: telnet.expect([b'[>#]'])\nOut[23]:\n(0,\n <_sre.SRE_Match object; span=(46, 47), match=b'>'>,\n b'sh clock\\r\\n*19:35:10.984 UTC Fri Nov 3 2017\\r\\nR1>')\n")),Object(l.b)("p",null,"Method ",Object(l.b)("inlineCode",{parentName:"p"},"expect")," returns tuple of their three elements:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"index of matched expression"),Object(l.b)("li",{parentName:"ul"},"object Match"),Object(l.b)("li",{parentName:"ul"},"byte string that contains everything read till regular expression including regular expression")),Object(l.b)("p",null,"Accordingly, if necessary you can continue working with these elements:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"In [24]: telnet.write(b'sh clock\\n')\n\nIn [25]: regex_idx, match, output = telnet.expect([b'[>#]'])\n\nIn [26]: regex_idx\nOut[26]: 0\n\nIn [27]: match.group()\nOut[27]: b'>'\n\nIn [28]: match\nOut[28]: <_sre.SRE_Match object; span=(46, 47), match=b'>'>\n\nIn [29]: match.group()\nOut[29]: b'>'\n\nIn [30]: output\nOut[30]: b'sh clock\\r\\n*19:37:21.577 UTC Fri Nov 3 2017\\r\\nR1>'\n\nIn [31]: output.decode('utf-8')\nOut[31]: 'sh clock\\r\\n*19:37:21.577 UTC Fri Nov 3 2017\\r\\nR1>'\n")),Object(l.b)("h2",{id:"method-close"},"Method close"),Object(l.b)("p",null,"Method ",Object(l.b)("inlineCode",{parentName:"p"},"close")," closes connection but it\u2019s better to open and close connection using context manager:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"In [32]: telnet.close()\n")),Object(l.b)("p",null,"Note"),Object(l.b)("p",null,"Using Telnet object as context manager added in version 3.6"),Object(l.b)("h2",{id:"telnetlib-usage-example"},"Telnetlib usage example"),Object(l.b)("p",null,"Working principle of telnetlib resembles pexpect, so the example below should be clear (2_telnetlib.py):"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},'import telnetlib\nimport time\nfrom pprint import pprint\n\n\ndef to_bytes(line):\n    return f"{line}\\n".encode("utf-8")\n\n\ndef send_show_command(ip, username, password, enable, commands):\n    with telnetlib.Telnet(ip) as telnet:\n        telnet.read_until(b"Username")\n        telnet.write(to_bytes(username))\n        telnet.read_until(b"Password")\n        telnet.write(to_bytes(password))\n        index, m, output = telnet.expect([b">", b"#"])\n        if index == 0:\n            telnet.write(b"enable\\n")\n            telnet.read_until(b"Password")\n            telnet.write(to_bytes(enable))\n            telnet.read_until(b"#", timeout=5)\n        telnet.write(b"terminal length 0\\n")\n        telnet.read_until(b"#", timeout=5)\n        time.sleep(3)\n        telnet.read_very_eager()\n\n        result = {}\n        for command in commands:\n            telnet.write(to_bytes(command))\n            output = telnet.read_until(b"#", timeout=5).decode("utf-8")\n            result[command] = output.replace("\\r\\n", "\\n")\n        return result\n\n\nif __name__ == "__main__":\n    devices = ["192.168.100.1", "192.168.100.2", "192.168.100.3"]\n    commands = ["sh ip int br", "sh arp"]\n    for ip in devices:\n        result = send_show_command(ip, "cisco", "cisco", "cisco", commands)\n        pprint(result, width=120)\n')),Object(l.b)("p",null,"Since bytes need to be passed to ",Object(l.b)("inlineCode",{parentName:"p"},"write")," method and new line character should be added each time, a small function ",Object(l.b)("inlineCode",{parentName:"p"},"to_bytes")," is created that does the conversion to bytes and adds a new line."),Object(l.b)("p",null,"Script execution:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"{'sh int desc': 'sh int desc\\n'\n                'Interface             Status         Protocol Description\\n'\n                'Et0/0                 up             up       \\n'\n                'Et0/1                 up             up       \\n'\n                'Et0/2                 up             up       \\n'\n                'Et0/3                 up             up       \\n'\n                'R1#',\n 'sh ip int br': 'sh ip int br\\n'\n                 'Interface         IP-Address      OK? Method Status                Protocol\\n'\n                 'Ethernet0/0       192.168.100.1   YES NVRAM  up                    up      \\n'\n                 'Ethernet0/1       192.168.200.1   YES NVRAM  up                    up      \\n'\n                 'Ethernet0/2       unassigned      YES NVRAM  up                    up      \\n'\n                 'Ethernet0/3       192.168.130.1   YES NVRAM  up                    up      \\n'\n                 'R1#'}\n{'sh int desc': 'sh int desc\\n'\n                'Interface             Status         Protocol Description\\n'\n                'Et0/0                 up             up       \\n'\n                'Et0/1                 up             up       \\n'\n                'Et0/2                 admin down     down     \\n'\n                'Et0/3                 admin down     down     \\n'\n                'R2#',\n 'sh ip int br': 'sh ip int br\\n'\n                 'Interface         IP-Address      OK? Method Status                Protocol\\n'\n                 'Ethernet0/0       192.168.100.2   YES NVRAM  up                    up      \\n'\n                 'Ethernet0/1       unassigned      YES NVRAM  up                    up      \\n'\n                 'Ethernet0/2       unassigned      YES NVRAM  administratively down down    \\n'\n                 'Ethernet0/3       unassigned      YES NVRAM  administratively down down    \\n'\n                 'R2#'}\n{'sh int desc': 'sh int desc\\n'\n                'Interface             Status         Protocol Description\\n'\n                'Et0/0                 up             up       \\n'\n                'Et0/1                 up             up       \\n'\n                'Et0/2                 admin down     down     \\n'\n                'Et0/3                 admin down     down     \\n'\n                'R3#',\n 'sh ip int br': 'sh ip int br\\n'\n                 'Interface         IP-Address      OK? Method Status                Protocol\\n'\n                 'Ethernet0/0       192.168.100.3   YES NVRAM  up                    up      \\n'\n                 'Ethernet0/1       unassigned      YES NVRAM  up                    up      \\n'\n                 'Ethernet0/2       unassigned      YES NVRAM  administratively down down    \\n'\n                 'Ethernet0/3       unassigned      YES NVRAM  administratively down down    \\n'\n")),Object(l.b)("h2",{id:"paginated-command-output"},"Paginated command output"),Object(l.b)("p",null,"Example of using telnetlib to work with paginated output of show commands (2_telnetlib_more.py file):"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},'import telnetlib\nimport time\nfrom pprint import pprint\nimport re\n\n\ndef to_bytes(line):\n    return f"{line}\\n".encode("utf-8")\n\n\ndef send_show_command(ip, username, password, enable, command):\n    with telnetlib.Telnet(ip) as telnet:\n        telnet.read_until(b"Username")\n        telnet.write(to_bytes(username))\n        telnet.read_until(b"Password")\n        telnet.write(to_bytes(password))\n        index, m, output = telnet.expect([b">", b"#"])\n        if index == 0:\n            telnet.write(b"enable\\n")\n            telnet.read_until(b"Password")\n            telnet.write(to_bytes(enable))\n            telnet.read_until(b"#", timeout=5)\n        time.sleep(3)\n        telnet.read_very_eager()\n\n        telnet.write(to_bytes(command))\n        result = ""\n\n        while True:\n            index, match, output = telnet.expect([b"--More--", b"#"], timeout=5)\n            output = output.decode("utf-8")\n            output = re.sub(" +--More--| +\\x08+ +\\x08+", "\\n", output)\n            result += output\n            if index in (1, -1):\n                break\n            telnet.write(b" ")\n            time.sleep(1)\n            result.replace("\\r\\n", "\\n")\n\n        return result\n\n\nif __name__ == "__main__":\n    devices = ["192.168.100.1", "192.168.100.2", "192.168.100.3"]\n    for ip in devices:\n        result = send_show_command(ip, "cisco", "cisco", "cisco", "sh run")\n        pprint(result, width=120)\n')))}u.isMDXComponent=!0}}]);