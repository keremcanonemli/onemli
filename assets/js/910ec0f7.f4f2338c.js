(window.webpackJsonp=window.webpackJsonp||[]).push([[128],{200:function(e,a,t){"use strict";t.r(a),t.d(a,"frontMatter",(function(){return o})),t.d(a,"metadata",(function(){return s})),t.d(a,"toc",(function(){return i})),t.d(a,"default",(function(){return p}));var n=t(3),l=t(8),r=(t(0),t(281)),o={id:"class_variables",title:"Class Variables",sidebar_label:"Class Variables",slug:"class_variables",custom_edit_url:null},s={unversionedId:"python/oop_basics/class_variables",id:"python/oop_basics/class_variables",isDocsHomePage:!1,title:"Class Variables",description:"Besides instance variables, there are also class variables. They are are created by specifying variables inside the class itself, not a method:",source:"@site/docs/python/oop_basics/8_class_variables.md",slug:"/python/oop_basics/class_variables",permalink:"/docs/python/oop_basics/class_variables",editUrl:null,version:"current",sidebar_label:"Class Variables",sidebar:"someSidebar",previous:{title:"Class Namespace",permalink:"/docs/python/oop_basics/class_namespace"},next:{title:"Tasks",permalink:"/docs/python/oop_basics/tasks"}},i=[],c={toc:i};function p(e){var a=e.components,t=Object(l.a)(e,["components"]);return Object(r.b)("wrapper",Object(n.a)({},c,t,{components:a,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Besides instance variables, there are also class variables. They are are created by specifying variables inside the class itself, not a method:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},'class Network:\n    all_allocated_ip = []\n\n    def __init__(self, network):\n        self.network = network\n        self.hosts = tuple(\n            str(ip) for ip in ipaddress.ip_network(network).hosts()\n        )\n        self.allocated = []\n\n\n    def allocate(self, ip):\n        if ip in self.hosts:\n            if ip not in self.allocated:\n                self.allocated.append(ip)\n                type(self).all_allocated_ip.append(ip)\n            else:\n                raise ValueError(f"IP address {ip} is already in the allocated list")\n        else:\n            raise ValueError(f"IP address {ip} does not belong to {self.network}")\n')),Object(r.b)("p",null,"Class variables can be accessed in different ways:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"self.all_allocated_ip")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Network.all_allocated_ip")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"type(self).all_allocated_ip"))),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"self.all_allocated_ip")," option allows you to access the value of class variable or add an element if the class variable is a mutable data type. The disadvantage of this option is that if in the method you write ",Object(r.b)("inlineCode",{parentName:"p"},"self.all_allocated_ip = ..."),", instead of changing the class variable, an instance variable will be created."),Object(r.b)("p",null,"\u0412\u0430\u0440\u0438\u0430\u043d\u0442 ",Object(r.b)("inlineCode",{parentName:"p"},"Network.all_allocated_ip")," \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e, \u043d\u043e \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u043c\u0438\u043d\u0443\u0441 \u044d\u0442\u043e\u0433\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430 \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e \u0438\u043c\u044f \u043a\u043b\u0430\u0441\u0441\u0430 \u043f\u0440\u043e\u043f\u0438\u0441\u0430\u043d\u043e \u0432\u0440\u0443\u0447\u043d\u0443\u044e. \u0412\u043c\u0435\u0441\u0442\u043e \u043d\u0435\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0442\u0440\u0435\u0442\u0438\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 ",Object(r.b)("inlineCode",{parentName:"p"},"type(self).all_allocated_ip"),", \u0442\u0430\u043a \u043a\u0430\u043a ",Object(r.b)("inlineCode",{parentName:"p"},"type(self)")," \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043a\u043b\u0430\u0441\u0441."),Object(r.b)("p",null,"The option ",Object(r.b)("inlineCode",{parentName:"p"},"Network.all_allocated_ip")," will work correctly, but a small drawback this option is that the class name is written manually. You can use the third option ",Object(r.b)("inlineCode",{parentName:"p"},"type(self).all_allocated_ip")," instead, since ",Object(r.b)("inlineCode",{parentName:"p"},"type(self)")," returns a class."),Object(r.b)("p",null,"Now the class has a variable all_allocated_ip which is written all IP addresses that are allocated on the networks:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"In [3]: net1 = Network(\"10.1.1.0/29\")\n\nIn [4]: net1.allocate(\"10.1.1.1\")\n   ...: net1.allocate(\"10.1.1.2\")\n   ...: net1.allocate(\"10.1.1.3\")\n   ...:\n\nIn [5]: net1.allocated\nOut[5]: ['10.1.1.1', '10.1.1.2', '10.1.1.3']\n\nIn [6]: net2 = Network(\"10.2.2.0/29\")\n\nIn [7]: net2.allocate(\"10.2.2.1\")\n   ...: net2.allocate(\"10.2.2.2\")\n   ...:\n\nIn [9]: net2.allocated\nOut[9]: ['10.2.2.1', '10.2.2.2']\n\nIn [10]: Network.all_allocated_ip\nOut[10]: ['10.1.1.1', '10.1.1.2', '10.1.1.3', '10.2.2.1', '10.2.2.2']\n")),Object(r.b)("p",null,"The variable is accessible not only through the class, but also through the instances:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"In [40]: Network.all_allocated_ip\nOut[40]: ['10.1.1.1', '10.1.1.2', '10.1.1.3', '10.2.2.1', '10.2.2.2']\n\nIn [41]: net1.all_allocated_ip\nOut[41]: ['10.1.1.1', '10.1.1.2', '10.1.1.3', '10.2.2.1', '10.2.2.2']\n\nIn [42]: net2.all_allocated_ip\nOut[42]: ['10.1.1.1', '10.1.1.2', '10.1.1.3', '10.2.2.1', '10.2.2.2']\n")))}p.isMDXComponent=!0},281:function(e,a,t){"use strict";t.d(a,"a",(function(){return b})),t.d(a,"b",(function(){return f}));var n=t(0),l=t.n(n);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function o(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function s(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?o(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function i(e,a){if(null==e)return{};var t,n,l=function(e,a){if(null==e)return{};var t,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||(l[t]=e[t]);return l}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var c=l.a.createContext({}),p=function(e){var a=l.a.useContext(c),t=a;return e&&(t="function"==typeof e?e(a):s(s({},a),e)),t},b=function(e){var a=p(e.components);return l.a.createElement(c.Provider,{value:a},e.children)},d={inlineCode:"code",wrapper:function(e){var a=e.children;return l.a.createElement(l.a.Fragment,{},a)}},u=l.a.forwardRef((function(e,a){var t=e.components,n=e.mdxType,r=e.originalType,o=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),b=p(t),u=n,f=b["".concat(o,".").concat(u)]||b[u]||d[u]||r;return t?l.a.createElement(f,s(s({ref:a},c),{},{components:t})):l.a.createElement(f,s({ref:a},c))}));function f(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var r=t.length,o=new Array(r);o[0]=u;var s={};for(var i in a)hasOwnProperty.call(a,i)&&(s[i]=a[i]);s.originalType=e,s.mdxType="string"==typeof e?e:n,o[1]=s;for(var c=2;c<r;c++)o[c]=t[c];return l.a.createElement.apply(null,o)}return l.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"}}]);